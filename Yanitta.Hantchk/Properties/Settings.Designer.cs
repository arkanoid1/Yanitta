//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Yanitta.Hantchk.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<HotKey xmlns:xsi=\"http://www.w3.org/200" +
            "1/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Key=\"F9\" Modi" +
            "fier=\"Alt\" />")]
        public global::System.Windows.Input.HotKey HotKey {
            get {
                return ((global::System.Windows.Input.HotKey)(this["HotKey"]));
            }
            set {
                this["HotKey"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("FISHING_SPELL    = { };-- добавить ид заклинаний рыбной ловли\r\nMIN_QUALITY_ITEM =" +
            " 0;\r\n-- 0. Poor (gray): Broken I.W.I.N. Button\r\n-- 1. Common (white): Archmage V" +
            "argoth\'s Staff\r\n-- 2. Uncommon (green): X-52 Rocket Helmet\r\n-- 3. Rare / Superio" +
            "r (blue): Onyxia Scale Cloak\r\n-- 4. Epic (purple): Talisman of Ephemeral Power\r\n" +
            "-- 5. Legendary (orange): Fragment of Val\'anyr\r\n-- 6. Artifact (golden yellow): " +
            "The Twin Blades of Azzinoth\r\n-- 7. Heirloom (light yellow): Bloodied Arcanite Re" +
            "aper\r\n\r\nfunction HantchukDoAction()\r\n    if     UnitIsDeadOrGhost(\"player\") \r\n  " +
            "      or UnitAffectingCombat(\"player\") \r\n        or IsMounted() \r\n        or Uni" +
            "tCastingInfo(\"player\") \r\n        or UnitChannelInfo(\"player\")\r\n        then\r\n   " +
            "     return;\r\n    end\r\n    \r\n    if IsFishingLoot() then\r\n        return;\r\n    e" +
            "nd\r\n    \r\n    for i,spell_id in ipairs(FISHING_SPELL) do\r\n        if IsKnowSpell" +
            "(spell_id) then\r\n            local start, duration, enable = GetSpellCooldown(ab" +
            "ility.SpellId);\r\n            if enable == 1 and duration == 0 then\r\n            " +
            "    CastSpellByName(GetSpellInfo(spell_id));\r\n            end \r\n            brea" +
            "k;\r\n        end\r\n    end\r\nend\r\n\r\nfunction ExecHantchuck()\r\n    Hantchuk_AddonEna" +
            "bled = not Hantchuk_AddonEnabled;\r\n    if Hantchuk_AddonEnabled then\r\n        Ha" +
            "ntchukFrame:RegisterEvent(\"PLAYER_ENTERING_WORLD\");\r\n        HantchukFrame:Regis" +
            "terEvent(\"PLAYER_LOGOUT\");\r\n        HantchukFrame:RegisterEvent(\"LOOT_OPENED\");\r" +
            "\n    else\r\n        HantchukFrame:UnregisterEvent(\"PLAYER_ENTERING_WORLD\");\r\n    " +
            "    HantchukFrame:UnregisterEvent(\"PLAYER_LOGOUT\");\r\n        HantchukFrame:Unreg" +
            "isterEvent(\"LOOT_OPENED\");\r\n        HantchukFrame = nil;\r\n    end\r\nend\r\n\r\nfuncti" +
            "on HantchukFrame_OnUpdate(self, elapsed)\r\n    if GetTime() >= Hantchuk_LastTime " +
            "then\r\n        if Hantchuk_AddonEnabled then\r\n            HantchukDoAction();\r\n  " +
            "      end\r\n        Hantchuk_LastTime = GetTime() + (Hantchuk_Delay / 1000);\r\n   " +
            " end\r\nend\r\n\r\nfunction HantchukFrame_OnEvent(self, event, ...)\r\n    if event == \"" +
            "PLAYER_ENTERING_WORLD\" then\r\n        if HantchukFrame then\r\n            Hantchuk" +
            "Frame:Show();\r\n        end\r\n    elseif event == \"PLAYER_LOGOUT\" then\r\n        St" +
            "opHantchuck();\r\n    elseif event == \"LOOT_OPENED\" then\r\n        local autoLoot =" +
            " ...;\r\n        if not autoLoot then\r\n            for slot = 1, GetNumLootItems()" +
            " do\r\n                local texture, item, quantity, quality, locked = GetLootSlo" +
            "tInfo(slot);\r\n                if quality >= MIN_QUALITY_ITEM then\r\n             " +
            "       LootSlot(slot);\r\n                end\r\n            end\r\n        end\r\n    e" +
            "nd\r\nend\r\n\r\nif not HantchukFrame then\r\n    Hantchuk_AddonEnabled    = false;    -" +
            "- признак включенного аддона\r\n    Hantchuk_Delay           = 250;      -- интерв" +
            "ал таймера (милисекунды)\r\n    Hantchuk_LastTime        = 0;        -- служебная " +
            "переменная для таймера\r\n\r\n    HantchukFrame = CreateFrame(\"Frame\");\r\n    --Hantc" +
            "hukFrame:RegisterEvent(event);\r\n    HantchukFrame:SetScript(\"OnUpdate\", Hantchuk" +
            "Frame_OnUpdate);\r\n    HantchukFrame:SetScript(\"OnEvent\",  HantchukFrame_OnEvent)" +
            ";\r\n    HantchukFrame:Show();\r\nend\r\n\r\nExecHantchuck();")]
        public string LuaCode {
            get {
                return ((string)(this["LuaCode"]));
            }
            set {
                this["LuaCode"] = value;
            }
        }
    }
}
