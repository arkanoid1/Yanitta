<?xml version="1.0"?>
<ArrayOfWowApi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <WowApi Name="AbandonQuest" Priority="0" ImageType="Method">
    <Signature>AbandonQuest()</Signature>
    <Description>Confirms abandoning a quest. Use SetAbandonQuest() first to select the quest to abandon.</Description>
  </WowApi>
  <WowApi Name="AbandonSkill" Priority="0" ImageType="Method">
    <Signature>AbandonSkill(index)</Signature>
    <Description>Unlearns a skill (used only for professions)</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the skills list (between 1 and GetNumSkillLines()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AcceptAreaSpiritHeal" Priority="0" ImageType="Method">
    <Signature>AcceptAreaSpiritHeal()</Signature>
    <Description>Accepts the next upcoming periodic resurrection from a battleground spirit healer. Automatically called in the default UI in response to the AREA_SPIRIT_HEALER_IN_RANGE event which fires when the player's ghost is near a battleground spirit healer.</Description>
  </WowApi>
  <WowApi Name="AcceptArenaTeam" Priority="0" ImageType="Method">
    <Signature>AcceptArenaTeam()</Signature>
    <Description>Accepts an invitation to join an arena team</Description>
  </WowApi>
  <WowApi Name="AcceptBattlefieldPort" Priority="0" ImageType="Method">
    <Signature>AcceptBattlefieldPort(index, accept)</Signature>
    <Description>Accepts the offered teleport to a battleground/arena or leaves the battleground/arena or queue. This function requires a hardware event when used to accept a teleport; it can be called without a hardware event for leaving a battleground/arena or its queue.</Description>
    <ArgumentList Name="index">
      <Description>Index of a battleground or arena type for which the player is queued (number) </Description>
    </ArgumentList>
    <ArgumentList Name="accept">
      <Description>1 to accept the offered teleport; nil to exit the queue or leave the battleground/arena match in progress (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AcceptDuel" Priority="0" ImageType="Method">
    <Signature>AcceptDuel()</Signature>
    <Description>Accepts a proposed duel</Description>
  </WowApi>
  <WowApi Name="AcceptGroup" Priority="0" ImageType="Method">
    <Signature>AcceptGroup()</Signature>
    <Description>Accepts an invitation to join a party or raid. Usable in response to the PARTY_INVITE_REQUEST event which fires when the player is invited to join a group. This function does not automatically hide the default UI's group invite dialog; doing such requires calling StaticPopup_Hide("PARTY_INVITE"), but only after the PARTY_MEMBERS_CHANGED event fires indicating the player has successfully joined the group.</Description>
  </WowApi>
  <WowApi Name="AcceptGuild" Priority="0" ImageType="Method">
    <Signature>AcceptGuild()</Signature>
    <Description>Accepts an invitation to join a guild. Usable in response to the GUILD_INVITE_REQUEST event, which fires when the player is invited to join a guild.</Description>
  </WowApi>
  <WowApi Name="AcceptLevelGrant" Priority="0" ImageType="Method">
    <Signature>AcceptLevelGrant()</Signature>
    <Description>Accepts a level offered by the player's Recruit-a-Friend partner</Description>
  </WowApi>
  <WowApi Name="AcceptProposal" Priority="0" ImageType="Method">
    <Signature>AcceptProposal()</Signature>
    <Description>Accepts a LFG dungeon invite.</Description>
  </WowApi>
  <WowApi Name="AcceptQuest" Priority="0" ImageType="Method">
    <Signature>AcceptQuest()</Signature>
    <Description>Accepts the quest offered by a questgiver. Usable following the QUEST_DETAIL event in which the questgiver presents the player with the details of a quest and the option to accept or decline.</Description>
  </WowApi>
  <WowApi Name="AcceptResurrect" Priority="0" ImageType="Method">
    <Signature>AcceptResurrect()</Signature>
    <Description>Accepts an offered resurrection spell. Not used for self-resurrection; see UseSoulstone() for such cases.</Description>
  </WowApi>
  <WowApi Name="AcceptSockets" Priority="0" ImageType="Method">
    <Signature>AcceptSockets()</Signature>
    <Description>Accepts changes made in the Item Socketing UI. Any gems added are permanently socketed into the item, and any existing gems replaced by new gems are destroyed. This function only has effect while the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
  </WowApi>
  <WowApi Name="AcceptSpellConfirmationPrompt" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="AcceptTrade" Priority="0" ImageType="Method">
    <Signature>AcceptTrade()</Signature>
    <Description>Accepts a proposed trade. Once both players have accepted, the trade process completes and the actual exchange of items/money/enchants takes place.</Description>
  </WowApi>
  <WowApi Name="AcceptXPLoss" Priority="0" ImageType="Method">
    <Signature>AcceptXPLoss()</Signature>
    <Description>Resurrects the player at a spirit healer, accepting possible consequences. Resurrecting at a spirit healer generally results in a loss of durability (both equipped items and those in the player's bags) and may also result in the Resurrection Sickness debuff.
Early in the development of World of Warcraft, resurrecting at a spirit healer caused a loss of experience points. The change to a loss of item durability was made before the initial public release of World of Warcraft, but the name of this function was never changed.</Description>
  </WowApi>
  <WowApi Name="AcknowledgeAutoAcceptQuest" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ActionHasRange" Priority="0" ImageType="Method">
    <Signature>hasRange = ActionHasRange(slot)</Signature>
    <Description>Returns whether an action has a range restriction</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="hasRange">
      <Description>1 if the action has a range restriction; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="AddAutoQuestPopUp" Priority="0" ImageType="Method">
    <Signature>AddAutoQuestPopUp(questId, "type")</Signature>
    <Description>Create a quest popup in the WatchFrame</Description>
    <ArgumentList Name="questId">
      <Description>(number) </Description>
    </ArgumentList>
    <ArgumentList Name="type">
      <Description>Popup type, can be either of the following (string)
COMPLETE - Completing a quest
OFFER - Offering a quest</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddChatWindowChannel" Priority="0" ImageType="Method">
    <Signature>zoneChannel = AddChatWindowChannel(index, channel)</Signature>
    <Description>Adds a chat channel to the saved list of those displayed in a chat window. Used by the default UI's function ChatFrame_AddChannel() which manages the set of channel messages shown in a displayed ChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>Name of a chat channel (number) </Description>
    </ArgumentList>
    <ReturnList Name="zoneChannel">
      <Description>0 for non-zone channels, otherwise a numeric index specific to that channel (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="AddChatWindowMessages" Priority="0" ImageType="Method">
    <Signature>AddChatWindowMessages(index, "messageGroup")</Signature>
    <Description>Adds a message type to the saved list of those displayed in a chat window. Used by the default UI's function ChatFrame_AddMessageGroup(), which manages the set of message types shown in a displayed ChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="messageGroup">
      <Description>Token identifying a message type (string, chatMsgType) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddFriend" Priority="0" ImageType="Method">
    <Signature>AddFriend("name")</Signature>
    <Description>Adds a character to the friends list</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to add to the friends list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddIgnore" Priority="0" ImageType="Method">
    <Signature>AddIgnore("name")</Signature>
    <Description>Adds a character to the ignore list</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to add to the ignore list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddMute" Priority="0" ImageType="Method">
    <Signature>AddMute("name")</Signature>
    <Description>Adds a character to the muted list for voice chat. The Muted list acts for voice chat as the Ignore list does for text chat: muted characters will never be heard regardless of which voice channels they join the player in.</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to add to the mute list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddOrDelIgnore" Priority="0" ImageType="Method">
    <Signature>AddOrDelIgnore("fullname")</Signature>
    <Description>Adds the named character to the ignore list, or removes the character if already in the ignore list</Description>
    <ArgumentList Name="fullname">
      <Description>Name of a character to add to or remove from the ignore list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddOrDelMute" Priority="0" ImageType="Method">
    <Signature>AddOrDelMute("unit") or AddOrDelMute("name")</Signature>
    <Description>Adds or removes a character from the voice mute list. Adds the character to the list if he/she is not already on it; removes the character if already on the list.
The Muted list acts for voice chat as the Ignore list does for text chat: muted characters will never be heard regardless of which voice channels they join the player in.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to mute (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to mute (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddOrRemoveFriend" Priority="0" ImageType="Method">
    <Signature>AddOrRemoveFriend("name", "note")</Signature>
    <Description>Adds the named character to the friends list, or removes the character if already in the friends list</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to add to or remove from the friends list (string) </Description>
    </ArgumentList>
    <ArgumentList Name="note">
      <Description>Note text to be associated with the friends list entry created (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddQuestWatch" Priority="0" ImageType="Method">
    <Signature>AddQuestWatch(questIndex)</Signature>
    <Description>Adds a quest to the objectives tracker</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddTrackedAchievement" Priority="0" ImageType="Method">
    <Signature>AddTrackedAchievement(id)</Signature>
    <Description>Adds an achievement to the objectives tracker UI</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AddTradeMoney" Priority="0" ImageType="Method">
    <Signature>AddTradeMoney()</Signature>
    <Description>Adds the money currently on the cursor to the trade window</Description>
  </WowApi>
  <WowApi Name="ApplyBarberShopStyle" Priority="0" ImageType="Method">
    <Signature>ApplyBarberShopStyle()</Signature>
    <Description>Purchases the selected barber shop style changes. Does not exit the barber shop session, so further changes are still allowed.
The BARBER_SHOP_SUCCESS and BARBER_SHOP_APPEARANCE_APPLIED events fire once the style change takes effect.</Description>
  </WowApi>
  <WowApi Name="ApplyTransmogrifications" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ArchaeologyGetIconInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ArchaeologyMapUpdateAll" Priority="0" ImageType="Method">
    <Signature>numEntries = ArchaeologyMapUpdateAll()</Signature>
    <Description>Returns the number of digsites in the current zone. The value returned reflects dig sites for the current zone: If the world map is visible, the currently viewed zone; else, the player's zone. It will always return 0 when called while the zone is continent or further zoomed out.</Description>
    <ReturnList Name="numEntries">
      <Description>The number of digsites in the current zone (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ArcheologyGetVisibleBlobID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="AreAccountAchievementsHidden" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ArenaTeamDisband" Priority="0" ImageType="Method">
    <Signature>ArenaTeamDisband(team)</Signature>
    <Description>Disbands an arena team. Only has effect if the player is captain of the given team.</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ArenaTeamInviteByName" Priority="0" ImageType="Method">
    <Signature>ArenaTeamInviteByName(team, "name")</Signature>
    <Description>Invites a character to one of the player's arena teams</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to invite (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ArenaTeamLeave" Priority="0" ImageType="Method">
    <Signature>ArenaTeamLeave(team)</Signature>
    <Description>Leaves an arena team</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ArenaTeamRoster" Priority="0" ImageType="Method">
    <Signature>ArenaTeamRoster(team)</Signature>
    <Description>Requests arena team roster information from the server. Does not return information directly: the ARENA_TEAM_ROSTER_UPDATE event fires when information from the server becomes available, which can then be retrieved using GetNumArenaTeamMembers() and GetArenaTeamRosterInfo().
Roster update requests are limited to once every 10 seconds per team. For example, calling ArenaTeamRoster(1) twice within ten seconds will not result in a second ARENA_TEAM_ROSTER_UPDATE event, but calling ArenaTeamRoster(1) and ArenaTeamRoster(2) within ten seconds will result in two ARENA_TEAM_ROSTER_UPDATE events (one for each team).</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ArenaTeamSetLeaderByName" Priority="0" ImageType="Method">
    <Signature>ArenaTeamSetLeaderByName(team, "name")</Signature>
    <Description>Promotes an arena team member to team captain. Only has effect if the player is captain of the given team.</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a team member to promote (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ArenaTeamUninviteByName" Priority="0" ImageType="Method">
    <Signature>ArenaTeamUninviteByName(team, "name")</Signature>
    <Description>Removes a member from an arena team</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a team member to remove (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ArenaTeam_GetTeamSizeID" Priority="0" ImageType="Method">
    <Signature>teamID = ArenaTeam_GetTeamSizeID(teamSize)</Signature>
    <Description>Converts an arena team size to the appropriate numeric arena team identifier</Description>
    <ArgumentList Name="teamSize">
      <Description>The size of the arena team (i.e. 2 for 2v2, 3 for 3v3, etc.) (number) </Description>
    </ArgumentList>
    <ReturnList Name="teamID">
      <Description>The numeric identifier for the arena team of the given size (number, arenaTeamID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="AscendStop" Priority="0" ImageType="Method">
    <Signature>AscendStop()</Signature>
    <Description>Stops movement initiated by JumpOrAscendStart. Used by the JUMP binding, which also controls ascent when swimming or flying. Has no meaningful effect if called while jumping (in which case movement is generally stopped by hitting the ground).</Description>
  </WowApi>
  <WowApi Name="AssistUnit" Priority="0" ImageType="Method">
    <Signature>AssistUnit("unit") or AssistUnit("name")</Signature>
    <Description>Targets the unit targeted by another unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to assist (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to assist (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AttackTarget" Priority="0" ImageType="Method">
    <Signature>AttackTarget()</Signature>
    <Description>Begins auto-attack against the player's current target. (If the "Auto Attack/Auto Shot" option is turned on, also begins Auto Shot for hunters.)</Description>
  </WowApi>
  <WowApi Name="AutoEquipCursorItem" Priority="0" ImageType="Method">
    <Signature>AutoEquipCursorItem()</Signature>
    <Description>Equips the item on the cursor. The item is automatically equipped in the first available slot in which it fits. To equip an item in a specific slot, see EquipCursorItem().
Causes an error message (UI_ERROR_MESSAGE) if the item on the cursor cannot be equipped. Does nothing if the cursor does not contain an item.</Description>
  </WowApi>
  <WowApi Name="AutoLootMailItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="AutoStoreGuildBankItem" Priority="0" ImageType="Method">
    <Signature>AutoStoreGuildBankItem(tab, slot)</Signature>
    <Description>Withdraws the item(s) from a slot in the guild bank, automatically adding to the player's bags</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot in the guild bank tab (between 1 and MAX_GUILDBANK_SLOTS_PER_TAB) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BNAcceptFriendInvite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNCheckBattleTagInviteToGuildMember" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNCheckBattleTagInviteToUnit" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNConnected" Priority="0" ImageType="Method">
    <Signature>isOnline = BNConnected()</Signature>
    <Description>Returns whether or not the player is connected to Battle.net</Description>
    <ReturnList Name="isOnline">
      <Description>true if the player is connected to Battle.net; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNCreateConversation" Priority="0" ImageType="Method">
    <Signature>result = BNCreateConversation(presenceID_1, presenceID_2)</Signature>
    <Description>Create a conversation between you and two friends</Description>
    <ArgumentList Name="presenceID_1">
      <Description>The presenceID of your first friend (number) </Description>
    </ArgumentList>
    <ArgumentList Name="presenceID_2">
      <Description>The presenceID of your second friend (number) </Description>
    </ArgumentList>
    <ReturnList Name="result">
      <Description>ASSUMPTION: If creation conversation was successful or not (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNDeclineFriendInvite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNFeaturesEnabled" Priority="0" ImageType="Method">
    <Signature>isEnabled = BNFeaturesEnabled()</Signature>
    <Description>Returns whether or not RealID services are disabled</Description>
    <ReturnList Name="isEnabled">
      <Description>true if RealID is enabled; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNFeaturesEnabledAndConnected" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetBlockedInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetBlockedToonInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetConversationInfo" Priority="0" ImageType="Method">
    <Signature>type = BNGetConversationInfo(channel)</Signature>
    <Description>Returns information about an existing battle.net conversation</Description>
    <ArgumentList Name="channel">
      <Description>ID of channel you want to check (number) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Seems to be 'conversation' if the conversation exists, nil if not (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetConversationMemberInfo" Priority="0" ImageType="Method">
    <Signature>presenceID, unknown, displayName = BNGetConversationMemberInfo(channel, memberIndex)</Signature>
    <Description>Returns information about a member of a battle.net conversation</Description>
    <ArgumentList Name="channel">
      <Description>The index of the channel you want member info for (number) </Description>
    </ArgumentList>
    <ArgumentList Name="memberIndex">
      <Description>The index of the member you want info for (number) </Description>
    </ArgumentList>
    <ReturnList Name="presenceID">
      <Description>This number seems to be the same as the presence ID of the RealID friend (number) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>Unknown (ID?) (number) </Description>
    </ReturnList>
    <ReturnList Name="displayName">
      <Description>The name that gets displayed with chat messages. Real name for friends, charname for FoF (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetCustomMessageTable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetFOFInfo" Priority="0" ImageType="Method">
    <Signature>presenceID, givenName, surname, isFriend = BNGetFOFInfo(presenceID, mutual, non-mutual, index)</Signature>
    <Description>Returns information about the specified friend of a RealID friend</Description>
    <ArgumentList Name="presenceID">
      <Description>presenceID for the RealID friend for whom you are requesting friend info (number) </Description>
    </ArgumentList>
    <ArgumentList Name="mutual">
      <Description>Should the list include mutual friends (i.e. people who you and the person referenced by presenceID are both friends with). (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="non-mutual">
      <Description>Should the list include non-mutual friends. (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>The index of the entry in the list to retrieve (1 to BNGetNumFOF(...)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="presenceID">
      <Description>a unique numeric identifier for this friend for this session (number) </Description>
    </ReturnList>
    <ReturnList Name="givenName">
      <Description>a |K Escape Sequence representing the friend's first/given name (string) </Description>
    </ReturnList>
    <ReturnList Name="surname">
      <Description>a |K Escape Sequence representing the friend's Surname/Family name (string) </Description>
    </ReturnList>
    <ReturnList Name="isFriend">
      <Description>true if this person is a direct friend of yours, false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetFriendIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetFriendInfo" Priority="0" ImageType="Method">
    <Signature>presenceID, presenceName, battleTag, isBattleTagPresence, toonName, toonID, client, isOnline, lastOnline, isAFK, isDND, messageText, noteText, isRIDFriend, broadcastTime, canSoR = BNGetFriendInfo(friendIndex)</Signature>
    <Description>Returns information about a RealID friend by index</Description>
    <ArgumentList Name="friendIndex">
      <Description>Index (between 1 and BNGetNumFriends()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="presenceID">
      <Description>auto incrementing ID, reset at each login. Persists across reload of UI, but not change of character (number) </Description>
    </ReturnList>
    <ReturnList Name="presenceName">
      <Description>Full name of the friend, as a new form of chatlink. Visually looks like a string, but only when rendered. The real name of the friend for RealID friends. The BattleTag without the ID number for BattleTag friends. (string, Kstring) </Description>
    </ReturnList>
    <ReturnList Name="battleTag">
      <Description>BattleTag of the friend, or nil if the friend does not have a BattleTag. (string) </Description>
    </ReturnList>
    <ReturnList Name="isBattleTagPresence">
      <Description>A boolean indicating whether the friend is a RealID friend (false) or a BattleTag friend (true). (boolean) </Description>
    </ReturnList>
    <ReturnList Name="toonName">
      <Description>Name of the active character tied to the BNet account (string) </Description>
    </ReturnList>
    <ReturnList Name="toonID">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="client">
      <Description>The name of the game the friend is currently playing, if any; Returns nil if not online. Returns initialism for World of Warcraft ('WoW') (string) </Description>
    </ReturnList>
    <ReturnList Name="isOnline">
      <Description>Online status (boolean) </Description>
    </ReturnList>
    <ReturnList Name="lastOnline">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="isAFK">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="isDND">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="messageText">
      <Description>RealID broadcast message displayed below the user on your friends list (string) </Description>
    </ReturnList>
    <ReturnList Name="noteText">
      <Description>The player's personal note for the friend; nil for no note (string) </Description>
    </ReturnList>
    <ReturnList Name="isRIDFriend">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="broadcastTime">
      <Description>The number of seconds since the friend send the current broadcast (number) </Description>
    </ReturnList>
    <ReturnList Name="canSoR">
      <Description>Whether or not this friend can receive a Scroll of Resurrection (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetFriendInfoByID" Priority="0" ImageType="Method">
    <Signature>presenceID, givenName, surname, toonName, toonID, client, isOnline, lastOnline, isAFK, isDND, messageText, noteText, isRIDFriend, broadcastTime, canSoR = BNGetFriendInfoByID(presenceID)</Signature>
    <Description>Returns information about a RealID friend</Description>
    <ArgumentList Name="presenceID">
      <Description>(number, presenceID) </Description>
    </ArgumentList>
    <ReturnList Name="presenceID">
      <Description>(number, presenceID) </Description>
    </ReturnList>
    <ReturnList Name="givenName">
      <Description>First name of the friend (|K string, Kstring) </Description>
    </ReturnList>
    <ReturnList Name="surname">
      <Description>Last name (surname) of the friend (|K string, Kstring) </Description>
    </ReturnList>
    <ReturnList Name="toonName">
      <Description>Name of the active character tied to the BNet account (string) </Description>
    </ReturnList>
    <ReturnList Name="toonID">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="client">
      <Description>The name of the game the friend is currently playing, if any; Returns nil if not online. Returns initialism for World of Warcraft ('WoW') (string) </Description>
    </ReturnList>
    <ReturnList Name="isOnline">
      <Description>Online status (boolean) </Description>
    </ReturnList>
    <ReturnList Name="lastOnline">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="isAFK">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="isDND">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="messageText">
      <Description>RealID broadcast message displayed below the user on your friends list (string) </Description>
    </ReturnList>
    <ReturnList Name="noteText">
      <Description>The player's personal note for the friend; nil for no note (string) </Description>
    </ReturnList>
    <ReturnList Name="isRIDFriend">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="broadcastTime">
      <Description>The number of seconds since the friend send the current broadcast (number) </Description>
    </ReturnList>
    <ReturnList Name="canSoR">
      <Description>Whether or not this friend can receive a Scroll of Resurrection (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetFriendInviteInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetFriendToonInfo" Priority="0" ImageType="Method">
    <Signature>unknown, toonName, client, realmName, faction, race, class, unknown, zoneName, level, gameText, broadcastText, broadcastTime = BNGetFriendToonInfo(friendIndex, toonIndex)</Signature>
    <Description>Returns information about a particular online toon tied to a RealID friend</Description>
    <ArgumentList Name="friendIndex">
      <Description>Index (between 1 and BNGetNumFriends()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="toonIndex">
      <Description>Index (between 1 and BNGetNumFriendToons(friendIndex)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="unknown">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="toonName">
      <Description>The toon's name (string) </Description>
    </ReturnList>
    <ReturnList Name="client">
      <Description>The name of the game the friend is currently playing, if any; Returns initialism for World of Warcraft ('WoW') (string) </Description>
    </ReturnList>
    <ReturnList Name="realmName">
      <Description>The toon's realm name (string) </Description>
    </ReturnList>
    <ReturnList Name="faction">
      <Description>The toon's faction. Returns -1 for offline, 0 for Horde, 1 for Alliance (number) </Description>
    </ReturnList>
    <ReturnList Name="race">
      <Description>The toon's race (string) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>The toon's class (string) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(string) </Description>
    </ReturnList>
    <ReturnList Name="zoneName">
      <Description>The toon's zone (location) (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>The toon's character level (string) </Description>
    </ReturnList>
    <ReturnList Name="gameText">
      <Description>The zone and server of the active toon separated by a hyphen (string) </Description>
    </ReturnList>
    <ReturnList Name="broadcastText">
      <Description>The user's RealID broadcast message (string) </Description>
    </ReturnList>
    <ReturnList Name="broadcastTime">
      <Description>The time the broadcast message was first set (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetInfo" Priority="0" ImageType="Method">
    <Signature>unknownPresenceID1, battleTag, unknownPresenceID2, broadcastText, bnetAFK, bnetDND, unknown = BNGetInfo()</Signature>
    <Description>Returns information about the player's RealID settings</Description>
    <ReturnList Name="unknownPresenceID1">
      <Description>Might be the player's presence ID (number, presenceID) </Description>
    </ReturnList>
    <ReturnList Name="battleTag">
      <Description>The player's BattleTag, including the numeric code (e.g. 'John#1234'). (string) </Description>
    </ReturnList>
    <ReturnList Name="unknownPresenceID2">
      <Description>Seems to be always equal to unknownPresenceID1 + 1. (number, presenceID) </Description>
    </ReturnList>
    <ReturnList Name="broadcastText">
      <Description>The player's current broadcast message (entered at the top of the friends tab) (string) </Description>
    </ReturnList>
    <ReturnList Name="bnetAFK">
      <Description>Whether the player is AFK (Away). (boolean) </Description>
    </ReturnList>
    <ReturnList Name="bnetDND">
      <Description>Whether the player is DND (Busy). (boolean) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>Unknown flag (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetMatureLanguageFilter" Priority="0" ImageType="Method">
    <Signature>isEnabled = BNGetMatureLanguageFilter()</Signature>
    <Description>Returns boolean for the Mature Language Filter option's state.</Description>
    <ReturnList Name="isEnabled">
      <Description>Returns true if the Mature Language Filter interface option is enabled, otherwise false. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetMaxNumConversations" Priority="0" ImageType="Method">
    <Signature>count = BNGetMaxNumConversations()</Signature>
    <Description>Returns the maximum number of simultanious RealID conversations you can be a part of</Description>
    <ReturnList Name="count">
      <Description>Max number of conversations you can be a part of (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetMaxPlayersInConversation" Priority="0" ImageType="Method">
    <Signature>count = BNGetMaxPlayersInConversation()</Signature>
    <Description>Returns the maximum number of realID friends you can have in one conversation</Description>
    <ReturnList Name="count">
      <Description>The max number of players that can be in one conversation (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetNumBlocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetNumBlockedToons" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetNumConversationMembers" Priority="0" ImageType="Method">
    <Signature>memberCount = BNGetNumConversationMembers(channel)</Signature>
    <Description>Returns the number of members in a battle.net conversation</Description>
    <ArgumentList Name="channel">
      <Description>The index of the conversation to get member count for (number) </Description>
    </ArgumentList>
    <ReturnList Name="memberCount">
      <Description>Number of members in the conversation you asked for. 0 for non-existing conversations (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetNumFOF" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetNumFriendInvites" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetNumFriendToons" Priority="0" ImageType="Method">
    <Signature>numToons = BNGetNumFriendToons(friendIndex)</Signature>
    <Description>Returns the number of online toons for a friend</Description>
    <ArgumentList Name="friendIndex">
      <Description>The index of the friend to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="numToons">
      <Description>The number of toons (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetNumFriends" Priority="0" ImageType="Method">
    <Signature>totalBNet, numBNetOnline = BNGetNumFriends()</Signature>
    <Description>Returns total number of RealID friends and currently online number of RealID friends</Description>
    <ReturnList Name="totalBNet">
      <Description>Total number of RealID friends (number) </Description>
    </ReturnList>
    <ReturnList Name="numBNetOnline">
      <Description>Number of currently online RealID friends (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetSelectedBlock" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetSelectedFriend" Priority="0" ImageType="Method">
    <Signature>friendIndex = BNGetSelectedFriend()</Signature>
    <Description>Returns the index of the selected user on your friend's list</Description>
    <ReturnList Name="friendIndex">
      <Description>The index of the friend in the list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNGetSelectedToonBlock" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNGetToonInfo" Priority="0" ImageType="Method">
    <Signature>unknown, toonName, client, realmName, realmID, faction, race, class, unknown, zoneName, level, gameText, broadcastText, broadcastTime, unknown, presenceID = BNGetToonInfo(presenceID)</Signature>
    <Description>Returns information about the active toon tied to a Real ID or BattleTag friend. Returns nil if the player is not online.</Description>
    <ArgumentList Name="presenceID">
      <Description>(number) </Description>
    </ArgumentList>
    <ReturnList Name="unknown">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="toonName">
      <Description>The toon's name (string) </Description>
    </ReturnList>
    <ReturnList Name="client">
      <Description>The name of the game the friend is currently playing, if any; Returns initialism for World of Warcraft ('WoW') (string) </Description>
    </ReturnList>
    <ReturnList Name="realmName">
      <Description>The toon's realm name (string) </Description>
    </ReturnList>
    <ReturnList Name="realmID">
      <Description>The toon's realm ID (not sure if unique per realm, or a weekly/session realmID identifier) (number) </Description>
    </ReturnList>
    <ReturnList Name="faction">
      <Description>The toon's faction. Returns "Horde" or "Alliance" (string) </Description>
    </ReturnList>
    <ReturnList Name="race">
      <Description>The toon's race (string) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>The toon's class (string) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(string) </Description>
    </ReturnList>
    <ReturnList Name="zoneName">
      <Description>The toon's zone (location) (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>The toon's character level (string) </Description>
    </ReturnList>
    <ReturnList Name="gameText">
      <Description>The zone and server of the active toon separated by a hyphen (string) </Description>
    </ReturnList>
    <ReturnList Name="broadcastText">
      <Description>The user's RealID broadcast message (string) </Description>
    </ReturnList>
    <ReturnList Name="broadcastTime">
      <Description>The time the broadcast message was first set (string) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="presenceID">
      <Description>Presence ID of the player (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNInviteFriend" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNInviteToConversation" Priority="0" ImageType="Method">
    <Signature>BNInviteToConversation(channel, presenceID)</Signature>
    <Description>Invite a friend into an existing conversation</Description>
    <ArgumentList Name="channel">
      <Description>The ID of the conversation to invite to (number) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="BNIsBlocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNIsFriend" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNIsSelf" Priority="0" ImageType="Method">
    <Signature>isSelf = BNIsSelf(presenceID)</Signature>
    <Description>Returns whether or not the presence ID is the one of the player</Description>
    <ArgumentList Name="presenceID">
      <Description>(number) </Description>
    </ArgumentList>
    <ReturnList Name="isSelf">
      <Description>true if the presence ID is the one of the player; false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BNIsToonBlocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNLeaveConversation" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNListConversation" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNRemoveFriend" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNReportFriendInvite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNReportPlayer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNRequestFOFInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSendConversationMessage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSendFriendInvite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSendFriendInviteByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSendSoR" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSendVerifiedBattleTagInvite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSendWhisper" Priority="0" ImageType="Method">
    <Signature>BNSendWhisper(presenceID, messageText)</Signature>
    <Description>Sends a whisper over Battle.Net</Description>
    <ArgumentList Name="presenceID">
      <Description>presenceID of the destination. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="messageText">
      <Description>The message text to send. This can contain any UTF-8 character except NUL, CR, and LF, and is limited to 255 characters in length. If the length exceeds 255, the function will silently fail. (text) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BNSetAFK" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetBlocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetCustomMessage" Priority="0" ImageType="Method">
    <Signature>BNSetCustomMessage("broadcastText")</Signature>
    <Description>Sets the player's current RealID broadcast message.</Description>
    <ArgumentList Name="broadcastText">
      <Description>Value that becomes your new broadcast message (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BNSetDND" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetFocus" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetFriendNote" Priority="0" ImageType="Method">
    <Signature>BNSetFriendNote(presenceID, "note")</Signature>
    <Description>Changes the private note for a RealID friend</Description>
    <ArgumentList Name="presenceID">
      <Description>The presenceID of the friend whose note you want to change (number) </Description>
    </ArgumentList>
    <ArgumentList Name="note">
      <Description>The new note for the friend (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BNSetMatureLanguageFilter" Priority="0" ImageType="Method">
    <Signature>BNSetMatureLanguageFilter(enabled)</Signature>
    <Description>Sets the Mature Language Filter option</Description>
    <ArgumentList Name="enabled">
      <Description>true to enable the Mature Language Filter; otherwise false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BNSetSelectedBlock" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetSelectedFriend" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetSelectedToonBlock" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNSetToonBlocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BNTokenFindName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BankButtonIDToInvSlotID" Priority="0" ImageType="Method">
    <Signature>inventoryID = BankButtonIDToInvSlotID(buttonID [, isBag])</Signature>
    <Description>Returns the inventoryID corresponding to a bank item or bag slot. The results of this function can be used with GetInventorySlotInfo() and other related inventory functions.</Description>
    <ArgumentList Name="buttonID">
      <Description>Numeric ID of an item or bag slot in the bank UI. The first item slot is numbered 1, while the first bag slot is numbered 5. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="isBag">
      <Description>1 if the given ID corresponds to a bank bag slot; nil if the ID corresponds to an item slot (1nil) </Description>
    </ArgumentList>
    <ReturnList Name="inventoryID">
      <Description>An inventory slot ID usable with various Inventory API functions (number, inventoryID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="BarberShopReset" Priority="0" ImageType="Method">
    <Signature>BarberShopReset()</Signature>
    <Description>Resets barber shop options to the currently worn styles. Changes the underlying data (and thus the character's appearance) only; the default barbershop UI does not update.</Description>
  </WowApi>
  <WowApi Name="BattlefieldMgrEntryInviteResponse" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BattlefieldMgrExitRequest" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BattlefieldMgrQueueInviteResponse" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BattlefieldMgrQueueRequest" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BeginTrade" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BindEnchant" Priority="0" ImageType="Method">
    <Signature>BindEnchant()</Signature>
    <Description>Confirms enchanting an item (when the item will become soulbound as a result). Usable following the BIND_ENCHANT event which fires upon attempting to perform an enchantment that would cause the target item to become soulbound.</Description>
  </WowApi>
  <WowApi Name="Blizzard_CombatLog_Update_QuickButtons" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="BuyGuildBankTab" Priority="0" ImageType="Method">
    <Signature>BuyGuildBankTab()</Signature>
    <Description>Purchases the next available guild bank tab</Description>
  </WowApi>
  <WowApi Name="BuyGuildCharter" Priority="0" ImageType="Method">
    <Signature>BuyGuildCharter("guildName")</Signature>
    <Description>Purchases a guild charter. Usable if the player is interacting with a guild registrar (i.e. between the GUILD_REGISTRAR_SHOW and GUILD_REGISTRAR_CLOSED events).</Description>
    <ArgumentList Name="guildName">
      <Description>Name of the guild to be created (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BuyMerchantItem" Priority="0" ImageType="Method">
    <Signature>BuyMerchantItem(index, quantity)</Signature>
    <Description>Purchases an item available from a vendor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="quantity">
      <Description>Number of items to purchase (between 1 and GetMerchantItemMaxStack(index)) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BuyTrainerService" Priority="0" ImageType="Method">
    <Signature>BuyTrainerService(index)</Signature>
    <Description>Purchases an ability or recipe available from a trainer</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BuybackItem" Priority="0" ImageType="Method">
    <Signature>BuybackItem(index)</Signature>
    <Description>Repurchases an item recently sold to a vendor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="C_BlackMarket.Close" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_BlackMarket.GetHotItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_BlackMarket.GetItemInfoByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_BlackMarket.GetItemInfoByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_BlackMarket.GetNumItems" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_BlackMarket.ItemPlaceBid" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_BlackMarket.RequestItems" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.CanMasterLoot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.GetExpiration" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.GetItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.GetNumItems" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.GetPlayerInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.GiveMasterLoot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LootHistory.SetExpiration" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LossOfControl.GetEventInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_LossOfControl.GetNumEvents" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.AcceptPVPDuel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.AcceptQueuedPVPMatch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.CanActivePetSwapOut" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.CanPetSwapIn" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.CancelPVPDuel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.ChangePet" Priority="0" ImageType="Method">
    <Signature>C_PetBattles.ChangePet(id)</Signature>
    <Description>Attempts to change your active pet. Has no effect if used when this switch isn't impossible (out of turn, with the ID of a dead pet, etc.).</Description>
    <ArgumentList Name="id">
      <Description>The pet's ID (1-3) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="C_PetBattles.DeclineQueuedPVPMatch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.ForfeitGame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAbilityEffectInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAbilityInfo" Priority="0" ImageType="Method">
    <Signature>id, name, icon, maxcooldown, desc, numTurns, abilityPetType, nostrongweak = C_PetBattles.GetAbilityInfo(owner, slotnumber, spellIndex)</Signature>
    <Description>Returns information on a battle pet's ability</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number)
1 - The player
2 - The opponent</Description>
    </ArgumentList>
    <ArgumentList Name="slotnumber">
      <Description>The pet slot number (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellIndex">
      <Description>The ability slot number (number) </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>The ID number of the ability (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the ability (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>The icon of the ability (string) </Description>
    </ReturnList>
    <ReturnList Name="maxcooldown">
      <Description>The max cooldown of the ability (number) </Description>
    </ReturnList>
    <ReturnList Name="desc">
      <Description>The description of the ability (string) </Description>
    </ReturnList>
    <ReturnList Name="numTurns">
      <Description>The number of turns it takes (number) </Description>
    </ReturnList>
    <ReturnList Name="abilityPetType">
      <Description>The family the ability belongs to (number) </Description>
    </ReturnList>
    <ReturnList Name="nostrongweak">
      <Description>Whether the ability has a strong/weak against (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAbilityInfoByID" Priority="0" ImageType="Method">
    <Signature>name, icon, petType, nostrongweakhint = C_PetBattles.GetAbilityInfoByID(id)</Signature>
    <Description>Returns information about a pet battle ability based on the ID.</Description>
    <ArgumentList Name="id">
      <Description>The ID number of a pet battle ability (number) </Description>
    </ArgumentList>
    <ReturnList Name="nil">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
    <ReturnList />
    <ReturnList />
    <ReturnList />
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="C_PetBattles.GetAbilityProcTurnIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAbilityState" Priority="0" ImageType="Method">
    <Signature>isUsable, currentCooldown = C_PetBattles.GetAbilityState(owner, slotnumber, spellIndex)</Signature>
    <Description>Returns the cooldown state of a pet ability</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number)
1 - The player
2 - The opponent</Description>
    </ArgumentList>
    <ArgumentList Name="slotnumber">
      <Description>The pet slot number (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellIndex">
      <Description>The ability slot number (number) </Description>
    </ArgumentList>
    <ReturnList Name="isUsable">
      <Description>Whether the ability can be used or not. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="currentCooldown">
      <Description>How much time is left on the cooldown, if any (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAbilityStateModification" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetActivePet" Priority="0" ImageType="Method">
    <Signature>index = C_PetBattles.GetActivePet(owner)</Signature>
    <Description>Returns the index of the currently active pet.</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number)
1 - The player
2 - The opponent</Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>The index of the pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAllEffectNames" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAllStates" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAttackModifier" Priority="0" ImageType="Method">
    <Signature>C_PetBattles.GetAttackModifier(YourType, EnemyType)</Signature>
    <Description>Returns the modification to attacks based on types.</Description>
    <ArgumentList Name="YourType">
      <Description>The family of the attacking pet (number?) </Description>
    </ArgumentList>
    <ArgumentList Name="EnemyType">
      <Description>The family of the defending pet (number?) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetAuraInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetBattleState" Priority="0" ImageType="Method">
    <Signature>battleState = C_PetBattles.GetBattleState()</Signature>
    <Description>Returns the current battle state.</Description>
    <ReturnList Name="battleState">
      <Description>The current state of the pet battle: (number)
2 - Battle is beginning
3 - Battle is in progress
4 - Waiting for a pet switch
7 - Battle is ending</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetBreedQuality" Priority="0" ImageType="Method">
    <Signature>quality = C_PetBattles.GetBreedQuality(petOwner, petIndex)</Signature>
    <Description>Returns the breed quality of a pet.</Description>
    <ArgumentList Name="petOwner">
      <Description>1: Current player, 2: Opponent (number) </Description>
    </ArgumentList>
    <ArgumentList Name="petIndex">
      <Description>The index of the pet (number) </Description>
    </ArgumentList>
    <ReturnList Name="quality">
      <Description>1: 'Poor', 2: 'Common', 3: 'Uncommon', 4: 'Rare', 5: 'Epic', 6: 'Legendary' (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetDisplayID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetHealth" Priority="0" ImageType="Method">
    <Signature>health = C_PetBattles.GetHealth(petOwner, petIndex)</Signature>
    <Description>Returns the maximum health of a specific pet in the current pet battle.</Description>
    <ArgumentList Name="petOwner">
      <Description>1: Current player, 2: Opponent (number) </Description>
    </ArgumentList>
    <ArgumentList Name="petIndex">
      <Description>Accepted values are 1-3, but the order is based off of the initial order. (number) </Description>
    </ArgumentList>
    <ReturnList Name="health">
      <Description>The current health of the pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetIcon" Priority="0" ImageType="Method">
    <Signature>icon = C_PetBattles.GetIcon(owner, index)</Signature>
    <Description>Returns the path of a pet's icon texture.</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number)
1 - The player
2 - The opponent</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>The index of the pet (1-3) (number) </Description>
    </ArgumentList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the aura (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetLevel" Priority="0" ImageType="Method">
    <Signature>level = C_PetBattles.GetLevel(petOwner, petIndex)</Signature>
    <Description>Returns the level of a pet</Description>
    <ArgumentList Name="petOwner">
      <Description>1: Current player, 2: Opponent (number) </Description>
    </ArgumentList>
    <ArgumentList Name="petIndex">
      <Description>Accepted values are 1-3, but the order is based off of the initial order. (number) </Description>
    </ArgumentList>
    <ReturnList Name="level">
      <Description>The level of the pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetMaxHealth" Priority="0" ImageType="Method">
    <Signature>maxHealth = C_PetBattles.GetMaxHealth(petOwner, petIndex)</Signature>
    <Description>Returns the maximum health of a specific pet in the current pet battle.</Description>
    <ArgumentList Name="petOwner">
      <Description>1: Current player, 2: Opponent (number) </Description>
    </ArgumentList>
    <ArgumentList Name="petIndex">
      <Description>Accepted values are 1-3, but the order is based off of the initial order. (number) </Description>
    </ArgumentList>
    <ReturnList Name="maxHealth">
      <Description>Maximum health amount of the pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetName" Priority="0" ImageType="Method">
    <Signature>name, default = C_PetBattles.GetName(owner, index)</Signature>
    <Description>Returns the name of a pet</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number?) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="C_PetBattles.GetNumAuras" Priority="0" ImageType="Method">
    <Signature>auras = C_PetBattles.GetNumAuras(owner, index)</Signature>
    <Description>Returns the number of auras on a pet</Description>
    <ArgumentList Name="owner">
      <Description>The identifier of the owner of the pet (string?) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>The index of the pet to check (maybe the team slot number) (number) </Description>
    </ArgumentList>
    <ReturnList Name="auras">
      <Description>The number of auras on pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetNumPets" Priority="0" ImageType="Method">
    <Signature>amount = C_PetBattles.GetNumPets(owner)</Signature>
    <Description>Returns the number of pets a player/enemy has.</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number)
1 - The player
2 - The opponent</Description>
    </ArgumentList>
    <ReturnList Name="amount">
      <Description>The number of pets the unit has (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetPVPMatchmakingInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetPetSpeciesID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetPetType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetPlayerTrapAbility" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetPower" Priority="0" ImageType="Method">
    <Signature>C_PetBattles.GetPower(owner, index)</Signature>
    <Description>Returns the power of a pet.</Description>
    <ArgumentList Name="owner">
      <Description>The number used in the battle to identify the owner of the pet. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>The index number of the pet. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetSelectedAction" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetSpeed" Priority="0" ImageType="Method">
    <Signature>speed = C_PetBattles.GetSpeed(owner, index)</Signature>
    <Description>Returns the speed of a pet.</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (number)
1 - The player
2 - The opponent</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>The index of the pet (number) </Description>
    </ArgumentList>
    <ReturnList Name="speed">
      <Description>The speed of the pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetStateValue" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.GetTurnTimeInfo" Priority="0" ImageType="Method">
    <Signature>timeRemaining, totalTime = C_PetBattles.GetTurnTimeInfo()</Signature>
    <Description>Returns the remaining time and max time for waiting on a turn</Description>
    <ReturnList Name="timeRemaining">
      <Description>The amount of time left (number) </Description>
    </ReturnList>
    <ReturnList Name="totalTime">
      <Description>The total amount of time (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.GetXP" Priority="0" ImageType="Method">
    <Signature>xp, maxXP = C_PetBattles.GetXP(owner, index)</Signature>
    <Description>Returns the current and maximum experience of a pet</Description>
    <ArgumentList Name="owner">
      <Description>The owner of the pet (string?) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>The index of the pet to check (number) </Description>
    </ArgumentList>
    <ReturnList Name="xp">
      <Description>The current amount of experience the pet has (number) </Description>
    </ReturnList>
    <ReturnList Name="maxXP">
      <Description>The amount of experience needed to reach the next level (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.IsInBattle" Priority="0" ImageType="Method">
    <Signature>C_PetBattles.IsInBattle()</Signature>
    <Description>Returns true during a pet battle</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.IsPlayerNPC" Priority="0" ImageType="Method">
    <Signature>isnpc = C_PetBattles.IsPlayerNPC(player)</Signature>
    <Description>Returns whether a participant in a pet battle is a player or an NPC</Description>
    <ArgumentList Name="player">
      <Description>The value used to identify one of the participants in a pet battle (string?) </Description>
    </ArgumentList>
    <ReturnList Name="isnpc">
      <Description>True is the participant is an NPC, false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.IsSkipAvailable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.IsTrapAvailable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.IsWaitingOnOpponent" Priority="0" ImageType="Method">
    <Signature>waiting = C_PetBattles.IsWaitingOnOpponent()</Signature>
    <Description>Returns whether or not you are waiting on the opponent</Description>
    <ReturnList Name="waiting">
      <Description>Whether or not you are waiting on the opponent. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.IsWildBattle" Priority="0" ImageType="Method">
    <Signature>isWild = C_PetBattles.IsWildBattle()</Signature>
    <Description>Returns whether or not in wild battle.. Returns true if the pet battle is against a wild pet.</Description>
    <ReturnList Name="isWild">
      <Description>Whether the battle is against a wild pet or not. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetBattles.SetPendingReportBattlePetTarget" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.SetPendingReportTargetFromUnit" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.ShouldShowPetSelect" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.SkipTurn" Priority="0" ImageType="Method">
    <Signature>C_PetBattles.SkipTurn()</Signature>
    <Description>Does a pass on your turn for a round.</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.StartPVPDuel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.StartPVPMatchmaking" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.StopPVPMatchmaking" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.UseAbility" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetBattles.UseTrap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.AddAllPetSourcesFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.AddAllPetTypesFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.CagePetByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.ClearAllPetSourcesFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.ClearAllPetTypesFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.ClearSearchFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.FindPetIDByName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetBattlePetLink" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetNumCollectedInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetNumPetSources" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetNumPetTypes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetNumPets" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetOwnedBattlePetString" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetAbilityInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetAbilityList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetInfoByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetInfoByPetID" Priority="0" ImageType="Method">
    <Signature>speciesID, customName, level, xp, maxXp, displayID, isFavorite, petName, petIcon, petType, creatureID, sourceText, description, isWild, canBattle, tradable, unique = C_PetJournal.GetPetInfoByPetID("petID")</Signature>
    <Description>Retreives information about a battle pet from its GUID</Description>
    <ArgumentList Name="petID">
      <Description>Pet ID (string, guid) </Description>
    </ArgumentList>
    <ReturnList Name="speciesID">
      <Description>Species ID (number) </Description>
    </ReturnList>
    <ReturnList Name="customName">
      <Description>Name which the player has given the squirrel via rename (string)
name - Name which the player gave the pet
nil - The player did not name the pet</Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Level of the battle pet (number) </Description>
    </ReturnList>
    <ReturnList Name="xp">
      <Description>Amount of experience points the battle pet has (number) </Description>
    </ReturnList>
    <ReturnList Name="maxXp">
      <Description>Maximum experience points the battle pet has (until level up?) (number) </Description>
    </ReturnList>
    <ReturnList Name="displayID">
      <Description>? (number) </Description>
    </ReturnList>
    <ReturnList Name="isFavorite">
      <Description>Is the pet set as a favourite in the pet journal? (boolean) </Description>
    </ReturnList>
    <ReturnList Name="petName">
      <Description>Generic name for the pet (ie. the name its mother gave it, not the one the player gave it) (string)
Lil' KT - The Lil' KT pet
Squirrel - Your average garden variety squirrel</Description>
    </ReturnList>
    <ReturnList Name="petIcon">
      <Description>The path to the texture which should be used for display of this pet (e.g. on action buttons) (string) </Description>
    </ReturnList>
    <ReturnList Name="petType">
      <Description>The ID of the battle pet family. (number)
1 - Humanoid
2 - Dragonkin
3 - Flying
4 - Undead
5 - Critter
6 - Magic
7 - Elemental
8 - Beast
9 - Aquatic
10 - Mechanical</Description>
    </ReturnList>
    <ReturnList Name="creatureID">
      <Description>NPC Creature ID for the pet (number) </Description>
    </ReturnList>
    <ReturnList Name="sourceText">
      <Description>Text describing where the pet may be obtained for use in the tooltip. (string)
example - |cFFFFD200Pet Battle: |rAmmen Vale</Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Description for use in the tooltip. (string) </Description>
    </ReturnList>
    <ReturnList Name="isWild">
      <Description>Is this pet obtained/obtainable in the wild? (boolean) </Description>
    </ReturnList>
    <ReturnList Name="canBattle">
      <Description>Can this pet participate in pet battles? (boolean) </Description>
    </ReturnList>
    <ReturnList Name="tradable">
      <Description>Can this pet be caged and traded? (boolean) </Description>
    </ReturnList>
    <ReturnList Name="unique">
      <Description>Is the pet unique? The player may only have one of a unique pet. Examples are pets obtained from the battle.net store (e.g. Cinder Kitten) and pets obtained through achievements (e.g. Brilliant Kaliri) (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetInfoBySpeciesID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetLoadOutInfo" Priority="0" ImageType="Method">
    <Signature>petID, petSpellID_slot1, petSpellID_slot2, petSpellID_slot3, locked = C_PetJournal.GetPetLoadOutInfo(slotIndex)</Signature>
    <Description>Returns pet and spell IDs</Description>
    <ArgumentList Name="slotIndex">
      <Description>Pet slot index (1-3) (number) </Description>
    </ArgumentList>
    <ReturnList Name="petID">
      <Description>Pet ID (string, guid) </Description>
    </ReturnList>
    <ReturnList Name="petSpellID_slot1">
      <Description>Ability ID of the first ability (level 1/10) (number) </Description>
    </ReturnList>
    <ReturnList Name="petSpellID_slot2">
      <Description>Ability ID of the second ability (level 2/15) (number) </Description>
    </ReturnList>
    <ReturnList Name="petSpellID_slot3">
      <Description>Ability ID of the third ability (level 4/20) (number) </Description>
    </ReturnList>
    <ReturnList Name="locked">
      <Description>false if the player can place a battle pet in this slot, true otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetSortParameter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetPetTeamAverageLevel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.GetSummonedPetGUID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.IsFindBattleEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.IsFlagFiltered" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.IsJournalReadOnly" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.IsJournalUnlocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.IsPetSourceFiltered" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.IsPetTypeFiltered" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetCanBeReleased" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsCapturable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsFavorite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsHurt" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsLockedForConvert" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsRevoked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsSlotted" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsSummonable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PetIsTradable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.PickupPet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.ReleasePetByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetAbility" Priority="0" ImageType="Method">
    <Signature>C_PetJournal.SetAbility(slotIndex, spellIndex, petSpellID)</Signature>
    <Description>Set battle pet ability</Description>
    <ArgumentList Name="slotIndex">
      <Description>Pet slot index (1-3) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellIndex">
      <Description>Pet ability slot index (1-3) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="petSpellID">
      <Description>Pet ability ID (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="C_PetJournal.SetCustomName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetFavorite" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetFlagFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetPetLoadOutInfo" Priority="0" ImageType="Method">
    <Signature>C_PetJournal.SetPetLoadOutInfo(slotIndex, "petID")</Signature>
    <Description>Setup battle pet team</Description>
    <ArgumentList Name="slotIndex">
      <Description>Pet slot index (1-3) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="petID">
      <Description>Pet ID (string, guid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="C_PetJournal.SetPetSortParameter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetPetSourceFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetPetTypeFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SetSearchFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SummonPetByGUID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_PetJournal.SummonRandomPet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_Scenario.GetCriteriaInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_Scenario.GetInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_Scenario.GetScenarioIconInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_Scenario.GetStepInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_Scenario.IsChallengeMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="C_Scenario.IsInScenario" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalculateAuctionDeposit" Priority="0" ImageType="Method">
    <Signature>deposit = CalculateAuctionDeposit(runTime)</Signature>
    <Description>Returns the deposit amount for the item currently being set up for auction. Only returns useful information once an item has been placed in the Create Auction UI's "auction item" slot (see ClickAuctionSellItemButton()).
Deposit amount for an auction varies based on the item being auction, the auction's proposed run time, and the auction house being used (i.e. faction or neutral).</Description>
    <ArgumentList Name="runTime">
      <Description>Run time of the proposed auction (number)
720 - 12 hours
1440 - 24 hours
2880 - 48 hours</Description>
    </ArgumentList>
    <ReturnList Name="deposit">
      <Description>Amount of the deposit (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarAddEvent" Priority="0" ImageType="Method">
    <Signature>CalendarAddEvent()</Signature>
    <Description>Saves the event recently created (and selected for editing) to the calendar. Until this function is called, an event created with CalendarNewEvent(), CalendarNewGuildEvent(), or CalendarNewGuildAnnouncement() will not exist on the calendar -- that is, guild members or invitees will not see it, and it will not persist if the player closes the calendar, reloads the UI, or goes to view or edit another event.</Description>
  </WowApi>
  <WowApi Name="CalendarCanAddEvent" Priority="0" ImageType="Method">
    <Signature>canAdd = CalendarCanAddEvent()</Signature>
    <Description>Returns whether the player can add an event to the calendar</Description>
    <ReturnList Name="canAdd">
      <Description>True if the player can add an event to the calendar; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarCanSendInvite" Priority="0" ImageType="Method">
    <Signature>canInvite = CalendarCanSendInvite()</Signature>
    <Description>Returns whether the player can invite others to a calendar event</Description>
    <ReturnList Name="canInvite">
      <Description>True if the player can invite others to a calendar event; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarCloseEvent" Priority="0" ImageType="Method">
    <Signature>CalendarCloseEvent()</Signature>
    <Description>Deselects (ends viewing/editing on) an event. After calling this function, results of attempting to query or change event information are not guaranteed until a new event is created or another existing event is opened.</Description>
  </WowApi>
  <WowApi Name="CalendarContextDeselectEvent" Priority="0" ImageType="Method">
    <Signature>CalendarContextDeselectEvent()</Signature>
    <Description>Clears the event selection used only for CalendarContext functions. The selection state cleared by this function is used only by other CalendarContext functions; other calendar event functions use the selection state set by CalendarOpenEvent, CalendarNewEvent, CalendarNewGuildEvent, or CalendarNewGuildAnnouncement (if they use a selection state at all).</Description>
  </WowApi>
  <WowApi Name="CalendarContextEventCanComplain" Priority="0" ImageType="Method">
    <Signature>canReport = CalendarContextEventCanComplain([monthOffset,] day, index)</Signature>
    <Description>Returns whether the player can report an event invitation as spam. If all arguments are omitted, uses the event selected by CalendarContextSelectEvent.</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canReport">
      <Description>true if the player can report the event as spam; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextEventCanEdit" Priority="0" ImageType="Method">
    <Signature>canEdit = CalendarContextEventCanEdit([monthOffset,] day, index)</Signature>
    <Description>Returns whether the player can edit an event</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canEdit">
      <Description>True if the player can edit the event (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextEventCanRemove" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarContextEventClipboard" Priority="0" ImageType="Method">
    <Signature>canPaste = CalendarContextEventClipboard()</Signature>
    <Description>Returns whether the player can paste an event</Description>
    <ReturnList Name="canPaste">
      <Description>true if an event has been copied via CalendarContextEventCopy; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextEventComplain" Priority="0" ImageType="Method">
    <Signature>CalendarContextEventComplain([monthOffset,] day, index)</Signature>
    <Description>Reports an event invitation as spam</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextEventCopy" Priority="0" ImageType="Method">
    <Signature>CalendarContextEventCopy([monthOffset,] day, index)</Signature>
    <Description>Copies an event for later pasting</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextEventGetCalendarType" Priority="0" ImageType="Method">
    <Signature>calendarType = CalendarContextEventGetCalendarType([monthOffset,] day, index)</Signature>
    <Description>Returns the type of a calendar event. If all arguments are omitted, uses the event selected by CalendarContextSelectEvent.</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="calendarType">
      <Description>Token identifying the type of event (string)
GUILD_ANNOUNCEMENT - Guild announcement (does not allow players to sign up)
GUILD_EVENT - Guild event (allows players to sign up)
HOLIDAY - World event (e.g. Lunar Festival, Darkmoon Faire, Stranglethorn Fishing Tournament, Call to Arms: Arathi Basin)
PLAYER - Player-created event or invitation
RAID_LOCKOUT - Indicates when one of the player's saved instances resets
RAID_RESET - Indicates scheduled reset times for major raid instances
SYSTEM - Other server-provided event</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextEventPaste" Priority="0" ImageType="Method">
    <Signature>CalendarContextEventPaste(monthOffset, day)</Signature>
    <Description>Pastes a copied event into a given date. Does nothing if no event has been copied via CalendarContextEventCopy.</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month</Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextEventRemove" Priority="0" ImageType="Method">
    <Signature>CalendarContextEventRemove([monthOffset,] day, index)</Signature>
    <Description>Deletes an event from the calendar</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextEventSignUp" Priority="0" ImageType="Method">
    <Signature>CalendarContextEventSignUp([monthOffset,] day, index)</Signature>
    <Description>Signs the player up for a guild event</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="CalendarContextGetEventIndex" Priority="0" ImageType="Method">
    <Signature>monthOffset, day, index = CalendarContextGetEventIndex()</Signature>
    <Description>Returns the month, day, and index of the event selection used only for CalendarContext functions. The selection state referenced by this function is used only by other CalendarContext functions; other calendar event functions use the selection state set by CalendarOpenEvent, CalendarNewEvent, CalendarNewGuildEvent, or CalendarNewGuildAnnouncement (if they use a selection state at all).
Used in the default UI to implement the calendar's context menu (on right-click).</Description>
    <ReturnList Name="monthOffset">
      <Description>Month relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month</Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="index">
      <Description>Index of the event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextInviteAvailable" Priority="0" ImageType="Method">
    <Signature>CalendarContextInviteAvailable([monthOffset,] day, index)</Signature>
    <Description>Accepts an event invitation</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextInviteDecline" Priority="0" ImageType="Method">
    <Signature>CalendarContextInviteDecline([monthOffset,] day, index)</Signature>
    <Description>Declines an event invitation</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextInviteIsPending" Priority="0" ImageType="Method">
    <Signature>pendingInvite = CalendarContextInviteIsPending([monthOffset,] day, index)</Signature>
    <Description>Returns whether the player has been invited to an event and not yet responded</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="pendingInvite">
      <Description>True if the player is invited to the event and has yet to respond; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextInviteModeratorStatus" Priority="0" ImageType="Method">
    <Signature>modStatus = CalendarContextInviteModeratorStatus([monthOffset,] day, index)</Signature>
    <Description>Returns the player's moderator status for an event</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="modStatus">
      <Description>The player's level of authority for the event, or "" if not applicable (number)
CREATOR - The player is the original creator of the event
MODERATOR - The player has been granted moderator status for the event</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextInviteRemove" Priority="0" ImageType="Method">
    <Signature>CalendarContextInviteRemove([monthOffset,] day, index)</Signature>
    <Description>Removes an invitation from the player's calendar or removes the player from a guild event's signup list</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarContextInviteStatus" Priority="0" ImageType="Method">
    <Signature>inviteStatus = CalendarContextInviteStatus([monthOffset,] day, index)</Signature>
    <Description>Returns the player's invite status for an event</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="inviteStatus">
      <Description>The player's status regarding the event (number)
1 - Invited (also used for non-invitation/non-signup events)
2 - Accepted
3 - Declined
4 - Confirmed
5 - Out
6 - Standby
7 - Signed up
8 - Not signed up</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextInviteTentative" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarContextInviteType" Priority="0" ImageType="Method">
    <Signature>inviteType = CalendarContextInviteType([monthOffset,] day, index)</Signature>
    <Description>Returns the invite type for an event</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="inviteType">
      <Description>Invitation/announcement type for the event (number)
1 - Characters can only be explicitly invited to the event (or event is a non-invite/non-signup event)
2 - Event is visible to the player's entire guild; guild members can sign up and other characters can be explicitly invited</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarContextSelectEvent" Priority="0" ImageType="Method">
    <Signature>CalendarContextSelectEvent([monthOffset,] day, index)</Signature>
    <Description>Selects an event for use only with other CalendarContext functions. The selection state set by this function is used only by other CalendarContext functions; other calendar event functions use the selection state set by CalendarOpenEvent, CalendarNewEvent, CalendarNewGuildEvent, or CalendarNewGuildAnnouncement (if they use a selection state at all).
Used in the default UI to implement the calendar's context menu (on right-click).</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month
nil - Use the event selected by CalendarContextSelectEvent and ignore further arguments </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarDefaultGuildFilter" Priority="0" ImageType="Method">
    <Signature>minLevel, maxLevel, rank = CalendarDefaultGuildFilter()</Signature>
    <Description>Returns default options for the guild member Mass Invite filter </Description>
    <ReturnList Name="minLevel">
      <Description>Lowest level of characters to invite (number) </Description>
    </ReturnList>
    <ReturnList Name="maxLevel">
      <Description>Highest level of characters to invite (number) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Lowest guild rank of characters to invite (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventAvailable" Priority="0" ImageType="Method">
    <Signature>CalendarEventAvailable()</Signature>
    <Description>Accepts invitation to the selected calendar event. Only applies to player-created events and invitations sent by other players; has no effect if the current calendar event is of another type.</Description>
  </WowApi>
  <WowApi Name="CalendarEventCanEdit" Priority="0" ImageType="Method">
    <Signature>canEdit = CalendarEventCanEdit()</Signature>
    <Description>Returns whether the player can edit the selected calendar event</Description>
    <ReturnList Name="canEdit">
      <Description>True if the player can edit the current event; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventCanModerate" Priority="0" ImageType="Method">
    <Signature>canModerate = CalendarEventCanModerate(index)</Signature>
    <Description>Returns whether an event invitee can be granted moderator authority</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canModerate">
      <Description>True if the given character can be given moderator authority for the event; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventClearAutoApprove" Priority="0" ImageType="Method">
    <Signature>CalendarEventClearAutoApprove()</Signature>
    <Description>Disables the auto-approve feature (currently unused) for the selected calendar event</Description>
  </WowApi>
  <WowApi Name="CalendarEventClearLocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarEventClearModerator" Priority="0" ImageType="Method">
    <Signature>CalendarEventClearModerator(index)</Signature>
    <Description>Removes moderator status from a character on the selected event's invite/signup list. Moderators can change the status of characters on the invite/signup list and invite more characters, but cannot otherwise edit the event.</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventDecline" Priority="0" ImageType="Method">
    <Signature>CalendarEventDecline()</Signature>
    <Description>Declines invitation to the selected calendar event. Only applies to player-created events and invitations sent by other players; has no effect if the current calendar event is of another type.</Description>
  </WowApi>
  <WowApi Name="CalendarEventGetCalendarType" Priority="0" ImageType="Method">
    <Signature>calendarType = CalendarEventGetCalendarType()</Signature>
    <Description>Returns the type of the selected calendar event</Description>
    <ReturnList Name="calendarType">
      <Description>Token identifying the type of event (string)
GUILD_ANNOUNCEMENT - Guild announcement (does not allow players to sign up)
GUILD_EVENT - Guild event (allows players to sign up)
PLAYER - Player-created event or invitation</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetInvite" Priority="0" ImageType="Method">
    <Signature>name, level, className, classFileName, inviteStatus, modStatus, inviteIsMine, inviteType = CalendarEventGetInvite(index)</Signature>
    <Description>Returns information about an entry in the selected event's invite/signup list</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the character (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>The character's current level (number) </Description>
    </ReturnList>
    <ReturnList Name="className">
      <Description>Localized name of the character's class (string) </Description>
    </ReturnList>
    <ReturnList Name="classFileName">
      <Description>Non-localized token representing the character's class (string) </Description>
    </ReturnList>
    <ReturnList Name="inviteStatus">
      <Description>The character's status regarding the event (number)
1 - Invited
2 - Accepted
3 - Declined
4 - Confirmed
5 - Out
6 - Standby
7 - Signed up</Description>
    </ReturnList>
    <ReturnList Name="modStatus">
      <Description>The character's level of authority for the event, or "" if not applicable (number)
CREATOR - The character is the original creator of the event
MODERATOR - The character has been granted moderator status for the event</Description>
    </ReturnList>
    <ReturnList Name="inviteIsMine">
      <Description>True if this list entry represents the player; otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="inviteType">
      <Description>Invitation/announcement type for the event (number)
1 - Characters can only be explicitly invited to the event
2 - Event is visible to the player's entire guild; guild members can sign up and other characters can be explicitly invited</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetInviteResponseTime" Priority="0" ImageType="Method">
    <Signature>weekday, month, day, year, hour, minute = CalendarEventGetInviteResponseTime(index)</Signature>
    <Description>Returns the time at which a character on the selected event's invite/signup list responded. Returns all zeros if the character has not yet responded or is the event's creator.</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week (starting at 1 = Sunday) (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>Hour part of the time (on a 24-hour clock) (number) </Description>
    </ReturnList>
    <ReturnList Name="minute">
      <Description>Minute part of the time (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetInviteSortCriterion" Priority="0" ImageType="Method">
    <Signature>criterion, reverse = CalendarEventGetInviteSortCriterion()</Signature>
    <Description>Returns the current sort mode for the event invite/signup list</Description>
    <ReturnList Name="criterion">
      <Description>Token identifying the attribute used for sorting the list (string)
class - Sorted by character class (according to the global table CLASS_SORT_ORDER)
name - Sorted by character name
status - Sorted by invite status</Description>
    </ReturnList>
    <ReturnList Name="reverse">
      <Description>True if the list is sorted in reverse order; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetNumInvites" Priority="0" ImageType="Method">
    <Signature>numInvites = CalendarEventGetNumInvites()</Signature>
    <Description>Returns the number of characters on the selected calendar event's invite/signup list</Description>
    <ReturnList Name="numInvites">
      <Description>Number of characters on the event's invite/signup list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetRepeatOptions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarEventGetSelectedInvite" Priority="0" ImageType="Method">
    <Signature>index = CalendarEventGetSelectedInvite()</Signature>
    <Description>Returns the index of the selected entry on the selected event's invite/signup list. In the current default UI, selection behavior in the invite list is implemented but disabled; selecting an invite list entry has no effect on the behavior of other APIs.</Description>
    <ReturnList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()), or 0 if no selection has been made (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetStatusOptions" Priority="0" ImageType="Method">
    <Signature>... = CalendarEventGetStatusOptions()</Signature>
    <Description>Returns a list of localized invite status labels</Description>
    <ReturnList Name="...">
      <Description>List of localized invite status labels (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetTextures" Priority="0" ImageType="Method">
    <Signature>name, icon, expansion = CalendarEventGetTextures(eventType)</Signature>
    <Description>Returns a list of instance names and icons for dungeon or raid events</Description>
    <ArgumentList Name="eventType">
      <Description>Type (display style) of event to query (number)
1 - Raid dungeon
2 - Five-player dungeon</Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of an instance (may include heroic designation) (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Unique part of the path to the instance's icon texture; for the full path, prepend with "Interface\LFGFrame\LFGIcon-" (string) </Description>
    </ReturnList>
    <ReturnList Name="expansion">
      <Description>Expansion to which the instance belongs; localized names can be found in the constants EXPANSION_NAME0, EXPANSION_NAME1, etc. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetTypes" Priority="0" ImageType="Method">
    <Signature>... = CalendarEventGetTypes()</Signature>
    <Description>Returns a list of event display style labels</Description>
    <ReturnList Name="...">
      <Description>A list of localized event display style labels (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventGetTypesDisplayOrdered" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarEventHasPendingInvite" Priority="0" ImageType="Method">
    <Signature>pendingInvite = CalendarEventHasPendingInvite()</Signature>
    <Description>Returns whether the player has been invited to the selected event and not yet responded</Description>
    <ReturnList Name="pendingInvite">
      <Description>True if the player has been invited to the event and not yet responded; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventHaveSettingsChanged" Priority="0" ImageType="Method">
    <Signature>settingsChanged = CalendarEventHaveSettingsChanged()</Signature>
    <Description>Returns whether the selected event has unsaved changes</Description>
    <ReturnList Name="settingsChanged">
      <Description>True if any of the event's attributes have been changed since the event was last saved; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventInvite" Priority="0" ImageType="Method">
    <Signature>CalendarEventInvite("name")</Signature>
    <Description>Attempts to invite a character to the selected event. If successful, the CALENDAR_UPDATE_INVITE_LIST event fires indicating the character has been added to the invite list; otherwise the CALENDAR_UPDATE_ERROR event fires containing a localized error message.</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to invite (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventIsModerator" Priority="0" ImageType="Method">
    <Signature>isModerator = CalendarEventIsModerator()</Signature>
    <Description>Returns whether the player has moderator status for the selected calendar event. Also returns true if the player is the event's creator.</Description>
    <ReturnList Name="isModerator">
      <Description>True if the player has moderator status for the event; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarEventRemoveInvite" Priority="0" ImageType="Method">
    <Signature>CalendarEventRemoveInvite(index)</Signature>
    <Description>Removes a character from the selected event's invite/signup list. Cannot be used to remove the event's creator (fires a CALENDAR_UPDATE_ERROR event with nil error message if such is attempted).</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSelectInvite" Priority="0" ImageType="Method">
    <Signature>CalendarEventSelectInvite(index)</Signature>
    <Description>Selects an entry in the selected event's invite/signup list. In the current default UI, selection behavior in the invite list is implemented but disabled; selecting an invite list entry has no effect on the behavior of other APIs.</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetAutoApprove" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetAutoApprove()</Signature>
    <Description>Enables the auto-approve feature (currently unused) for the selected calendar event</Description>
  </WowApi>
  <WowApi Name="CalendarEventSetDate" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetDate(month, day, year)</Signature>
    <Description>Changes the scheduled date of the selected calendar event</Description>
    <ArgumentList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month (number) </Description>
    </ArgumentList>
    <ArgumentList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetDescription" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetDescription("description")</Signature>
    <Description>Changes the descriptive text for the selected event</Description>
    <ArgumentList Name="description">
      <Description>Descriptive text to be displayed for the event (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetLocked" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetLocked()</Signature>
    <Description>Locks the selected calendar event. Locked events do not allow invitees to respond or guild members to sign up, but can still be edited.</Description>
  </WowApi>
  <WowApi Name="CalendarEventSetLockoutDate" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetLockoutDate(month, day, year)</Signature>
    <Description>Changes the lockout date associated with the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the lockout date has been changed will revert it to its default of 1, 1, 1, 2000 (January 1, 2000).</Description>
    <ArgumentList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="CalendarEventSetLockoutTime" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetLockoutTime(hour, minute)</Signature>
    <Description>Changes the lockout time associated with the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the lockout time has been changed will revert it to its default of 0, 0 (midnight).</Description>
    <ArgumentList Name="hour">
      <Description>Hour part of the time (on a 24-hour clock) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="minute">
      <Description>Minute part of the time (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetModerator" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetModerator(index)</Signature>
    <Description>Grants moderator status to a character on the selected event's invite/signup list. Moderators can change the status of characters on the invite/signup list and invite more characters, but cannot otherwise edit the event.</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetRepeatOption" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetRepeatOption(title)</Signature>
    <Description>Changes the repetition option for the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the repeat option has been changed will revert it to its default of 1 (Never).</Description>
    <ArgumentList Name="title">
      <Description>Index of a repeating event option; see CalendarEventGetRepeatOptions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetSize" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetSize(size)</Signature>
    <Description>Changes the maximum number of invites/signups for the selected event (currently unused). This feature is not enabled in the current version of World of Warcraft; saving an event in which the max size has been changed will revert it to its default of 100.</Description>
    <ArgumentList Name="size">
      <Description>Maximum number of invites/signups for the event (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetStatus" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetStatus(index, inviteStatus)</Signature>
    <Description>Sets the status of a character on the selected event's invite/signup list</Description>
    <ArgumentList Name="index">
      <Description>Index of a character on the event's invite list (between 1 and CalendarEventGetNumInvites()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="inviteStatus">
      <Description>The player's status regarding the event (number)
1 - Invited (also used for non-invitation/non-signup events)
2 - Accepted
3 - Declined
4 - Confirmed
5 - Out
6 - Standby
7 - Signed up
8 - Not signed up (displays as "")</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetTextureID" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetTextureID(index)</Signature>
    <Description>Changes the raid or dungeon instance for the selected event. Only applicable if the event's eventType is set to 1 or 2 (see CalendarEventSetType).
A list of dungeon or raid instances can be found by calling CalendarEventGetTextures with the current eventType. That function returns three values (name, icon, and expansion) for each instance in the list; e.g. to get the index for use with this function, find the index of the instance's name in that list and divide by 3.</Description>
    <ArgumentList Name="index">
      <Description>Index of a dungeon or raid instance (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetTime" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetTime(hour, minute)</Signature>
    <Description>Changes the scheduled time of the selected event</Description>
    <ArgumentList Name="hour">
      <Description>Hour part of the time (on a 24-hour clock) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="minute">
      <Description>Minute part of the time (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetTitle" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetTitle("title")</Signature>
    <Description>Changes the title for the selected event</Description>
    <ArgumentList Name="title">
      <Description>A title to be displayed for the event (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSetType" Priority="0" ImageType="Method">
    <Signature>CalendarEventSetType(eventType)</Signature>
    <Description>Changes the display type of the selected event</Description>
    <ArgumentList Name="eventType">
      <Description>Display type for the event; used in the default UI to determine which icon to show (number)
1 - Raid dungeon
2 - Five-player dungeon
3 - PvP event
4 - Meeting
5 - Other event</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventSignUp" Priority="0" ImageType="Method">
    <Signature>CalendarEventSignUp()</Signature>
    <Description>Signs the player up for the selected calendar event. Only applies to guild events; has no effect if called when the current calendar event is not a guild event.</Description>
  </WowApi>
  <WowApi Name="CalendarEventSortInvites" Priority="0" ImageType="Method">
    <Signature>CalendarEventSortInvites("criterion", reverse)</Signature>
    <Description>Sorts the event invite/signup list. Does not cause the list to automatically remain sorted; e.g. if sorted by status and a character's status is changed, the list will not be resorted until this function is called again.</Description>
    <ArgumentList Name="criterion">
      <Description>Token identifying the attribute to use for sorting the list (string)
class - Sort by character class (according to the global table CLASS_SORT_ORDER)
name - Sort by character name
status - Sort by invite status</Description>
    </ArgumentList>
    <ArgumentList Name="reverse">
      <Description>True to sort the lis in reverse order; otherwise false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarEventTentative" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarGetAbsMonth" Priority="0" ImageType="Method">
    <Signature>month, year, numDays, firstWeekday = CalendarGetAbsMonth(month, year)</Signature>
    <Description>Returns date information for a given month and year</Description>
    <ArgumentList Name="month">
      <Description>Index of a month (starting at 1 = January) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ArgumentList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
    <ReturnList Name="numDays">
      <Description>Number of days in the month (number) </Description>
    </ReturnList>
    <ReturnList Name="firstWeekday">
      <Description>Index of the weekday (starting at 1 = Sunday) for the first day of the month (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetDate" Priority="0" ImageType="Method">
    <Signature>weekday, month, day, year = CalendarGetDate()</Signature>
    <Description>Returns the current date (in the server's time zone). Only returns valid information after the PLAYER_LOGIN event has fired.</Description>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week (starting at 1 = Sunday) (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetDayEvent" Priority="0" ImageType="Method">
    <Signature>title, hour, minute, calendarType, sequenceType, eventType, texture, modStatus, inviteStatus, invitedBy, difficulty, inviteType = CalendarGetDayEvent(monthOffset, day, index)</Signature>
    <Description>Returns information about a calendar event on a given day. Information can only be retrieved for events which might be visible in the calendar's current month -- i.e. those in the current month as well as those in (roughly) the last week of the previous month and (roughly) the first two weeks of the following month. To reliably retrieve information for events outside the calendar's current month, first change the calendar's month with CalendarSetMonth.</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month</Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month containing an event (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="title">
      <Description>Title displayed for the event (string) </Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>Hour part of the event's start time (on a 24-hour clock) (number) </Description>
    </ReturnList>
    <ReturnList Name="minute">
      <Description>Minute part of the event's start time (number) </Description>
    </ReturnList>
    <ReturnList Name="calendarType">
      <Description>Token identifying the type of event (string)
GUILD_ANNOUNCEMENT - Guild announcement (does not allow players to sign up)
GUILD_EVENT - Guild event (allows players to sign up)
HOLIDAY - World event (e.g. Lunar Festival, Darkmoon Faire, Stranglethorn Fishing Tournament, Call to Arms: Arathi Basin)
PLAYER - Player-created event or invitation
RAID_LOCKOUT - Indicates when one of the player's saved instances resets
RAID_RESET - Indicates scheduled reset times for major raid instances
SYSTEM - Other server-provided event</Description>
    </ReturnList>
    <ReturnList Name="sequenceType">
      <Description>Display cue for multi-day events, or "" if not applicable (string)
END - Last day of the event
INFO - An additional specially-labeled day related the event
ONGOING - Continuation of the event
START - First day of the event</Description>
    </ReturnList>
    <ReturnList Name="eventType">
      <Description>Display type for the event; used in the default UI to determine which icon to show (number)
0 - Holiday or other server-provided event
1 - Raid dungeon
2 - Five-player dungeon
3 - PvP event
4 - Meeting
5 - Other event</Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Unique portion of the path to a texture for the event (e.g. "CalendarChildrensWeek"). The mechanism by which a full texture path can be generated is not public API, but can be found in Addons/BlizzardCalendar/Blizzard_Calendar.lua after extracting default UI files with the AddOn Kit. (string) </Description>
    </ReturnList>
    <ReturnList Name="modStatus">
      <Description>The player's level of authority for the event, or "" if not applicable (number)
CREATOR - The player is the original creator of the event
MODERATOR - The player has been granted moderator status for the event</Description>
    </ReturnList>
    <ReturnList Name="inviteStatus">
      <Description>The player's status regarding the event (number)
1 - Invited (also used for non-invitation/non-signup events)
2 - Accepted
3 - Declined
4 - Confirmed
5 - Out
6 - Standby
7 - Signed up
8 - Not signed up</Description>
    </ReturnList>
    <ReturnList Name="invitedBy">
      <Description>Name of the character who created (or invited the player to) the event (string) </Description>
    </ReturnList>
    <ReturnList Name="difficulty">
      <Description>Difficulty of the dungeon or raid instance associated with the event (used only for RAID_LOCKOUT and RAID_RESET events, not player-created raid/dungeon events) (number)
1 - Normal
2 - Heroic</Description>
    </ReturnList>
    <ReturnList Name="inviteType">
      <Description>Invitation/announcement type for the event (number)
1 - Characters can only be explicitly invited to the event (or event is a non-invite/non-signup event)
2 - Event is visible to the player's entire guild; guild members can sign up and other characters can be explicitly invited</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetDayEventSequenceInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarGetEventIndex" Priority="0" ImageType="Method">
    <Signature>monthOffset, day, index = CalendarGetEventIndex()</Signature>
    <Description>Returns the month, day, and index of the selected calendar event</Description>
    <ReturnList Name="monthOffset">
      <Description>Month relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month</Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="index">
      <Description>Index of the event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetEventInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarGetFirstPendingInvite" Priority="0" ImageType="Method">
    <Signature>index = CalendarGetFirstPendingInvite(monthOffset, day)</Signature>
    <Description>Returns the index of the first invitation on a given day to which the player has not responded</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of the event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetGuildEventInfo" Priority="0" ImageType="Method">
    <Signature>month, day, weekday, hour, minute, eventType, title, calendarType, textureName = CalendarGetGuildEventInfo(eventIndex)</Signature>
    <Description>Returns information about a calendar guild-event</Description>
    <ArgumentList Name="eventIndex">
      <Description>Index of an event (between 1 and CalendarGetNumGuildEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="month">
      <Description>Index of the month in which the event starts (number)
1 - January
2 - February
3 - March
4 - April
5 - May
6 - June
7 - July
8 - August
9 - September
10 - October
11 - November
12 - December</Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Which day the event is held (number) </Description>
    </ReturnList>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week on which the event starts (number)
1 - Sunday
2 - Monday
3 - Tuesday
4 - Wednesday
5 - Thursday
6 - Friday
7 - Saturday</Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>At what hour the event is held (24-hour) (number) </Description>
    </ReturnList>
    <ReturnList Name="minute">
      <Description>At which minute of the hour the event is held (number) </Description>
    </ReturnList>
    <ReturnList Name="eventType">
      <Description>Index of what type of event it is (number)
1 - Raid
2 - Dungeon
3 - PvP
4 - Meeting
5 - Other
6 - Heroic Dungeon</Description>
    </ReturnList>
    <ReturnList Name="title">
      <Description>Title of the event (string) </Description>
    </ReturnList>
    <ReturnList Name="calendarType">
      <Description>Which type of event it is (string)
GUILD_ANNOUNCEMENT -
GUILD_EVENT</Description>
    </ReturnList>
    <ReturnList Name="textureName">
      <Description>Name of the texture which is used. Name matches suffix of the 'LFGIcon-' textures found here. Texture Returns empty string if the eventType is 'other' (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetGuildEventSelectionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CalendarGetHolidayInfo" Priority="0" ImageType="Method">
    <Signature>name, description, texture = CalendarGetHolidayInfo(monthOffset, day, index)</Signature>
    <Description>Returns additional information about a holiday event. Information can only be retrieved for events which might be visible in the calendar's current month -- i.e. those in the current month as well as those in (roughly) the last week of the previous month and (roughly) the first two weeks of the following month. To reliably retrieve information for events outside the calendar's current month, first change the calendar's month with CalendarSetMonth.</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Localized name of the event (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Localized text describing the event (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Unique portion of the path to a texture for the event (e.g. "CalendarChildrensWeek"). The mechanism by which a full texture path can be generated is not public API, but can be found in Addons/BlizzardCalendar/Blizzard_Calendar.lua after extracting default UI files with the AddOn Kit. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetMaxCreateDate" Priority="0" ImageType="Method">
    <Signature>weekday, month, day, year = CalendarGetMaxCreateDate()</Signature>
    <Description>Returns the latest date for which events may be scheduled. Currently, events can only be created up to one year from the last day of the current month (e.g. If the current date is May 19, 2009, the player is not allowed to create events scheduled for later than May 31, 2010). The default Calendar UI also does not allow viewing months beyond this date.</Description>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week (starting at 1 = Sunday) (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetMaxDate" Priority="0" ImageType="Method">
    <Signature>weekday, month, day, year = CalendarGetMaxDate()</Signature>
    <Description>Returns the latest date usable in the calendar system. This function currently always returns December 31st, 2030 as the max date.</Description>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week (starting at 1 = Sunday) (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetMinDate" Priority="0" ImageType="Method">
    <Signature>weekday, month, day, year = CalendarGetMinDate()</Signature>
    <Description>Returns the earliest date usable in the calendar system. This function currently returns November 24th, 2004 as the minimum date. This is the date that World of Warcraft was launched in the U.S.</Description>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week (starting at 1 = Sunday) (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetMinHistoryDate" Priority="0" ImageType="Method">
    <Signature>weekday, month, day, year = CalendarGetMinHistoryDate()</Signature>
    <Description>Returns the earliest date for which information about past player events is available. Applies to events created by the player, invites the player accepted, and guild events or announcements. Currently, the default UI only shows past events from up to two weeks before the current date.</Description>
    <ReturnList Name="weekday">
      <Description>Index of the day of the week (starting at 1 = Sunday) (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetMonth" Priority="0" ImageType="Method">
    <Signature>month, year, numDays, firstWeekday = CalendarGetMonth([monthOffset])</Signature>
    <Description>Returns information about a calendar month</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month). Defaults to the calendar's current month if omitted. (number) </Description>
    </ArgumentList>
    <ReturnList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year (full four-digit year) (number) </Description>
    </ReturnList>
    <ReturnList Name="numDays">
      <Description>Number of days in the month (number) </Description>
    </ReturnList>
    <ReturnList Name="firstWeekday">
      <Description>Index of the weekday (starting at 1 = Sunday) for the first day of the month (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetMonthNames" Priority="0" ImageType="Method">
    <Signature>... = CalendarGetMonthNames()</Signature>
    <Description>Returns a list of localized month names</Description>
    <ReturnList Name="...">
      <Description>A list of localized month names in calendar order (i.e. 1 = January) (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetNumDayEvents" Priority="0" ImageType="Method">
    <Signature>numEvents = CalendarGetNumDayEvents(monthOffset, day)</Signature>
    <Description>Returns the number of calendar events on a given day</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="numEvents">
      <Description>Number of events on the given day (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetNumGuildEvents" Priority="0" ImageType="Method">
    <Signature>numEvents = CalendarGetNumGuildEvents()</Signature>
    <Description>Returns the number of guild events in your calendar</Description>
    <ReturnList Name="numEvents">
      <Description>Number of guild events in your calendar (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetNumPendingInvites" Priority="0" ImageType="Method">
    <Signature>numInvites = CalendarGetNumPendingInvites()</Signature>
    <Description>Returns the number of calendar invitations to which the player has yet to respond</Description>
    <ReturnList Name="numInvites">
      <Description>Number of pending calendar invitations (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetRaidInfo" Priority="0" ImageType="Method">
    <Signature>title, calendarType, raidID, hour, minute, difficulty = CalendarGetRaidInfo(monthOffset, day, index)</Signature>
    <Description>Returns information about a raid lockout or scheduled raid reset event. Information can only be retrieved for events which might be visible in the calendar's current month -- i.e. those in the current month as well as those in (roughly) the last week of the previous month and (roughly) the first two weeks of the following month. To reliably retrieve information for events outside the calendar's current month, first change the calendar's month with CalendarSetMonth.</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="title">
      <Description>Title displayed for the event (number) </Description>
    </ReturnList>
    <ReturnList Name="calendarType">
      <Description>Token identifying the type of event (string)
RAID_LOCKOUT - Indicates when one of the player's saved instances resets
RAID_RESET - Indicates scheduled reset times for major raid instances</Description>
    </ReturnList>
    <ReturnList Name="raidID">
      <Description>ID number of the instance to which the player is saved, or 0 if not applicable (number) </Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>Hour part of the time at which the instance resets (on a 24-hour clock) (number) </Description>
    </ReturnList>
    <ReturnList Name="minute">
      <Description>Minute part of the time at which the instance resets (number) </Description>
    </ReturnList>
    <ReturnList Name="difficulty">
      <Description>Difficulty of the dungeon or raid instance associated with the event (number)
1 - Normal
2 - Heroic</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarGetWeekdayNames" Priority="0" ImageType="Method">
    <Signature>... = CalendarGetWeekdayNames()</Signature>
    <Description>Returns a list of localized weekday names</Description>
    <ReturnList Name="...">
      <Description>A list of localized weekday names in calendar order (i.e. 1 = Sunday) (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarIsActionPending" Priority="0" ImageType="Method">
    <Signature>isPending = CalendarIsActionPending()</Signature>
    <Description>Returns whether an update to calendar information is in progress. Returns true while the client is synchronizing its calendar information from the server; e.g. after calling CalendarOpenEvent, CalendarAddEvent, or CalendarUpdateEvent. During such periods, using other calendar API functions to query or change event information may not have valid orexpected results.</Description>
    <ReturnList Name="isPending">
      <Description>True if an update to calendar information is in progress; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CalendarMassInviteArenaTeam" Priority="0" ImageType="Method">
    <Signature>CalendarMassInviteArenaTeam(index)</Signature>
    <Description>Repopulates the current event's invite list with members of one of the player's arena teams. Clears any invites already listed. Can only be used for events not yet created (i.e. saved to the calendar).</Description>
    <ArgumentList Name="index">
      <Description>Index of an arena team type (number)
1 - 2v2 team
2 - 3v3 team
3 - 5v5 team</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarMassInviteGuild" Priority="0" ImageType="Method">
    <Signature>CalendarMassInviteGuild(minLevel, maxLevel, rank)</Signature>
    <Description>Repopulates the selected event's invite list with members of the player's guild. Clears any invites already listed. Can only be used for events not yet created (i.e. saved to the calendar).</Description>
    <ArgumentList Name="minLevel">
      <Description>Lowest level of characters to invite (number) </Description>
    </ArgumentList>
    <ArgumentList Name="maxLevel">
      <Description>Highest level of characters to invite (number) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>Lowest guild rank of characters to invite (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarNewEvent" Priority="0" ImageType="Method">
    <Signature>CalendarNewEvent()</Signature>
    <Description>Creates a new event and selects it for viewing/editing</Description>
  </WowApi>
  <WowApi Name="CalendarNewGuildAnnouncement" Priority="0" ImageType="Method">
    <Signature>CalendarNewGuildAnnouncement()</Signature>
    <Description>Creates a new guild announcement and selects it for viewing/editing. Guild announcements are visible to all guild members but do not allow signups or invitations.</Description>
  </WowApi>
  <WowApi Name="CalendarNewGuildEvent" Priority="0" ImageType="Method">
    <Signature>CalendarNewGuildEvent()</Signature>
    <Description>Creates a new guild event and selects it for viewing/editing. Guild events are visible to all guild members and allow members to sign up (or non-members to be invited).</Description>
  </WowApi>
  <WowApi Name="CalendarOpenEvent" Priority="0" ImageType="Method">
    <Signature>CalendarOpenEvent(monthOffset, day, index)</Signature>
    <Description>Selects a calendar event for viewing/editing</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month to query relative to the calendar's currently displayed month (i.e. 0 for current month, 1 for next month, -1 for previous month) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="day">
      <Description>Day of the month to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an event on the given day (from 1 to CalendarGetNumDayEvents()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarRemoveEvent" Priority="0" ImageType="Method">
    <Signature>CalendarRemoveEvent()</Signature>
    <Description>Removes the selected event invitation from the player's calendar or removes the player from the selected guild event's signup list. NOTE: May disconnect the player if called when the selected calendar event is not a received invitation or a guild event.</Description>
  </WowApi>
  <WowApi Name="CalendarSetAbsMonth" Priority="0" ImageType="Method">
    <Signature>CalendarSetAbsMonth(month [, year])</Signature>
    <Description>Set's the calendar's month to an absolute date</Description>
    <ArgumentList Name="month">
      <Description>Index of the month (starting at 1 = January) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="year">
      <Description>Year (full four-digit year); uses current year if omitted (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarSetMonth" Priority="0" ImageType="Method">
    <Signature>CalendarSetMonth(monthOffset)</Signature>
    <Description>Sets the calendar's month relative to its current month</Description>
    <ArgumentList Name="monthOffset">
      <Description>Month containing an event relative to the calendar's currently displayed month (number)
-1 - Month preceding the calendar's current month
0 - The calendar's current month (i.e. same month as CalendarGetMonth())
1 - Month after the calendar's current month</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CalendarUpdateEvent" Priority="0" ImageType="Method">
    <Signature>CalendarUpdateEvent()</Signature>
    <Description>Saves changes made to the selected event. Until this function is called, changes made to an event will not be saved -- they will not propagate to guild members or invitees, and the event will revert to its previous state if the player closes the calendar, reloads the UI, or goes to view or edit another event.
Only applies to existing events; for newly created events use CalendarAddEvent() once the event's attributes and initial invite list are set.</Description>
  </WowApi>
  <WowApi Name="CallCompanion" Priority="0" ImageType="Method">
    <Signature>CallCompanion("type", index)</Signature>
    <Description>Summons a non-combat pet or mount.
If called referencing the current non-combat pet, dismisses it. Does nothing if given an index greater than GetNumCompanions(type).</Description>
    <ArgumentList Name="type">
      <Description>Type of companion (string)
CRITTER - A non-combat pet
MOUNT - A mount</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a companion (between 1 and GetNumCompanions(type)) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CameraOrSelectOrMoveStart" Priority="0" ImageType="Method">
    <Signature>CameraOrSelectOrMoveStart()</Signature>
    <Description>Begins camera movement or selection (equivalent to left-clicking in the 3-D world). After calling this function (i.e. while the left mouse button is held), cursor movement rotates the camera. Final results vary by context and are determined when calling CameraOrSelectOrMoveStop() (i.e. releasing the left mouse button).
Used by the CAMERAORSELECTORMOVE binding (not customizable in the default UI), which is bound to the left mouse button by default.</Description>
  </WowApi>
  <WowApi Name="CameraOrSelectOrMoveStop" Priority="0" ImageType="Method">
    <Signature>CameraOrSelectOrMoveStop(isSticky)</Signature>
    <Description>Ends action initiated by CameraOrSelectOrMoveStart. After calling this function (i.e. releasing the left mouse button), camera movement stops and normal cursor movement resumes. If the cursor has not moved significantly since calling CameraOrSelectOrMoveStart() (i.e. pressing the left mouse button) and is over a unit, that unit becomes the player's target; if the cursor has not moved significantly and is not over a unit, clears the player's target unless the "Sticky Targeting" option is enabled (i.e. the "deselectOnClick" CVar is 0).
Used by the CAMERAORSELECTORMOVE binding (not customizable in the default UI), which is bound to the left mouse button by default.</Description>
    <ArgumentList Name="isSticky">
      <Description>If 1, the camera will remain static until cancelled. Otherwise, the camera will pan back to be directly behind the character (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CameraZoomIn" Priority="0" ImageType="Method">
    <Signature>CameraZoomIn(distance)</Signature>
    <Description>Zooms the camera in by a specified distance.
The max distance of the camera is set in the Interface Options screen, and the maximum distance allowed is enforced by this setting, and the game client. Depending on the setting, this is between 15.0 and 24.0 in the current version of the client.</Description>
    <ArgumentList Name="distance">
      <Description>The distance to zoom in (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CameraZoomOut" Priority="0" ImageType="Method">
    <Signature>CameraZoomOut(distance)</Signature>
    <Description>Zooms the camera out by a specified distance.
This function is used to zoom the camera out. The max distance of the camera is set in the Interface Options screen, and the maximum distance allowed is enforced by this setting, and the game client. Depending on the setting, this is between 15.0 and 24.0 in the current version of the client.</Description>
    <ArgumentList Name="distance">
      <Description>The distance to zoom out (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CanAbandonQuest" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanAlterSkin" Priority="0" ImageType="Method">
    <Signature>canAlter = CanAlterSkin()</Signature>
    <Description>Lets you check if the player can change their skin color. Returns true if the player can change their skin color while using the barbershop.</Description>
    <ReturnList Name="canAlter">
      <Description>Can the player change skin color (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanBeRaidTarget" Priority="0" ImageType="Method">
    <Signature>canMark = CanBeRaidTarget("unit")</Signature>
    <Description>Returns whether a unit can be marked with a raid symbol or not</Description>
    <ArgumentList Name="unit">
      <Description>A unit to check (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="canMark">
      <Description>true if the unit can be marked, otherwise false. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanCancelAuction" Priority="0" ImageType="Method">
    <Signature>canCancel = CanCancelAuction(index)</Signature>
    <Description>Returns whether one of the player's auctions can be canceled. Generally, non-cancelable auctions are those which have completed but for which payment has not yet been delivered.</Description>
    <ArgumentList Name="index">
      <Description>Index of an auction in the "owner" listing (number) </Description>
    </ArgumentList>
    <ReturnList Name="canCancel">
      <Description>1 if the auction can be canceled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanCancelScene" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanChangePlayerDifficulty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanComplainChat" Priority="0" ImageType="Method">
    <Signature>canComplain = CanComplainChat(lineID)</Signature>
    <Description>Returns whether a chat message can be reported as spam</Description>
    <ArgumentList Name="lineID">
      <Description>Unique identifier of a chat message (11th argument received with the corresponding CHAT_MSG event) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canComplain">
      <Description>1 if the player can report the given chat message as spam; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanComplainInboxItem" Priority="0" ImageType="Method">
    <Signature>complain = CanComplainInboxItem(mailID)</Signature>
    <Description>Returns whether a mail can be reported as spam. Returns nil for messages from Game Masters or friends, as well as for messages generated by the game itself (Auction House mail, mails from NPCs, etc).
As with most mail functions, only provides valid information if used while the mail UI is open (between the MAIL_SHOW and MAIL_CLOSE events).</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="complain">
      <Description>1 if the mail can be reported as spam; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEditGuildBankTabInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanEditGuildEvent" Priority="0" ImageType="Method">
    <Signature>canEdit = CanEditGuildEvent()</Signature>
    <Description>Returns whether the player is allowed to edit guild-wide calendar events</Description>
    <ReturnList Name="canEdit">
      <Description>1 if the player can create or edit guild calendar events, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEditGuildInfo" Priority="0" ImageType="Method">
    <Signature>canEdit = CanEditGuildInfo()</Signature>
    <Description>Returns whether the player is allowed to edit the guild information text. This text appears when clicking the "Guild Information" button in the default UI's Guild window.</Description>
    <ReturnList Name="canEdit">
      <Description>1 if the player can edit the guild information; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEditGuildTabInfo" Priority="0" ImageType="Method">
    <Signature>canEdit = CanEditGuildTabInfo(tab)</Signature>
    <Description>Returns whether the player is allowed to edit a guild bank tab's information</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canEdit">
      <Description>1 if the player can edit the guild bank tab; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEditMOTD" Priority="0" ImageType="Method">
    <Signature>canEdit = CanEditMOTD()</Signature>
    <Description>Returns whether the player is allowed to edit the guild Message of the Day</Description>
    <ReturnList Name="canEdit">
      <Description>1 if the player can edit the guild MOTD, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEditOfficerNote" Priority="0" ImageType="Method">
    <Signature>canEdit = CanEditOfficerNote()</Signature>
    <Description>Returns whether the player is allowed to edit guild officer notes</Description>
    <ReturnList Name="canEdit">
      <Description>1 if the player can edit officer notes; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEditPublicNote" Priority="0" ImageType="Method">
    <Signature>canEdit = CanEditPublicNote()</Signature>
    <Description>Returns whether the player is allowed to edit guild public notes</Description>
    <ReturnList Name="canEdit">
      <Description>1 if the player can edit public notes, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanEjectPassengerFromSeat" Priority="0" ImageType="Method">
    <Signature>canEject = CanEjectPassengerFromSeat(seat)</Signature>
    <Description>Returns whether the player can eject the occupant of a seat in the player's vehicle</Description>
    <ArgumentList Name="seat">
      <Description>Index of a seat in the player's vehicle (number) </Description>
    </ArgumentList>
    <ReturnList Name="canEject">
      <Description>True if the player can eject the seat's occupant; false if the player cannot eject the occupant or if the seat is empty (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanExitVehicle" Priority="0" ImageType="Method">
    <Signature>canExit = CanExitVehicle()</Signature>
    <Description>Returns whether the player is in a vehicle. Used in the default UI to determine whether to show the "Leave Vehicle" button while controlling siege vehicles, turrets, and certain special mounts and quest entities.</Description>
    <ReturnList Name="canExit">
      <Description>1 if the player is in a vehicle and can exit; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanGrantLevel" Priority="0" ImageType="Method">
    <Signature>canGrant = CanGrantLevel("unit")</Signature>
    <Description>Returns whether the player can give levels to a Recruit-a-Friend partner</Description>
    <ArgumentList Name="unit">
      <Description>Unit to gift a level (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="canGrant">
      <Description>1 if the player can grant a level to the unit; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanGuildBankRepair" Priority="0" ImageType="Method">
    <Signature>canRepair = CanGuildBankRepair()</Signature>
    <Description>Returns whether the player is allowed to pay for repairs using guild bank funds</Description>
    <ReturnList Name="canRepair">
      <Description>1 if the player can use guild bank funds for repair; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanGuildDemote" Priority="0" ImageType="Method">
    <Signature>canDemote = CanGuildDemote()</Signature>
    <Description>Returns whether the player is allowed to demote lower ranked guild members</Description>
    <ReturnList Name="canDemote">
      <Description>1 if the player can demote lower ranked guild members; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanGuildInvite" Priority="0" ImageType="Method">
    <Signature>canInvite = CanGuildInvite()</Signature>
    <Description>Returns whether the player is allowed to invite new members to his or her guild</Description>
    <ReturnList Name="canInvite">
      <Description>1 if the player can invite members to their guild, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanGuildPromote" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanGuildRemove" Priority="0" ImageType="Method">
    <Signature>canRemove = CanGuildRemove()</Signature>
    <Description>Returns whether the player is allowed to remove members from his or her guild. The player may only remove lower ranked members from the guild.</Description>
    <ReturnList Name="canRemove">
      <Description>1 if the player can remove a member from their guild, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanHearthAndResurrectFromArea" Priority="0" ImageType="Method">
    <Signature>status = CanHearthAndResurrectFromArea()</Signature>
    <Description>Returns whether the player is in a world PvP zone offering an exit option.
Used by the default UI to show the MiniMapBattlefieldFrame and provide a menu option for leaving if the player is in a world PvP combat zone (i.e. Wintergrasp).</Description>
    <ReturnList Name="status">
      <Description>1 if in a world PvP zone with an exit option; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanInitiateWarGame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanInspect" Priority="0" ImageType="Method">
    <Signature>canInspect = CanInspect("unit", showError)</Signature>
    <Description>Returns whether a unit can be inspected. Returns nil if the unit is out of inspect range, if the unit is an NPC, or if the unit is flagged for PvP combat and hostile to the player.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to inspect (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="showError">
      <Description>True to fire a UI_ERROR_MESSAGE event (causing the default UI to display an error message) if the unit cannot be inspected; otherwise false (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="canInspect">
      <Description>1 if the unit can be inspected; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanItemBeSocketedToArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanJoinBattlefieldAsGroup" Priority="0" ImageType="Method">
    <Signature>canGroupJoin = CanJoinBattlefieldAsGroup()</Signature>
    <Description>Returns whether the battleground for which the player is queueing supports joining as a group</Description>
    <ReturnList Name="canGroupJoin">
      <Description>1 if the currently displayed battlefield supports joining as a group (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanMapChangeDifficulty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanMerchantRepair" Priority="0" ImageType="Method">
    <Signature>canRepair = CanMerchantRepair()</Signature>
    <Description>Returns whether the vendor with whom the player is currently interacting can repair equipment</Description>
    <ReturnList Name="canRepair">
      <Description>1 if the vendor can repair equipment; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanPartyLFGBackfill" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanQueueForWintergrasp" Priority="0" ImageType="Method">
    <Signature>canQueue = CanQueueForWintergrasp()</Signature>
    <Description>Returns whether the player can queue for Wintergrasp</Description>
    <ReturnList Name="canQueue">
      <Description>Can the player queue for Wintergrasp (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanReplaceGuildMaster" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanResetTutorials" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanSendAuctionQuery" Priority="0" ImageType="Method">
    <Signature>canQuery, canMassQuery = CanSendAuctionQuery("list")</Signature>
    <Description>Returns whether the player can perform an auction house query. All auction query types are throttled, preventing abuse of the server by clients sending too many queries in short succession. Normal queries can be sent once every few seconds; mass queries return all results in the auction house instead of one "page" at a time, and can only be sent once every several minutes.</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ReturnList Name="canQuery">
      <Description>1 if the player can submit an auction query; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="canMassQuery">
      <Description>1 if the player can submit a mass auction query; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanSendSoRByText" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanShowAchievementUI" Priority="0" ImageType="Method">
    <Signature>canShow = CanShowAchievementUI()</Signature>
    <Description>Returns whether the Achievements UI should be enabled.
Used by the default UI to determine whether to show or hide the menu button for Achievements (as it also does for Talents); currently always returns true.</Description>
    <ReturnList Name="canShow">
      <Description>true if the Achievements UI should be enabled, otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanShowResetInstances" Priority="0" ImageType="Method">
    <Signature>canResetInstances = CanShowResetInstances()</Signature>
    <Description>Returns whether the player can reset instances. Used to determine whether to display the "Reset Instance" option in the unit popup menu for the player.
Only instances to which the player is not saved may be reset (i.e. normal 5-man dungeons, not heroic dungeons or raids), and only by a solo player or group leader.</Description>
    <ReturnList Name="canResetInstances">
      <Description>1 if the player can currently reset instances; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanSignPetition" Priority="0" ImageType="Method">
    <Signature>canSign = CanSignPetition()</Signature>
    <Description>Returns whether the player can sign the currently offered petition. Petitions can only be signed once per account, rather than once per character.</Description>
    <ReturnList Name="canSign">
      <Description>1 if the player can sign the offered petition; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanSolveArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanSummonFriend" Priority="0" ImageType="Method">
    <Signature>canSummon = CanSummonFriend("name") or CanSummonFriend("unit")</Signature>
    <Description>Returns whether a unit can be summoned via Recruit-a-Friend. Indicates whether the target unit is currently summonable, not just whether that unit's account is linked to the player's via the Recruit-A-Friend program.</Description>
    <ArgumentList Name="name">
      <Description>Exact name of a player to summon (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to summon (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="canSummon">
      <Description>1 if the unit can be summoned, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanSwitchVehicleSeat" Priority="0" ImageType="Method">
    <Signature>canSwitch = CanSwitchVehicleSeat()</Signature>
    <Description>Returns whether the player can change vehicle seats. Tells you if the player can switch seats in general, whereas UnitVehicleSeatInfo() tells you if the player can switch into a specific seat.</Description>
    <ReturnList Name="canSwitch">
      <Description>Can the player change vehicle seats (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanSwitchVehicleSeats" Priority="0" ImageType="Method">
    <Signature>canSwitch = CanSwitchVehicleSeats()</Signature>
    <Description>Returns whether the player is in a vehicle with multiple seats</Description>
    <ReturnList Name="canSwitch">
      <Description>1 if the player can switch seats; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanTransmogrifyItemWithItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanUpgradeExpansion" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanUseEquipmentSets" Priority="0" ImageType="Method">
    <Signature>enabled = CanUseEquipmentSets()</Signature>
    <Description>Returns whether the player has enabled the equipment manager. Despite the name, this returns true when the player has enabled the use of the equipment manager through the interface or CVars.</Description>
    <ReturnList Name="enabled">
      <Description>Has the player enable the equipment manager (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanUseSoulstone" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanUseVoidStorage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanViewGuildRecipes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CanViewOfficerNote" Priority="0" ImageType="Method">
    <Signature>canView = CanViewOfficerNote()</Signature>
    <Description>Returns whether the player is allowed to view guild officer notes</Description>
    <ReturnList Name="canView">
      <Description>1 if the player can view officer notes, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CanWithdrawGuildBankMoney" Priority="0" ImageType="Method">
    <Signature>canWithdraw = CanWithdrawGuildBankMoney()</Signature>
    <Description>Returns whether the player is allowed to withdraw money from the guild bank</Description>
    <ReturnList Name="canWithdraw">
      <Description>1 if the player can withdraw money from the guild bank; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CancelAreaSpiritHeal" Priority="0" ImageType="Method">
    <Signature>CancelAreaSpiritHeal()</Signature>
    <Description>Declines the next upcoming periodic resurrection from a battleground spirit healer. Usable in response to the AREA_SPIRIT_HEALER_IN_RANGE event which fires when the player's ghost is near a battleground spirit healer.</Description>
  </WowApi>
  <WowApi Name="CancelAuction" Priority="0" ImageType="Method">
    <Signature>CancelAuction(index)</Signature>
    <Description>Cancels an auction created by the player. When canceling an auction, the deposit amount is not refunded.</Description>
    <ArgumentList Name="index">
      <Description>Index of an auction in the "owner" listing (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CancelBarberShop" Priority="0" ImageType="Method">
    <Signature>CancelBarberShop()</Signature>
    <Description>Exits a barber shop session. Causes the player character to stand up, returning to the normal world, and fires the BARBER_SHOP_CLOSE event. Any style changes already paid for (with ApplyBarberShopStyle()) are kept; any changes since are discarded.</Description>
  </WowApi>
  <WowApi Name="CancelDuel" Priority="0" ImageType="Method">
    <Signature>CancelDuel()</Signature>
    <Description>Cancels an ongoing duel, or declines an offered duel</Description>
  </WowApi>
  <WowApi Name="CancelEmote" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelGuildMembershipRequest" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelItemTempEnchantment" Priority="0" ImageType="Method">
    <Signature>CancelItemTempEnchantment(slot)</Signature>
    <Description>Cancels a temporary weapon enchant. Examples of temporary enchants include mana oils, sharpening stones, and Shaman weapon enhancements.</Description>
    <ArgumentList Name="slot">
      <Description>1 to cancel the mainhand item enchant, 2 to cancel the offhand item enchant (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CancelLogout" Priority="0" ImageType="Method">
    <Signature>CancelLogout()</Signature>
    <Description>Cancels a pending logout or quit. Only has effect if logout or quit is pending (following the PLAYER_CAMPING or PLAYER_QUITING event).</Description>
  </WowApi>
  <WowApi Name="CancelMasterLootRoll" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelPendingEquip" Priority="0" ImageType="Method">
    <Signature>CancelPendingEquip(index)</Signature>
    <Description>Cancels equipping a bind-on-equip item. When the player attempts to equip a bind-on-equip item, the default UI displays a dialog warning that equipping the item will cause it to become soulbound; this function is called when canceling that dialog.</Description>
    <ArgumentList Name="index">
      <Description>Index of a pending equip warning; currently always 0 as only one equip warning will be given at a time (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CancelPreloadingMovie" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelScene" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelSell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelShapeshiftForm" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CancelSummon" Priority="0" ImageType="Method">
    <Signature>CancelSummon()</Signature>
    <Description>Declines an offered summons. Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.</Description>
  </WowApi>
  <WowApi Name="CancelTrade" Priority="0" ImageType="Method">
    <Signature>CancelTrade()</Signature>
    <Description>Cancels a trade in progress. Can be used if either party has accepted the trade, but not once both have.</Description>
  </WowApi>
  <WowApi Name="CancelTradeAccept" Priority="0" ImageType="Method">
    <Signature>CancelTradeAccept()</Signature>
    <Description>Cancels the player's acceptance of a trade. If the player has accepted the trade but the target has not, reverts the player to the pre-acceptance state but does not end the trade.</Description>
  </WowApi>
  <WowApi Name="CancelUnitBuff" Priority="0" ImageType="Method">
    <Signature>CancelUnitBuff("unit", index [, "filter"]) or CancelUnitBuff("unit", "name" [, "rank" [, "filter"]])</Signature>
    <Description>Cancels a buff on the player. CancelUnitBuff becomes a protected function while under combat lockdown.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (only valid for 'player') (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an aura to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of an aura to query (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string) </Description>
    </ArgumentList>
    <ArgumentList Name="filter">
      <Description>A list of filters to use separated by the pipe '|' character; e.g. "RAID|PLAYER" will query group buffs cast by the player (string)
CANCELABLE - Query auras that can be cancelled
HARMFUL - Query debuffs only
HELPFUL - Query buffs only
NOT_CANCELABLE - Query auras that cannot be cancelled
PLAYER - Query auras the player has cast
RAID - Query auras the player can cast on party/raid members (as opposed to self buffs)</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CannotBeResurrected" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CastGlyph" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CastGlyphByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CastGlyphByName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CastPetAction" Priority="0" ImageType="Method">
    <Signature>CastPetAction(index [, "unit"])</Signature>
    <Description>Casts a pet action on a specific target</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to be used as target for the action (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CastShapeshiftForm" Priority="0" ImageType="Method">
    <Signature>CastShapeshiftForm(index)</Signature>
    <Description>Casts an ability on the stance/shapeshift bar</Description>
    <ArgumentList Name="index">
      <Description>Index of an ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CastSpell" Priority="0" ImageType="Method">
    <Signature>CastSpell(id, "bookType")</Signature>
    <Description>Casts a from the spellbook. Only protected (i.e. usable only by the Blizzard UI) if the given id corresponds to a spell which can be cast (not a passive spell) and is not a trade skill; can be used by addons to cast the "spells" that open trade skill windows.</Description>
    <ArgumentList Name="id">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CastSpellByID" Priority="0" ImageType="Method">
    <Signature>CastSpellByID(spellID [, "target"])</Signature>
    <Description>Casts a spell specified by id (optionally on a specified unit). Only protected (i.e. usable only by the Blizzard UI) if the given spell is castable (not passive) and is not a trade skill; can be used by addons to cast the "spells" that open trade skill windows.</Description>
    <ArgumentList Name="spellID">
      <Description>ID of the spell to cast (number, spellID) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit to target with the spell (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CastSpellByName" Priority="0" ImageType="Method">
    <Signature>CastSpellByName("name" [, "target"])</Signature>
    <Description>Casts a spell specified by name (optionally on a specified unit). Only protected (i.e. usable only by the Blizzard UI) if the given spell is castable (not passive) and is not a trade skill; can be used by addons to cast the "spells" that open trade skill windows.</Description>
    <ArgumentList Name="name">
      <Description>Name of a spell to cast (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit to target with the spell (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChangeActionBarPage" Priority="0" ImageType="Method">
    <Signature>ChangeActionBarPage(page)</Signature>
    <Description>Changes the current action bar page</Description>
    <ArgumentList Name="page">
      <Description>The action bar page to change to (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChangeChatColor" Priority="0" ImageType="Method">
    <Signature>ChangeChatColor("messageGroup", red, green, blue)</Signature>
    <Description>Changes the color associated with a chat message type</Description>
    <ArgumentList Name="messageGroup">
      <Description>Token identifying a message type (string, chatMsgType) </Description>
    </ArgumentList>
    <ArgumentList Name="red">
      <Description>Red component of the color value (0.0 - 1.0) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="green">
      <Description>Red component of the color value (0.0 - 1.0) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="blue">
      <Description>Red component of the color value (0.0 - 1.0) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelBan" Priority="0" ImageType="Method">
    <Signature>ChannelBan("channel", "fullname")</Signature>
    <Description>Bans a character from a chat channel. Has no effect unless the player is a moderator of the given channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="fullname">
      <Description>Name of the character to be banned (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelInvite" Priority="0" ImageType="Method">
    <Signature>ChannelInvite("channel", "name")</Signature>
    <Description>Invites a character to join a chat channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to invite (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelKick" Priority="0" ImageType="Method">
    <Signature>ChannelKick("channel", "fullname")</Signature>
    <Description>Removes a player from the channel. Has no effect unless the player is a moderator of the given channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="fullname">
      <Description>Name of the character to kick (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelModerator" Priority="0" ImageType="Method">
    <Signature>ChannelModerator("channel", "fullname")</Signature>
    <Description>Grants a character moderator status in a chat channel. Has no effect unless the player is the owner of the given channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="fullname">
      <Description>Name of the character to promote to moderator (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelMute" Priority="0" ImageType="Method">
    <Signature>ChannelMute("channelName", "name") or ChannelMute(channelId, "name")</Signature>
    <Description>Grants a character ability to speak in a moderated chat channel</Description>
    <ArgumentList Name="channelName">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="ChannelSilenceAll" Priority="0" ImageType="Method">
    <Signature>ChannelSilenceAll("channelName", ["unit"] or ["name"]) or ChannelSilenceAll(channelId, ["unit"] or ["name"]) or ChannelSilenceAll(["channelName"] or [channelId], "unit") or ChannelSilenceAll(["channelName"] or [channelId], "name")</Signature>
    <Description>Silences a character for chat and voice on a channel</Description>
    <ArgumentList Name="channelName">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelId">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Unit to silence (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to silence (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelSilenceVoice" Priority="0" ImageType="Method">
    <Signature>ChannelSilenceVoice("channelName", ["unit"] or ["name"]) or ChannelSilenceVoice(channelId, ["unit"] or ["name"]) or ChannelSilenceVoice(["channelName"] or [channelId], "unit") or ChannelSilenceVoice(["channelName"] or [channelId], "name")</Signature>
    <Description>Silences the given character for voice chat on the channel. Only a raid/party/battleground leader or assistant can silence a player.</Description>
    <ArgumentList Name="channelName">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelId">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Unit to silence (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to silence (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelToggleAnnouncements" Priority="0" ImageType="Method">
    <Signature>ChannelToggleAnnouncements("channel")</Signature>
    <Description>Enables or disables printing of join/leave announcements for a channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel for which to enable or disable announcements (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelUnSilenceAll" Priority="0" ImageType="Method">
    <Signature>ChannelUnSilenceAll("channelName", ["unit"] or ["name"]) or ChannelUnSilenceAll(channelId, ["unit"] or ["name"]) or ChannelUnSilenceAll(["channelName"] or [channelId], "unit") or ChannelUnSilenceAll(["channelName"] or [channelId], "name")</Signature>
    <Description>Unsilences a character for chat and voice on a channel</Description>
    <ArgumentList Name="channelName">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelId">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Unit to unsilence (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to unsilence (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelUnSilenceVoice" Priority="0" ImageType="Method">
    <Signature>ChannelUnSilenceVoice("channelName", ["unit"] or ["name"]) or ChannelUnSilenceVoice(channelId, ["unit"] or ["name"]) or ChannelUnSilenceVoice(["channelName"] or [channelId], "unit") or ChannelUnSilenceVoice(["channelName"] or [channelId], "name")</Signature>
    <Description>Unsilences a character on a chat channel</Description>
    <ArgumentList Name="channelName">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelId">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Unit to unsilence (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to unsilence (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelUnban" Priority="0" ImageType="Method">
    <Signature>ChannelUnban("channel", "fullname")</Signature>
    <Description>Lifts the ban preventing a character from joining a chat channel. Has no effect unless the player is a moderator of the given channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="fullname">
      <Description>Name of the character to for which to lift the ban (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelUnmoderator" Priority="0" ImageType="Method">
    <Signature>ChannelUnmoderator("channel", "fullname")</Signature>
    <Description>Revokes moderator status from a character on a chat channel. Has no effect unless the player is the owner of the given channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="fullname">
      <Description>Name of the character to demote from moderator (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelUnmute" Priority="0" ImageType="Method">
    <Signature>ChannelUnmute("channelName", "name") or ChannelUnmute(channelId, "name")</Signature>
    <Description>Removes a character's ability to speak in a moderated chat channel</Description>
    <ArgumentList Name="channelName">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="ChannelVoiceOff" Priority="0" ImageType="Method">
    <Signature>ChannelVoiceOff("channel") or ChannelVoiceOff(channelIndex)</Signature>
    <Description>Disables voice chat in a channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelIndex">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChannelVoiceOn" Priority="0" ImageType="Method">
    <Signature>ChannelVoiceOn("channel") or ChannelVoiceOn(channelIndex)</Signature>
    <Description>Enables voice chat in a channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelIndex">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChatFrame_AddMessageEventFilter" Priority="0" ImageType="Method">
    <Signature>ChatFrame_AddMessageEventFilter("event", filter)</Signature>
    <Description>Adds a function to filter or alter messages to the chat display system. The filter function will be called each time a message is sent to one of the default chat frames (ChatFrame1, ChatFrame2, ..., ChatFrame7). The function will be passed the chat frame object that the message is being added to, along with the event that caused the messages to be added, and the arguments to that event.
A filter function may return true if the message should be filtered , or false if the message should be displayed. Following this boolean flag, the message can return a list of (possibly) altered arguments to be passed to the next filter function.
See examples for details.</Description>
    <ArgumentList Name="event">
      <Description>A CHAT_MSG_ Event for which the filter should be used (string) </Description>
    </ArgumentList>
    <ArgumentList Name="filter">
      <Description>A function to filter incoming messages (function) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChatFrame_GetMessageEventFilters" Priority="0" ImageType="Method">
    <Signature>filterTable = ChatFrame_GetMessageEventFilters("event")</Signature>
    <Description>Returns the list of filters registered for a chat event. See ChatFrame_AddMessageEventFilter() for details about chat message filters.</Description>
    <ArgumentList Name="event">
      <Description>A CHAT_MSG_ Event (string) </Description>
    </ArgumentList>
    <ReturnList Name="filterTable">
      <Description>A table containing any filters set for the given event, with numeric keys corresponding to the order in which filters were registered (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ChatFrame_RemoveMessageEventFilter" Priority="0" ImageType="Method">
    <Signature>ChatFrame_RemoveMessageEventFilter("event", filter)</Signature>
    <Description>Removes a previously set chat message filter. See ChatFrame_AddMessageEventFilter() for details about chat message filters.</Description>
    <ArgumentList Name="event">
      <Description>CHAT_MSG_ Event from which to remove a filter (string) </Description>
    </ArgumentList>
    <ArgumentList Name="filter">
      <Description>A filter function registered for the event (function) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ChatHistory_GetAccessID" Priority="0" ImageType="Method">
    <Signature>accessID = ChatHistory_GetAccessID("chatType" [, "chatTarget"])</Signature>
    <Description>Retrieve an accessID for a combination of chatType and chatTarget. This accessID can be used to filter chat frame messages.</Description>
    <ArgumentList Name="chatType">
      <Description>chatMsgType for which to retrieve the accessID. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="chatTarget">
      <Description>chatTarget to include in the accessID. Only messages with this chatTarget will be matched by the accessID. (string) </Description>
    </ArgumentList>
    <ReturnList Name="accessID">
      <Description>accessID for the combination specified. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ChatHistory_GetChatType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CheckBinderDist" Priority="0" ImageType="Method">
    <Signature>inRange = CheckBinderDist()</Signature>
    <Description>Returns whether the player is in range of an NPC that can set the Hearthstone location. Usable following the CONFIRM_BINDER event which fires when the player speaks to an Innkeeper (or similar) NPC and chooses to set his or her Hearthstone location. Used in the default UI to hide the confirmation window for such if the player moves too far away from the NPC.</Description>
    <ReturnList Name="inRange">
      <Description>1 if the player is in range of an NPC that can set the Hearthstone location; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CheckInbox" Priority="0" ImageType="Method">
    <Signature>CheckInbox()</Signature>
    <Description>Requests information on the player's mailbox contents from the server. Information is not returned immediately; the MAIL_INBOX_UPDATE event fires when data becomes available for use by other Mail/Inbox API functions.</Description>
  </WowApi>
  <WowApi Name="CheckInteractDistance" Priority="0" ImageType="Method">
    <Signature>canInteract = CheckInteractDistance("unit", distIndex)</Signature>
    <Description>Returns whether the player is close enough to a unit for certain types of interaction</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="distIndex">
      <Description>Number identifying one of the following action types (number)
1 - Inspect
2 - Trade
3 - Duel
4 - Follow</Description>
    </ArgumentList>
    <ReturnList Name="canInteract">
      <Description>1 if the player is close enough to the other unit to perform the action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CheckSpiritHealerDist" Priority="0" ImageType="Method">
    <Signature>inRange = CheckSpiritHealerDist()</Signature>
    <Description>Returns whether the player is in range of a spirit healer. Usable following the CONFIRM_XP_LOSS event which fires upon speaking to a spirit healer while dead and choosing the option to immediately resurrect. Used in the default UI to hide the confirmation window for such if the player moves too far away from the spirit healer.</Description>
    <ReturnList Name="inRange">
      <Description>1 if the player is in range of a spirit healer; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CheckTalentMasterDist" Priority="0" ImageType="Method">
    <Signature>inRange = CheckTalentMasterDist()</Signature>
    <Description>Returns whether the player is in range of an NPC that can reset talents. Usable following the CONFIRM_TALENT_WIPE event which fires when the player speaks to an trainer NPC and chooses to reset his or her talents. Used in the default UI to hide the confirmation window for such if the player moves too far away from the NPC.</Description>
    <ReturnList Name="inRange">
      <Description>1 if the player is in range of a talent trainer; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ClearAchievementComparisonUnit" Priority="0" ImageType="Method">
    <Signature>ClearAchievementComparisonUnit()</Signature>
    <Description>Disables comparing achievements/statistics with another player</Description>
  </WowApi>
  <WowApi Name="ClearAllLFGDungeons" Priority="0" ImageType="Method">
    <Signature>ClearAllLFGDungeons()</Signature>
    <Description>Removes the player from all LFD queues.</Description>
  </WowApi>
  <WowApi Name="ClearAllTracking" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearAutoAcceptQuestSound" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearBattlemaster" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearBlacklistMap" Priority="0" ImageType="Method">
    <Signature>ClearBlacklistMap(BGMapID)</Signature>
    <Description>Remove battleground from blacklist.</Description>
    <ArgumentList Name="BGMapID">
      <Description>ID number of battleground (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClearChannelWatch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearCursor" Priority="0" ImageType="Method">
    <Signature>ClearCursor()</Signature>
    <Description>Clears any contents attached to the cursor. If the cursor contains an item picked up from inventory (equipment slots) or a container, the item returns to its point of origin and the inventory or container slot is unlocked. (To destroy an item, see DeleteCursorItem()).
If the cursor contains an action, that action is deleted (but not the spell, item, macro, etc that it represents).
If the cursor contains any other data type, nothing happens other than the cursor being reverted to its default state -- picking up such objects has no effect on their points of origin.</Description>
  </WowApi>
  <WowApi Name="ClearFocus" Priority="0" ImageType="Method">
    <Signature>ClearFocus()</Signature>
    <Description>Clears the player's focus unit</Description>
  </WowApi>
  <WowApi Name="ClearInspectPlayer" Priority="0" ImageType="Method">
    <Signature>ClearInspectPlayer()</Signature>
    <Description>Ends inspection of another character. After this function is called, data about the inspected unit may not be available or valid.
Used in the default UI when the InspectFrame is hidden. </Description>
  </WowApi>
  <WowApi Name="ClearItemUpgrade" Priority="0" ImageType="Method">
    <Signature>ClearItemUpgrade()</Signature>
    <Description>Removes the item from the upgrade dialog. This function can currently only be called when at the upgrade merchant</Description>
  </WowApi>
  <WowApi Name="ClearMissingLootDisplay" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearOverrideBindings" Priority="0" ImageType="Method">
    <Signature>ClearOverrideBindings(owner)</Signature>
    <Description>Clears any registered override bindings for a given owner. An override binding is a temporary key or click binding that can be used to override the default bindings. The bound key will revert to its normal setting once the override has been removed.</Description>
    <ArgumentList Name="owner">
      <Description>A Frame (or other widget) object for which override bindings are registered (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClearPartyAssignment" Priority="0" ImageType="Method">
    <Signature>ClearPartyAssignment("assignment" [, "unit"]) or ClearPartyAssignment("assignment" [, "name" [, exactMatch]])</Signature>
    <Description>Removes a group role assignment from a member of the player's party or raid. If no unit (or name) is given, removes the role assignment from all members of the party or raid.</Description>
    <ArgumentList Name="assignment">
      <Description>A group role to assign to the unit (string)
MAINASSIST - Remove the main assist role
MAINTANK - Remove the main tank role</Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="ClearRaidMarker" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearSendMail" Priority="0" ImageType="Method">
    <Signature>ClearSendMail()</Signature>
    <Description>Clears any text, items, or money from the mail to be sent</Description>
  </WowApi>
  <WowApi Name="ClearTarget" Priority="0" ImageType="Method">
    <Signature>ClearTarget()</Signature>
    <Description>Clears the player's current target</Description>
  </WowApi>
  <WowApi Name="ClearTransmogrifySlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClearTutorials" Priority="0" ImageType="Method">
    <Signature>ClearTutorials()</Signature>
    <Description>Disables contextual tutorial display</Description>
  </WowApi>
  <WowApi Name="ClearVoidTransferDepositSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClickAuctionSellItemButton" Priority="0" ImageType="Method">
    <Signature>ClickAuctionSellItemButton()</Signature>
    <Description>Picks up an item from or puts an item into the "Create Auction" slot. If the cursor is empty and the slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the slot are exchanged.
Only has effect if the player is interacting with an auctioneer (i.e. between the AUCTION_HOUSE_SHOW and AUCTION_HOUSE_CLOSED events). Causes an error message (UI_ERROR_MESSAGE) if the item on the cursor cannot be put up for auction (e.g. if the item is soulbound).</Description>
  </WowApi>
  <WowApi Name="ClickLandmark" Priority="0" ImageType="Method">
    <Signature>ClickLandmark(mapLinkID)</Signature>
    <Description>Processes a hyperlink associated with a map landmark. Possible landmarks include PvP objectives (both in battlegrounds and in world PvP areas), town and city markers on continent maps, and special markers such as those used during the Scourge Invasion world event. Some landmarks (such as those for towns on a zone map) exist but are not visible in the default UI.
Hyperlinks are not used for any of the landmarks currently in the game; this function does nothing when called with a landmark which does not have a hyperlink.</Description>
    <ArgumentList Name="mapLinkID">
      <Description>Hyperlink ID associated with a map landmark, as retrieved from GetMapLandmarkInfo() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClickSendMailItemButton" Priority="0" ImageType="Method">
    <Signature>ClickSendMailItemButton(index, autoReturn)</Signature>
    <Description>Picks up an item from or puts an item into an attachment slot for sending mail. If the cursor is empty and the mail attachment slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the mail attachment slot are exchanged.
Only has effect if the player is interacting with a mailbox (i.e. between the MAIL_SHOW and MAIL_CLOSED events). Causes an error message (UI_ERROR_MESSAGE) if an invalid mail attachment slot is specified or if the item on the cursor cannot be mailed (e.g. if the item is soulbound).</Description>
    <ArgumentList Name="index">
      <Description>Index of a mail attachment slot (between 1 and ATTACHMENTS_MAX_SEND) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="autoReturn">
      <Description>True to automatically return the item in the given attachment slot to the player's bags; false or omitted to put the item on the cursor (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClickSocketButton" Priority="0" ImageType="Method">
    <Signature>ClickSocketButton(index)</Signature>
    <Description>Picks up or places a gem in the Item Socketing UI. If the Item Socketing UI is open and the cursor contains a socketable gem, places the gem into socket index. If the cursor does not hold an item and socket index is not locked, picks up the gem in that socket.
Only has an effect while the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a gem socket (between 1 and GetNumSockets()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClickTargetTradeButton" Priority="0" ImageType="Method">
    <Signature>ClickTargetTradeButton(index)</Signature>
    <Description>Interacts with an item in a slot offered for trade by the target. Only meaningful when used with the last (7th) trade slot: if an enchantment-type spell is currently awaiting a target (i.e. the glowing hand cursor is showing), targets the item in the given trade slot for the enchantment. (The enchantment to be applied then shows for both parties in the trade, but is not actually performed until both parties accept the trade.)</Description>
    <ArgumentList Name="index">
      <Description>Index of an item slot on the target's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClickTradeButton" Priority="0" ImageType="Method">
    <Signature>ClickTradeButton(index)</Signature>
    <Description>Picks up an item from or puts an item in a slot offered for trade by the player. Results vary by context:
If an item is on the cursor and no item is in the trade slot, the item is put into the trade slot and the cursor becomes empty
If no item is on the cursor and an item is in the trade slot, the item is put on the cursor and removed from the trade slot
If an item is on the cursor and an item is in the trade slot, the item from the cursor is put into the trade slot and the item from the trade slot is put on the cursor
If both cursor and trade slot are empty, nothing happens </Description>
    <ArgumentList Name="index">
      <Description>Index of an item slot on the player's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ClickTransmogrifySlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClickVoidStorageSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClickVoidTransferDepositSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ClickVoidTransferWithdrawalSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CloseArenaTeamRoster" Priority="0" ImageType="Method">
    <Signature>CloseArenaTeamRoster()</Signature>
    <Description>Ends interaction with the Arena Team Roster. Called in the default UI when closing the Arena Team Roster frame. After this function is called, roster information functions may no longer return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseAuctionHouse" Priority="0" ImageType="Method">
    <Signature>CloseAuctionHouse()</Signature>
    <Description>Ends interaction with the Auction House UI. Causes the AUCTION_HOUSE_CLOSED event to fire, indicating that Auction-related APIs may be unavailable or no longer return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseBankFrame" Priority="0" ImageType="Method">
    <Signature>CloseBankFrame()</Signature>
    <Description>Ends interaction with the bank. Causes the BANKFRAME_CLOSED event to fire, indicating that APIs querying bank contents may no longer return valid results.</Description>
  </WowApi>
  <WowApi Name="CloseGossip" Priority="0" ImageType="Method">
    <Signature>CloseGossip()</Signature>
    <Description>Ends an NPC "gossip" interaction. Causes the GOSSIP_CLOSED event to fire, indicating that Gossip APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseGuildBankFrame" Priority="0" ImageType="Method">
    <Signature>CloseGuildBankFrame()</Signature>
    <Description>Ends interaction with the guild bank vault. Fires the GUILDBANKFRAME_CLOSED event, indicating that APIs related to the Guild Bank vault may no longer have effects or return valid data. (APIs related to guild bank permissions are still usable.)</Description>
  </WowApi>
  <WowApi Name="CloseGuildRegistrar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CloseGuildRoster" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CloseItemText" Priority="0" ImageType="Method">
    <Signature>CloseItemText()</Signature>
    <Description>Ends interaction with a text object or item. Causes the ITEM_TEXT_CLOSED event to fire, indicating that ItemText APIs are no longer valid.
Called by the default UI when closing the ItemTextFrame, which is used for both readable world objects (books, plaques, gravestones, etc) and readable items (looted books, various quest-related scrolls and parchments, saved mail messages, etc).</Description>
  </WowApi>
  <WowApi Name="CloseItemUpgrade" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CloseLoot" Priority="0" ImageType="Method">
    <Signature>CloseLoot()</Signature>
    <Description>Ends interaction with a lootable corpse or object. Causes the LOOT_CLOSED event to fire, indicating that Loot APIs may no longer have effects or return valid data.
If the corpse was designated as the player's loot (via the Round Robin, Group Loot, or Need Before Greed loot methods), the corpse's loot becomes available to the rest of the group. If (and only if) the loot was generated from Disenchanting, Prospecting, Milling or similar, all loot items are automatically picked up.</Description>
  </WowApi>
  <WowApi Name="CloseMail" Priority="0" ImageType="Method">
    <Signature>CloseMail()</Signature>
    <Description>Ends interaction with a mailbox. Fires the MAIL_CLOSED event, indicating that Mail/Inbox APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseMerchant" Priority="0" ImageType="Method">
    <Signature>CloseMerchant()</Signature>
    <Description>Ends interaction with a vendor. Causes the MERCHANT_CLOSED event to fire, indicating that Merchant APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="ClosePetStables" Priority="0" ImageType="Method">
    <Signature>ClosePetStables()</Signature>
    <Description>Ends use of the Pet Stables UI/API. Causes the PET_STABLE_CLOSED event to fire, indicating that stables-related APIs are no longer valid.</Description>
  </WowApi>
  <WowApi Name="ClosePetition" Priority="0" ImageType="Method">
    <Signature>ClosePetition()</Signature>
    <Description>Ends interaction with a petition. Fires the PETITION_CLOSED event, indicating that Petition APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseQuest" Priority="0" ImageType="Method">
    <Signature>CloseQuest()</Signature>
    <Description>Ends interaction with a questgiver. Fires the QUEST_FINISHED event, indicating that questgiver-related APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseReforge" Priority="0" ImageType="Method">
    <Signature>CloseReforge()</Signature>
    <Description>Closes the reforge window.. With the reforge window open (via clicking on the Arcane Reforger NPC), this function will close that window. If the function is used at any other time, it has no effect. It takes no arguments and returns no value.</Description>
  </WowApi>
  <WowApi Name="CloseResearch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CloseSocketInfo" Priority="0" ImageType="Method">
    <Signature>CloseSocketInfo()</Signature>
    <Description>Ends interaction with the Item Socketing UI, discarding any changes made. Causes the SOCKET_INFO_CLOSE event to fire, indicating that Socket API functions may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseTabardCreation" Priority="0" ImageType="Method">
    <Signature>CloseTabardCreation()</Signature>
    <Description>Ends interaction with the guild tabard creator. Fires the CLOSE_TABARD_FRAME event, indicating that tabard creation APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseTaxiMap" Priority="0" ImageType="Method">
    <Signature>CloseTaxiMap()</Signature>
    <Description>Ends interaction with the Taxi (flight master) UI. Causes the TAXIMAP_CLOSED event to fire, indicating that Taxi APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseTrade" Priority="0" ImageType="Method">
    <Signature>CloseTrade()</Signature>
    <Description>Ends interaction with the Trade UI, canceling any trade in progress. Causes the TRADE_CLOSED event to fire, indicating that Trade APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseTradeSkill" Priority="0" ImageType="Method">
    <Signature>CloseTradeSkill()</Signature>
    <Description>Ends interaction with the Trade Skill UI. Fires the TRADE_SKILL_CLOSE event, indicating that TradeSkill APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseTrainer" Priority="0" ImageType="Method">
    <Signature>CloseTrainer()</Signature>
    <Description>Ends interaction with a trainer. Fires the TRAINER_CLOSED event, indicating that Trainer APIs may no longer have effects or return valid data.</Description>
  </WowApi>
  <WowApi Name="CloseTransmogrifyFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CloseVoidStorageFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CollapseAllFactionHeaders" Priority="0" ImageType="Method">
    <Signature>CollapseAllFactionHeaders()</Signature>
    <Description>Collapses all headers and sub-headers in the Reputation UI. This function works for both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).</Description>
  </WowApi>
  <WowApi Name="CollapseChannelHeader" Priority="0" ImageType="Method">
    <Signature>CollapseChannelHeader(index)</Signature>
    <Description>Collapses a group header in the chat channel listing</Description>
    <ArgumentList Name="index">
      <Description>Index of a header in the display channel list (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CollapseFactionHeader" Priority="0" ImageType="Method">
    <Signature>CollapseFactionHeader(index)</Signature>
    <Description>Collapses a given faction header or sub-header in the Reputation UI.
Faction headers include both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CollapseGuildTradeSkillHeader" Priority="0" ImageType="Method">
    <Signature>CollapseGuildTradeSkillHeader(professionID)</Signature>
    <Description>Collapses the corresponding profession in the guild window. This function is used to collapse a single profession in the guild window (professions view) based on its ID. Can also be done while window is not visible. See ExpandGuildTradeSkillHeader() for opening the view.</Description>
    <ArgumentList Name="professionID">
      <Description>The ID of the corresponding profession (number)
164 - Blacksmithing
165 - Leatherworking
171 - Alchemy
182 - Herbalism
186 - Mining
197 - Tailoring
202 - Engineering
333 - Enchanting
393 - Skinning
755 - Jewelcrafting
773 - Inscription</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CollapseQuestHeader" Priority="0" ImageType="Method">
    <Signature>CollapseQuestHeader(questIndex)</Signature>
    <Description>Collapses a header in the quest log</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a header in the quest log (between 1 and GetNumQuestLogEntries()), or 0 to collapse all headers (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CollapseTradeSkillSubClass" Priority="0" ImageType="Method">
    <Signature>CollapseTradeSkillSubClass(index)</Signature>
    <Description>Collapses a group header in the trade skill listing. Causes an error if index does not refer to a header.</Description>
    <ArgumentList Name="index">
      <Description>Index of a header in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CollapseWarGameHeader" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLogAddFilter" Priority="0" ImageType="Method">
    <Signature>CombatLogAddFilter("events", "srcGUID", ["destGUID"] or [destMask]) or CombatLogAddFilter("events", srcMask, ["destGUID"] or [destMask]) or CombatLogAddFilter("events", ["srcGUID"] or [srcMask], "destGUID") or CombatLogAddFilter("events", ["srcGUID"] or [srcMask], destMask)</Signature>
    <Description>Adds a filter to the combat log system. Each time this function is called a new filter is added to the combat log system. Any combat log entry that passes the filter will be fired as a COMBAT_LOG_EVENT event in order from oldest to newest.</Description>
    <ArgumentList Name="events">
      <Description>Name of a combat log event type to include in the filtered list, or a comma-separated list of multiple names (string) </Description>
    </ArgumentList>
    <ArgumentList Name="srcGUID">
      <Description>GUID of the source unit (string, guid) </Description>
    </ArgumentList>
    <ArgumentList Name="srcMask">
      <Description>Bit mask of the source unit (number, bitfield) </Description>
    </ArgumentList>
    <ArgumentList Name="destGUID">
      <Description>GUID of the destination unit (string, guid) </Description>
    </ArgumentList>
    <ArgumentList Name="destMask">
      <Description>Bit mask of the destination unit (number, bitfield) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CombatLogAdvanceEntry" Priority="0" ImageType="Method">
    <Signature>hasEntry = CombatLogAdvanceEntry(count, ignoreFilter)</Signature>
    <Description>Advances the "cursor" position used by other CombatLog functions. Information about the entry at the "cursor" position can be retrieved with CombatLogGetCurrentEntry(). That function then advances the cursor to the next entry, so calling it repeatedly returns all information in the combat log -- this function can be used to "rewind" the combat log to retrieve information about earlier events or skip entries without retrieving their information.</Description>
    <ArgumentList Name="count">
      <Description>Number of entries by which to advance the "cursor"; can be negative to move to a previous entry (number) </Description>
    </ArgumentList>
    <ArgumentList Name="ignoreFilter">
      <Description>True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="hasEntry">
      <Description>1 if an entry exists at the new cursor position; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CombatLogClearEntries" Priority="0" ImageType="Method">
    <Signature>CombatLogClearEntries()</Signature>
    <Description>Removes all entries from the combat log</Description>
  </WowApi>
  <WowApi Name="CombatLogGetCurrentEntry" Priority="0" ImageType="Method">
    <Signature>timestamp, event, srcGUID, srcName, srcFlags, destGUID, destName, destFlags, ... = CombatLogGetCurrentEntry([ignoreFilter])</Signature>
    <Description>Returns the combat log event information for the current entry and advances to the next entry. See COMBAT_LOG_EVENT for details of the event information.
The combat log maintains a "cursor" in the list of entries; this function returns information about the event at the cursor position and advances the cursor to the next entry. Since this function is used by the default UI's combat log display, the cursor position is usually at the end of the log -- calling it thus returns nothing. The function CombatLogSetCurrentEntry() can be used to "rewind" the combat log cursor, enabling retrieval of information about earlier events.</Description>
    <ArgumentList Name="ignoreFilter">
      <Description>True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="timestamp">
      <Description>Time at which the event occurred (same format as time() and date(), but with millisecond precision) (number) </Description>
    </ReturnList>
    <ReturnList Name="event">
      <Description>Type of combat log event (string) </Description>
    </ReturnList>
    <ReturnList Name="srcGUID">
      <Description>GUID of the unit that initiated the event (string, guid) </Description>
    </ReturnList>
    <ReturnList Name="srcName">
      <Description>Name of the unit that initiated the event (string) </Description>
    </ReturnList>
    <ReturnList Name="srcFlags">
      <Description>Flags indicating the nature of the source unit (number, bitfield) </Description>
    </ReturnList>
    <ReturnList Name="destGUID">
      <Description>GUID of the unit that was the target of the event (string, guid) </Description>
    </ReturnList>
    <ReturnList Name="destName">
      <Description>Name of the unit that was the target of the event (string) </Description>
    </ReturnList>
    <ReturnList Name="destFlags">
      <Description>Flags indicating the nature of the target unit (number, bitfield) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional arguments specific to the event type (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CombatLogGetNumEntries" Priority="0" ImageType="Method">
    <Signature>CombatLogGetNumEntries(ignoreFilter)</Signature>
    <Description>Returns the number of available combat log events</Description>
    <ArgumentList Name="ignoreFilter">
      <Description>True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CombatLogGetRetentionTime" Priority="0" ImageType="Method">
    <Signature>seconds = CombatLogGetRetentionTime()</Signature>
    <Description>Returns the amount of time combat log entries are stored</Description>
    <ReturnList Name="seconds">
      <Description>Amount of time entries remain available (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CombatLogResetFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLogSetCurrentEntry" Priority="0" ImageType="Method">
    <Signature>CombatLogSetCurrentEntry(index [, ignoreFilter])</Signature>
    <Description>Sets the "cursor" position used by other CombatLog functions. Information about the entry at the "cursor" position can be retrieved with CombatLogGetCurrentEntry(). That function then advances the cursor to the next entry, so calling it repeatedly returns all information in the combat log -- this function can be used to "rewind" the combat log to retrieve information about earlier events.
The argument index can be positive or negative: positive indices start at the beginning of the combat log (oldest events) and count up to the end (newest events); negative indices start at -1 for the newest event and count backwards to to -CombatLogGetNumEntries(ignoreFilter) for the oldest.</Description>
    <ArgumentList Name="index">
      <Description>Index of a combat log event (between 1 and CombatLogGetNumEntries(ignoreFilter), or between -1 and -CombatLogGetNumEntries(ignoreFilter)) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="ignoreFilter">
      <Description>True to use the entire saved combat log history; false or omitted to use only events matching the current filter (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CombatLogSetRetentionTime" Priority="0" ImageType="Method">
    <Signature>CombatLogSetRetentionTime(seconds)</Signature>
    <Description>Sets the amount of time combat log entries will be stored</Description>
    <ArgumentList Name="seconds">
      <Description>The desired time (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CombatLog_Color_ColorArrayByEventType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_ColorArrayBySchool" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_ColorArrayByUnitType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_ColorStringByEventType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_ColorStringBySchool" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_ColorStringByUnitType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_FloatToText" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Color_HighlightColorArray" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_Object_IsA" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_OnEvent" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_String_DamageResultString" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_String_GetIcon" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_String_GetToken" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_String_PowerType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatLog_String_SchoolString" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CombatTextSetActiveUnit" Priority="0" ImageType="Method">
    <Signature>CombatTextSetActiveUnit(unit)</Signature>
    <Description>Sets the main unit for display of floating combat text.
Certain types of floating combat text are only displayed for the "active" unit (normally the player): incoming damage, incoming heals, mana/energy/power gains, low health/mana warnings, etc. This function is used by the default UI to allow the player's vehicle to "stand in" for the player for purposes of combat text; using this function with units other than "player" or "vehicle" has no effect.</Description>
    <ArgumentList Name="unit">
      <Description>Unit to show main combat text for (unitid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CommentatorAddPlayer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorEnterInstance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorExitInstance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorFollowPlayer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetCamera" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetCurrentMapID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetInstanceInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetNumMaps" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetNumPlayers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetPartyInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetPlayerInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetSkirmishMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetSkirmishQueueCount" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorGetSkirmishQueuePlayerInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorLookatPlayer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorRemovePlayer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorRequestSkirmishMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorRequestSkirmishQueueData" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetBattlemaster" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetCamera" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetCameraCollision" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetMapAndInstanceIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetMoveSpeed" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetPlayerIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetSkirmishMatchmakingMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorSetTargetHeightOffset" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorStartInstance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorStartSkirmishMatch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorStartWargame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorToggleMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorUpdateMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorUpdatePlayerInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorZoomIn" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CommentatorZoomOut" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ComplainInboxItem" Priority="0" ImageType="Method">
    <Signature>ComplainInboxItem(mailID)</Signature>
    <Description>Reports a mail as spam</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CompleteLFGRoleCheck" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CompleteQuest" Priority="0" ImageType="Method">
    <Signature>CompleteQuest()</Signature>
    <Description>Begins turning in a quest to a questgiver. Usable following the QUEST_PROGRESS event in which it is determined whether the player can complete the quest.
Does not complete the quest turn-in process; after calling this function, the QUEST_COMPLETE event fires as the questgiver presents rewards (or sometimes only closure to the quest narrative); following that event, the GetQuestReward() function finishes the turn-in.</Description>
  </WowApi>
  <WowApi Name="ConfirmAcceptQuest" Priority="0" ImageType="Method">
    <Signature>ConfirmAcceptQuest()</Signature>
    <Description>Accepts a quest started by another group member. Usable following the QUEST_ACCEPT_CONFIRM event which fires when another member of the player's party or raid starts certain quests (e.g. escort quests).</Description>
  </WowApi>
  <WowApi Name="ConfirmBindOnUse" Priority="0" ImageType="Method">
    <Signature>ConfirmBindOnUse()</Signature>
    <Description>Confirms using an item, if using the item causes it to become soulbound. Usable in response to the USE_BIND_CONFIRM which fires when the player attempts to use a "Bind on Use" item.</Description>
  </WowApi>
  <WowApi Name="ConfirmBinder" Priority="0" ImageType="Method">
    <Signature>ConfirmBinder()</Signature>
    <Description>Sets the player's Hearthstone to the current location. Usable in response to the CONFIRM_BINDER event which fires upon speaking to an Innkeeper (or similar NPC) and choosing the Hearthstone option.</Description>
  </WowApi>
  <WowApi Name="ConfirmLootRoll" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ConfirmLootSlot" Priority="0" ImageType="Method">
    <Signature>ConfirmLootSlot(slot)</Signature>
    <Description>Confirms picking up an item available as loot. Usable after the LOOT_BIND_CONFIRM event fires, warning that an item binds on pickup.</Description>
    <ArgumentList Name="slot">
      <Description>Index of a loot slot (between 1 and GetNumLootItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ConfirmOnUse" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ConfirmReadyCheck" Priority="0" ImageType="Method">
    <Signature>ConfirmReadyCheck(ready)</Signature>
    <Description>Responds to a ready check</Description>
    <ArgumentList Name="ready">
      <Description>True to report as "ready"; false to report as "not ready" (true) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ConfirmSummon" Priority="0" ImageType="Method">
    <Signature>ConfirmSummon()</Signature>
    <Description>Accepts an offered summons, teleporting the player to the summoner's location. Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.</Description>
  </WowApi>
  <WowApi Name="ConfirmTalentWipe" Priority="0" ImageType="Method">
    <Signature>ConfirmTalentWipe()</Signature>
    <Description>Resets the player's talents. Usable following the CONFIRM_TALENT_WIPE event which fires when the player speaks to an trainer NPC and chooses to reset his or her talents.</Description>
  </WowApi>
  <WowApi Name="ConsoleAddMessage" Priority="0" ImageType="Method">
    <Signature>ConsoleAddMessage()</Signature>
    <Description>Prints text to the debug console.
The debugging console can be activated by launching WoW from the command line with the "-console" option, then pressing the "`" (backtick/tilde) key ingame. Its usefulness outside of Blizzard internal environments is limited.</Description>
  </WowApi>
  <WowApi Name="ConsoleExec" Priority="0" ImageType="Method">
    <Signature>ConsoleExec("console_command")</Signature>
    <Description>Runs a console command. Used by the default UI to handle /console commands.</Description>
    <ArgumentList Name="console_command">
      <Description>The console command to run (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ContainerIDToInventoryID" Priority="0" ImageType="Method">
    <Signature>inventoryID = ContainerIDToInventoryID(container)</Signature>
    <Description>Returns the inventoryID corresponding to a given containerID. The results of this function can be used with GetInventorySlotInfo() and other related inventory functions.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ReturnList Name="inventoryID">
      <Description>Identifier for the container usable with Inventory APIs (number, inventoryID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ContainerRefundItemPurchase" Priority="0" ImageType="Method">
    <Signature>ContainerRefundItemPurchase(container, slot)</Signature>
    <Description>Sells an item purchased with alternate currency back to a vendor. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ConvertToParty" Priority="0" ImageType="Method">
    <Signature>ConvertToParty()</Signature>
    <Description>Converts a raid to a party. Only has effect if the player is in a raid of a maximum of 5 players and is the raid leader.</Description>
  </WowApi>
  <WowApi Name="ConvertToRaid" Priority="0" ImageType="Method">
    <Signature>ConvertToRaid()</Signature>
    <Description>Converts a party to a raid. Only has effect if the player is in a party and the party leader.</Description>
  </WowApi>
  <WowApi Name="CreateArenaTeam" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CreateFont" Priority="0" ImageType="Method">
    <Signature>fontObject = CreateFont("name")</Signature>
    <Description>Creates a new Font object</Description>
    <ArgumentList Name="name">
      <Description>Name to assign to the newly created object; used both as the name of the object (retrievable with Font:GetName()) and as a global variable referencing the object (unless another global by that name already exists) (string) </Description>
    </ArgumentList>
    <ReturnList Name="fontObject">
      <Description>The newly created Font object (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CreateFrame" Priority="0" ImageType="Method">
    <Signature>frame = CreateFrame("frameType" [, "name" [, parent [, "template"]]])</Signature>
    <Description>Creates a new Frame object</Description>
    <ArgumentList Name="frameType">
      <Description>Type of frame to create; see the widget documentation for details (string) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name to assign to the newly created object; used both as the name of the object (retrievable via the GetName method) and as a global variable referencing the object, unless another global by that name already exists (string) </Description>
    </ArgumentList>
    <ArgumentList Name="parent">
      <Description>Reference to another frame to be the new frame's parent (table) </Description>
    </ArgumentList>
    <ArgumentList Name="template">
      <Description>Name of a template to be used in creating the frame; if creating a frame from multiple templates, a comma-separated list of names (string) </Description>
    </ArgumentList>
    <ReturnList Name="frame">
      <Description>A reference to the newly created Frame (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CreateMacro" Priority="0" ImageType="Method">
    <Signature>index = CreateMacro("name", "iconTexture", "body", perCharacter)</Signature>
    <Description>Creates a new macro. Warning: Will throw an error if the quota of allowed macros is already met.</Description>
    <ArgumentList Name="name">
      <Description>Name for the new macro (up to 16 characters); need not be unique, though duplicate names can cause issues for other Macro API functions (string) </Description>
    </ArgumentList>
    <ArgumentList Name="iconTexture">
      <Description>name of icon texture (string) </Description>
    </ArgumentList>
    <ArgumentList Name="body">
      <Description>Body of the macro (up to 255 characters) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="perCharacter">
      <Description>1 if the macro should be stored as a character-specific macro; otherwise nil (1nil) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of the newly created macro (number, macroID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CreateMiniWorldMapArrowFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CreateNewRaidProfile" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CreateWorldMapArrowFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="CursorCanGoInSlot" Priority="0" ImageType="Method">
    <Signature>canBePlaced = CursorCanGoInSlot(slot)</Signature>
    <Description>Returns whether the item on the cursor can be equipped in an inventory slot. Returns nil if the cursor is empty or contains something other than an item.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="canBePlaced">
      <Description>1 if the item on the cursor can be equipped in the given slot; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CursorHasItem" Priority="0" ImageType="Method">
    <Signature>hasItem = CursorHasItem()</Signature>
    <Description>Returns whether an item belonging to the player is on the cursor. See GetCursorInfo() for more detailed information.</Description>
    <ReturnList Name="hasItem">
      <Description>1 if the cursor is currently holding an item that the player owns; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CursorHasMacro" Priority="0" ImageType="Method">
    <Signature>hasMacro = CursorHasMacro()</Signature>
    <Description>Returns whether a macro is on the cursor. See GetCursorInfo() for more detailed information.</Description>
    <ReturnList Name="hasMacro">
      <Description>1 if the cursor is currently holding a macro; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CursorHasMoney" Priority="0" ImageType="Method">
    <Signature>hasMoney = CursorHasMoney()</Signature>
    <Description>Returns whether an amount of the player's money is on the cursor. Returns nil if the cursor holds guild bank money. See GetCursorInfo() for more detailed information.</Description>
    <ReturnList Name="hasMoney">
      <Description>1 if the cursor is currently holding an amount of the player's money; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CursorHasSpell" Priority="0" ImageType="Method">
    <Signature>hasSpell = CursorHasSpell()</Signature>
    <Description>Returns whether a spell is on the cursor. See GetCursorInfo() for more detailed information.</Description>
    <ReturnList Name="hasSpell">
      <Description>1 if the cursor is currently holding a spell; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="DeclineArenaTeam" Priority="0" ImageType="Method">
    <Signature>DeclineArenaTeam()</Signature>
    <Description>Declines an arena team invitation</Description>
  </WowApi>
  <WowApi Name="DeclineGroup" Priority="0" ImageType="Method">
    <Signature>DeclineGroup()</Signature>
    <Description>Declines an invitation to join a party or raid. Usable in response to the PARTY_INVITE_REQUEST event which fires when the player is invited to join a group.</Description>
  </WowApi>
  <WowApi Name="DeclineGuild" Priority="0" ImageType="Method">
    <Signature>DeclineGuild()</Signature>
    <Description>Declines an offered guild invitation. Usable in response to the GUILD_INVITE_REQUEST event which fires when the player is invited to join a guild.</Description>
  </WowApi>
  <WowApi Name="DeclineGuildApplicant" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="DeclineInvite" Priority="0" ImageType="Method">
    <Signature>DeclineInvite("channel")</Signature>
    <Description>Declines an invitation to a chat channel. Usable in response to the CHANNEL_INVITE_REQUEST event which fires when the player is invited to join a chat channel.</Description>
    <ArgumentList Name="channel">
      <Description>Name of a chat channel (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DeclineLevelGrant" Priority="0" ImageType="Method">
    <Signature>DeclineLevelGrant()</Signature>
    <Description>Refuses a level offered by the player's Recruit-a-Friend partner</Description>
  </WowApi>
  <WowApi Name="DeclineName" Priority="0" ImageType="Method">
    <Signature>genitive, dative, accusative, instrumental, prepositional = DeclineName("name", gender, declensionSet)</Signature>
    <Description>Returns suggested declensions for a name. In the Russian language, nouns (including proper names) take different form based on their usage in a sentence. When the player enters the base name for a character or pet, the game suggests one or more sets of variations for the five additional cases; the player is asked to choose from among the suggestions and/or enter their own. (The set of declensions ultimately chosen/entered by the player are only used internally and not available to addons.)
Has no effect in non-Russian-localized clients.</Description>
    <ArgumentList Name="name">
      <Description>Nominative form of the player's or pet's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="gender">
      <Description>Gender for the returned names (for declensions of the player's name, should match the player's gender; for the pet's name, should be neuter) (number)
1or nil - Neuter
2 - Male
3 - Female</Description>
    </ArgumentList>
    <ArgumentList Name="declensionSet">
      <Description>Index of a set of suggested declensions (between 1 and GetNumDeclensionSets(name,gender). Lower indices correspond to "better" suggestions for the given name. (number) </Description>
    </ArgumentList>
    <ReturnList Name="genitive">
      <Description>Genitive form of the name (string) </Description>
    </ReturnList>
    <ReturnList Name="dative">
      <Description>Dative form of the name (string) </Description>
    </ReturnList>
    <ReturnList Name="accusative">
      <Description>Accusative form of the name (string) </Description>
    </ReturnList>
    <ReturnList Name="instrumental">
      <Description>Instrumental form of the name (string) </Description>
    </ReturnList>
    <ReturnList Name="prepositional">
      <Description>Prepositional form of the name (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="DeclineQuest" Priority="0" ImageType="Method">
    <Signature>DeclineQuest()</Signature>
    <Description>Declines a quest.. Usable following the QUEST_DETAIL event in which the questgiver presents the player with the details of a quest and the option to accept or decline.</Description>
  </WowApi>
  <WowApi Name="DeclineResurrect" Priority="0" ImageType="Method">
    <Signature>DeclineResurrect()</Signature>
    <Description>Declines an offered resurrection spell. Usable following the RESURRECT_REQUEST event which fires when the player is offered resurrection by another unit.</Description>
  </WowApi>
  <WowApi Name="DeclineSpellConfirmationPrompt" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="DelIgnore" Priority="0" ImageType="Method">
    <Signature>DelIgnore("name")</Signature>
    <Description>Removes a player from the ignore list</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to remove from the ignore list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DelMute" Priority="0" ImageType="Method">
    <Signature>DelMute("name")</Signature>
    <Description>Removes a character from the muted list for voice chat. The Muted list acts for voice chat as the Ignore list does for text chat: muted characters will never be heard regardless of which voice channels they join the player in.</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to remove from the mute list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DeleteCursorItem" Priority="0" ImageType="Method">
    <Signature>DeleteCursorItem()</Signature>
    <Description>Destroys the item on the cursor. Used in the default UI when accepting the confirmation prompt that appears when dragging and dropping an item to an empty area of the screen.</Description>
  </WowApi>
  <WowApi Name="DeleteEquipmentSet" Priority="0" ImageType="Method">
    <Signature>DeleteEquipmentSet("name")</Signature>
    <Description>Deletes an equipment set</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DeleteGMTicket" Priority="0" ImageType="Method">
    <Signature>DeleteGMTicket()</Signature>
    <Description>Abandons the currently pending GM ticket</Description>
  </WowApi>
  <WowApi Name="DeleteInboxItem" Priority="0" ImageType="Method">
    <Signature>DeleteInboxItem(mailID)</Signature>
    <Description>Deletes a mail from the player's inbox</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DeleteMacro" Priority="0" ImageType="Method">
    <Signature>DeleteMacro(index) or DeleteMacro("name")</Signature>
    <Description>Deletes a macro</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DeleteRaidProfile" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="DemoteAssistant" Priority="0" ImageType="Method">
    <Signature>DemoteAssistant("unit") or DemoteAssistant("name" [, exactMatch])</Signature>
    <Description>Demotes the given player from raid assistant status</Description>
    <ArgumentList Name="unit">
      <Description>A unit in the raid (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit in the raid (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DepositGuildBankMoney" Priority="0" ImageType="Method">
    <Signature>DepositGuildBankMoney(money)</Signature>
    <Description>Deposits money into the guild bank</Description>
    <ArgumentList Name="money">
      <Description>Amount of money to deposit (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DescendStop" Priority="0" ImageType="Method">
    <Signature>DescendStop()</Signature>
    <Description>Stops movement initiated by SitStandOrDescendStart. Used by the SITORSTAND binding, which also controls descent when swimming or flying. Has no meaningful effect if called while sitting/standing.</Description>
  </WowApi>
  <WowApi Name="DestroyTotem" Priority="0" ImageType="Method">
    <Signature>DestroyTotem(slot)</Signature>
    <Description>Destroys a specific totem (or ghoul). Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).</Description>
    <ArgumentList Name="slot">
      <Description>Which totem to destroy (number)
1 - Fire (or Death Knight's ghoul)
2 - Earth
3 - Water
4 - Air</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DetectWowMouse" Priority="0" ImageType="Method">
    <Signature>DetectWowMouse()</Signature>
    <Description>Detects the presence of a "WoW" compatible multi-button mouse. This function is used by the default user interface to enable or disable the configuration option for a many buttoned WoW mouse. If the mouse is not found, the WOW_MOUSE_NOT_FOUND event will fire.</Description>
  </WowApi>
  <WowApi Name="DisableAddOn" Priority="0" ImageType="Method">
    <Signature>DisableAddOn("name") or DisableAddOn(index)</Signature>
    <Description>Marks an addon as disabled. The addon will remain active until the player logs out and back in or reloads the UI (see ReloadUI()). Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DisableAllAddOns" Priority="0" ImageType="Method">
    <Signature>DisableAllAddOns()</Signature>
    <Description>Marks all addons as disabled. Addons will remain active until the player logs out and back in or reloads the UI (see ReloadUI()).
Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.</Description>
  </WowApi>
  <WowApi Name="DisableSpellAutocast" Priority="0" ImageType="Method">
    <Signature>DisableSpellAutocast("spell")</Signature>
    <Description>Disables automatic casting of a pet spell</Description>
    <ArgumentList Name="spell">
      <Description>The name of a pet spell (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DismissCompanion" Priority="0" ImageType="Method">
    <Signature>DismissCompanion("type")</Signature>
    <Description>Unsummons the current non-combat pet or mount</Description>
    <ArgumentList Name="type">
      <Description>The type of companion (string)
CRITTER - Non-combat pet
MOUNT - Mount</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Dismount" Priority="0" ImageType="Method">
    <Signature>Dismount()</Signature>
    <Description>Dismounts from the player's summoned mount</Description>
  </WowApi>
  <WowApi Name="DisplayChannelOwner" Priority="0" ImageType="Method">
    <Signature>DisplayChannelOwner("channel") or DisplayChannelOwner(channelIndex)</Signature>
    <Description>Requests information from the server about a channel's owner. Fires the CHANNEL_OWNER event indicating the name of the channel owner.</Description>
    <ArgumentList Name="channel">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelIndex">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DisplayChannelVoiceOff" Priority="0" ImageType="Method">
    <Signature>DisplayChannelVoiceOff(index)</Signature>
    <Description>Disables voice in a channel specified by its position in the channel list display</Description>
    <ArgumentList Name="index">
      <Description>Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DisplayChannelVoiceOn" Priority="0" ImageType="Method">
    <Signature>DisplayChannelVoiceOn(index)</Signature>
    <Description>Enables voice in a channel specified by its position in the channel list display</Description>
    <ArgumentList Name="index">
      <Description>Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DoEmote" Priority="0" ImageType="Method">
    <Signature>DoEmote("emote" [, "target" [, hold]])</Signature>
    <Description>Performs a preset emote (with optional target). The list of built-in emote tokens can be found in global variables whose names follow the format "EMOTE"..num.."_TOKEN", where num is a number between 1 and MAXEMOTEINDEX (a variable local to ChatFrame.lua.)
For custom emotes (as performed using the /emote or /me commands in the default UI), see SendChatMessage().</Description>
    <ArgumentList Name="emote">
      <Description>Non-localized token identifying an emote to perform (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>Name of a unit at whom to direct the emote (string) </Description>
    </ArgumentList>
    <ArgumentList Name="hold">
      <Description>Hold the emote animation until cancelled (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DoMasterLootRoll" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="DoReadyCheck" Priority="0" ImageType="Method">
    <Signature>DoReadyCheck()</Signature>
    <Description>Initiates a ready check. Only has effect if the player is the party/raid leader or a raid assistant.</Description>
  </WowApi>
  <WowApi Name="DoTradeSkill" Priority="0" ImageType="Method">
    <Signature>DoTradeSkill(index [, repeat])</Signature>
    <Description>Performs a trade skill recipe</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="repeat">
      <Description>Number of times to repeat the recipe (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DownloadSettings" Priority="0" ImageType="Method">
    <Signature>DownloadSettings()</Signature>
    <Description>Restores game settings from a backup stored on the server. This function only works if server-synchronized settings are enabled. This is controlled by the synchronizeSettings CVar.</Description>
  </WowApi>
  <WowApi Name="DropCursorMoney" Priority="0" ImageType="Method">
    <Signature>DropCursorMoney()</Signature>
    <Description>Drops any money currently on the cursor, returning it to where it was taken from</Description>
  </WowApi>
  <WowApi Name="DropItemOnUnit" Priority="0" ImageType="Method">
    <Signature>DropItemOnUnit("unit") or DropItemOnUnit("name")</Signature>
    <Description>"Gives" the item on the cursor to another unit; results vary by context. If the unit is a friendly player, adds the item to the trade window (opening it if necessary, and placing it in the first available trade slot or the "will not be traded" slot depending on whether the item is soulbound). If the unit is the player's pet and the player is a Hunter, attempts to feed the item to the pet (since this casts the Feed Pet spell, in this case this action is protected and can only be called by the Blizzard user interface). For other units, nothing happens and the item remains on the cursor.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to receive the item (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to receive the item; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DungeonUsesTerrainMap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_ClearSearch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetCreatureInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetCurrentInstance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetCurrentTier" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetDifficulty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetEncounterInfo" Priority="0" ImageType="Method">
    <Signature>name, description, encounterID, firstSection, encounterLink = EJ_GetEncounterInfo(encounterID)</Signature>
    <Description>Displays encounter journal information for the encounter.</Description>
    <ArgumentList Name="encounterID">
      <Description>The unique ID of the encounter (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EJ_GetEncounterInfoByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetInstanceByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetInstanceInfo" Priority="0" ImageType="Method">
    <Signature>instanceName, instanceDesc, backgroundTexture, buttonTexture, titleBackground, mapID, instanceLink = EJ_GetInstanceInfo(instanceID)</Signature>
    <Description>Returns information about an instance used by the Dungeon Journal.</Description>
    <ArgumentList Name="instanceID">
      <Description>Unique instance ID of the instance (number) </Description>
    </ArgumentList>
    <ReturnList Name="instanceName">
      <Description>Title for the instance used in the Dungeon Journal. Not guaranteed to match GetRealZoneText return values. (string) </Description>
    </ReturnList>
    <ReturnList Name="instanceDesc">
      <Description>Gossip description for the instance used in the Dungeon Journal. (string) </Description>
    </ReturnList>
    <ReturnList Name="backgroundTexture">
      <Description>Texture to be used as a background for boss models in this instance. (string) </Description>
    </ReturnList>
    <ReturnList Name="buttonTexture">
      <Description>Texture to be used for this instance in the dungeon selection. (string) </Description>
    </ReturnList>
    <ReturnList Name="titleBackground">
      <Description>Texture to be used behind the instance name in the encounter list for the instance (above the gossip text) (string) </Description>
    </ReturnList>
    <ReturnList Name="mapID">
      <Description>The unique numeric map ID for the instance (number) </Description>
    </ReturnList>
    <ReturnList Name="instanceLink">
      <Description>A clickable link to the instance using the current Dungeon Journal difficulty setting. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="EJ_GetLootFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetLootInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetLootInfoByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetMapEncounter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetNumLoot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetNumSearchResults" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetNumTiers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetSearchResult" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetSectionInfo" Priority="0" ImageType="Method">
    <Signature>name, description, headerType, abilityIcon, displayInfo, siblingID, nextSectionID, fileredByDifficulty, sectionLink, startsOpen, flag1, flag2, flag3, flag4 = EJ_GetSectionInfo(sectionID)</Signature>
    <Description>Returns information regarding a "section" of the encounter journal. A "section" is a phase, unit or ability of an encounter.</Description>
    <ArgumentList Name="sectionID">
      <Description>Unique ID of the section. (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Label of the section (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Text of the section (string) </Description>
    </ReturnList>
    <ReturnList Name="headerType">
      <Description>The variant of section this is (number)
0 - Item
1 - Encounter
2 - Creature
3 - Section (Ability or Creature Add)
4 - Instance</Description>
    </ReturnList>
    <ReturnList Name="abilityIcon">
      <Description>The icon used for abilities (string) </Description>
    </ReturnList>
    <ReturnList Name="displayInfo">
      <Description>Creature ID (number) </Description>
    </ReturnList>
    <ReturnList Name="siblingID">
      <Description>The sectionID of the next section on the same level (number) </Description>
    </ReturnList>
    <ReturnList Name="nextSectionID">
      <Description>The sectionID of the first child of this section (number) </Description>
    </ReturnList>
    <ReturnList Name="fileredByDifficulty">
      <Description>True if should not be shown with current difficulty setting (boolean) </Description>
    </ReturnList>
    <ReturnList Name="sectionLink">
      <Description>A clickable link to this section of the encounter journal (string) </Description>
    </ReturnList>
    <ReturnList Name="startsOpen">
      <Description>Expands the section if true (boolean) </Description>
    </ReturnList>
    <ReturnList Name="flag1">
      <Description>A flag describing the icon displayed next to the section (number)
0 - Tank Alert
1 - Damage Alert
2 - Healer Alert
3 - Heroic only
4 - Deadly
5 - Important
6 - Interruptable
7 - Magic Effect
8 - Curse Effect
9 - Poison Effect
10 - Disease Effect
11 - Enrage</Description>
    </ReturnList>
    <ReturnList Name="flag2">
      <Description>A flag describing the icon displayed next to the section (number) </Description>
    </ReturnList>
    <ReturnList Name="flag3">
      <Description>A flag describing the icon displayed next to the section (number) </Description>
    </ReturnList>
    <ReturnList Name="flag4">
      <Description>A flag describing the icon displayed next to the section (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="EJ_GetSectionPath" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_GetTierInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_HandleLinkPath" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_InstanceIsRaid" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_IsValidInstanceDifficulty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_ResetLootFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_SelectEncounter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_SelectInstance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_SelectTier" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_SetDifficulty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_SetLootFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_SetSearch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EditMacro" Priority="0" ImageType="Method">
    <Signature>newIndex = EditMacro(index, "name", "iconTexture", "body")</Signature>
    <Description>Changes the name, icon, and/or body of a macro. After patch 4.3 then the numeric 'icon' argument has been replaced by 'iconTexture'.
Furthermore, the function always prepend 'Interface\Icons' to the 'iconTexture' string.</Description>
    <ArgumentList Name="index">
      <Description>Existing index of the macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>New name for the macro (up to 16 characters); nil to keep an existing name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="iconTexture">
      <Description>name of icon texture; nil to keep an existing texture (string) </Description>
    </ArgumentList>
    <ArgumentList Name="body">
      <Description>Body of the macro (up to 255 characters); nil to keep the existing body (string) </Description>
    </ArgumentList>
    <ReturnList Name="newIndex">
      <Description>Index at which the macro is now saved (may differ from input index if the macro's name was changed, as macros are saved in alphabetical order) (number, macroID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="EjectPassengerFromSeat" Priority="0" ImageType="Method">
    <Signature>EjectPassengerFromSeat(seat)</Signature>
    <Description>Ejects the occupant of a seat in the player's vehicle</Description>
    <ArgumentList Name="seat">
      <Description>Index of a seat in the player's vehicle (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EnableAddOn" Priority="0" ImageType="Method">
    <Signature>EnableAddOn(index) or EnableAddOn("name")</Signature>
    <Description>Marks an addon as enabled. The addon will remain inactive until the player logs out and back in or reloads the UI (see ReloadUI()).
Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.</Description>
    <ArgumentList Name="index">
      <Description>The index of the addon to be enabled (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of the addon to be enabled (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EnableAllAddOns" Priority="0" ImageType="Method">
    <Signature>EnableAllAddOns()</Signature>
    <Description>Marks all addons as enabled. Addons will remain inactive until the player logs out and back in or reloads the UI (see ReloadUI()).
Changes to the enabled/disabled state of addons while in-game are saved on a per-character basis.</Description>
  </WowApi>
  <WowApi Name="EnableSpellAutocast" Priority="0" ImageType="Method">
    <Signature>EnableSpellAutocast("spell")</Signature>
    <Description>Enables automatic casting of a pet spell</Description>
    <ArgumentList Name="spell">
      <Description>Name of a pet spell (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EndBoundTradeable" Priority="0" ImageType="Method">
    <Signature>EndBoundTradeable(id)</Signature>
    <Description>Confirms taking an action which renders a looted Bind on Pickup item non-tradeable. A Bind on Pickup item looted by the player can be traded to other characters who were originally eligible to loot it, but only within a limited time after looting. This period can be ended prematurely if the player attempts certain actions (such as enchanting the item).</Description>
    <ArgumentList Name="id">
      <Description>Number identifying the item (as provided by the END_BOUND_TRADEABLE event) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EndRefund" Priority="0" ImageType="Method">
    <Signature>EndRefund(id)</Signature>
    <Description>Confirms taking an action which renders a purchased item non-refundable. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase. This period can be ended prematurely if the player attempts certain actions (such as enchanting the item).</Description>
    <ArgumentList Name="id">
      <Description>Number identifying the item (as provided by the END_REFUND event) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EnumerateFrames" Priority="0" ImageType="Method">
    <Signature>nextFrame = EnumerateFrames([currentFrame])</Signature>
    <Description>Returns the next frame following the frame passed, or nil if no more frames exist</Description>
    <ArgumentList Name="currentFrame">
      <Description>The current frame to get the next frame, or nil to get the first frame (table) </Description>
    </ArgumentList>
    <ReturnList Name="nextFrame">
      <Description>The frame following currentFrame or nil if no more frames exist, or the first frame if nil was passed (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="EnumerateServerChannels" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="EquipCursorItem" Priority="0" ImageType="Method">
    <Signature>EquipCursorItem(slot)</Signature>
    <Description>Puts the item on the cursor into a specific equipment slot. If the item on the cursor can be equipped but does not fit in the given slot, the item is automatically equipped in the first available slot in which it fits (as with AutoEquipCursorItem()). Thus, this function is most useful when dealing with items which can be equipped in more than one slot: containers, rings, trinkets, and (for dual-wielding characters) one-handed weapons.
Causes an error message (UI_ERROR_MESSAGE) if the item on the cursor cannot be equipped. Does nothing if the cursor does not contain an item.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EquipItemByName" Priority="0" ImageType="Method">
    <Signature>EquipItemByName(itemID) or EquipItemByName("itemName") or EquipItemByName("itemLink")</Signature>
    <Description>Attempts to equip an arbitrary item. The item is automatically equipped in the first available slot in which it fits. To equip an item in a specific slot, see EquipCursorItem().
Causes an error message (UI_ERROR_MESSAGE) if the specified item cannot be equipped. Does nothing if the specified item does not exist or is not in the player's possession.</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EquipPendingItem" Priority="0" ImageType="Method">
    <Signature>EquipPendingItem(index)</Signature>
    <Description>Confirms equipping a bind-on-equip item. Usable following the EQUIP_BIND_CONFIRM or AUTOEQUIP_BIND_CONFIRM, which fires when the player attempts to equip a bind-on-equip item</Description>
    <ArgumentList Name="index">
      <Description>Index provided by the EQUIP_BIND_CONFIRM or AUTOEQUIP_BIND_CONFIRM event; currently always 0 (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EquipmentManagerClearIgnoredSlotsForSave" Priority="0" ImageType="Method">
    <Signature>EquipmentManagerClearIgnoredSlotsForSave()</Signature>
    <Description>Clears the list of equipment slots to be ignored when saving sets</Description>
  </WowApi>
  <WowApi Name="EquipmentManagerIgnoreSlotForSave" Priority="0" ImageType="Method">
    <Signature>EquipmentManagerIgnoreSlotForSave(slot)</Signature>
    <Description>Adds an equipment slot to the list of those ignored when saving sets. Creating or saving a set with SaveEquipmentSet() will ignore any slots on the list, allowing the player to create sets which only switch certain items (e.g. to equip a fishing pole and hat while leaving non-fishing-related items equipped).</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EquipmentManagerIsSlotIgnoredForSave" Priority="0" ImageType="Method">
    <Signature>isIgnored = EquipmentManagerIsSlotIgnoredForSave(slot)</Signature>
    <Description>Returns whether the contents of an equipment slot will be included when saving sets</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="isIgnored">
      <Description>True if the contents of the slot will not be included when next creating or saving an equipment set; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="EquipmentManagerUnignoreSlotForSave" Priority="0" ImageType="Method">
    <Signature>EquipmentManagerUnignoreSlotForSave(slot)</Signature>
    <Description>Removes an equipment slot from the list of those ignored when saving sets. Creating or saving a set with SaveEquipmentSet() will ignore any slots on the list, allowing the player to create sets which only switch certain items (e.g. to equip a fishing pole and hat while leaving non-fishing-related items equipped).</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EquipmentManager_UnpackLocation" Priority="0" ImageType="Method">
    <Signature>player, bank, bags, location or slot, bag = EquipmentManager_UnpackLocation(location)</Signature>
    <Description>Unpacks an inventory location bitfield into usable components</Description>
    <ArgumentList Name="location">
      <Description>A bit field that represents an item's location in the player's possession. This bit field can be obtained using the GetInventoryItemsForSlot function. (number) </Description>
    </ArgumentList>
    <ReturnList Name="player">
      <Description>A flag indicating whether or not the item exists in the player's inventory (i.e. an equipped item). (boolean) </Description>
    </ReturnList>
    <ReturnList Name="bank">
      <Description>A flag indicating whether or not the item exists in the payer's bank. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="bags">
      <Description>A flag indicating whether or not the item exists in the player's bags. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="location or slot">
      <Description>The inventory slot that contains the item, or the container slot that contains the item, if the item is in the player's bags. (number) </Description>
    </ReturnList>
    <ReturnList Name="bag">
      <Description>The bagID of the container that contains the item. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="EquipmentSetContainsLockedItems" Priority="0" ImageType="Method">
    <Signature>isLocked = EquipmentSetContainsLockedItems("name")</Signature>
    <Description>Returns whether an equipment set contains locked items. Locked items are those in a transient state -- e.g. on the cursor for moving within the player's bags, placed in the Send Mail or Trade UIs, etc. -- for which the default UI displays the item's icon as grayed out. A set cannot be equipped if it contains locked items.</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
    <ReturnList Name="isLocked">
      <Description>True if the equipment set contains locked items (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ExecuteVoidTransfer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ExpandAllFactionHeaders" Priority="0" ImageType="Method">
    <Signature>ExpandAllFactionHeaders()</Signature>
    <Description>Expands all headers and sub-headers in the Reputation UI. Expands headers for both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).</Description>
  </WowApi>
  <WowApi Name="ExpandChannelHeader" Priority="0" ImageType="Method">
    <Signature>ExpandChannelHeader(index)</Signature>
    <Description>Expands a group header in the chat channel listing</Description>
    <ArgumentList Name="index">
      <Description>Index of a header in the display channel list (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ExpandCurrencyList" Priority="0" ImageType="Method">
    <Signature>ExpandCurrencyList(index, shouldExpand)</Signature>
    <Description>Expands or collapses a list header in the Currency UI</Description>
    <ArgumentList Name="index">
      <Description>Index of a header in the currency list (between 1 and GetCurrencyListSize()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="shouldExpand">
      <Description>1 to expand the header, showing its contents; 0 to collapse the header, hiding its contents (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ExpandFactionHeader" Priority="0" ImageType="Method">
    <Signature>ExpandFactionHeader(index)</Signature>
    <Description>Expands a given faction header or sub-header in the Reputation UI.
Faction headers include both major groups (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.) and the sub-groups within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.).
 </Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ExpandGuildTradeSkillHeader" Priority="0" ImageType="Method">
    <Signature>ExpandGuildTradeSkillHeader(professionID)</Signature>
    <Description>Expands the corresponding profession in the guild window. This function is used to expand a single profession in the guild window (professions view) based on its ID. Can also be done while window is not visible. See CollapseGuildTradeSkillHeader() for closing the view again.</Description>
    <ArgumentList Name="professionID">
      <Description>The ID of the corresponding profession (number)
164 - Blacksmithing
165 - Leatherworking
171 - Alchemy
182 - Herbalism
186 - Mining
197 - Tailoring
202 - Engineering
333 - Enchanting
393 - Skinning
755 - Jewelcrafting
773 - Inscription</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ExpandQuestHeader" Priority="0" ImageType="Method">
    <Signature>ExpandQuestHeader(questIndex)</Signature>
    <Description>Expands a quest header in the quest log</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a header in the quest log (between 1 and GetNumQuestLogEntries()), or 0 to expand all headers (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ExpandTradeSkillSubClass" Priority="0" ImageType="Method">
    <Signature>ExpandTradeSkillSubClass(index)</Signature>
    <Description>Expands a group header in the trade skill listing. Causes an error if index does not refer to a header.</Description>
    <ArgumentList Name="index">
      <Description>Index of a header in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ExpandWarGameHeader" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="FactionToggleAtWar" Priority="0" ImageType="Method">
    <Signature>FactionToggleAtWar(index)</Signature>
    <Description>Toggles "at war" status for a faction.
"At War" status determines whether members of a faction can be attacked. Normal interactions (as with merchants, questgivers, etc.) are not available if the player is "at war" with an NPC's faction.
This function does nothing for faction headers or factions for which changing "at war" status is not currently allowed; i.e., factions for which the eighth (canToggleAtWar) return of GetFactionInfo is false or nil.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="FillLocalizedClassList" Priority="0" ImageType="Method">
    <Signature>FillLocalizedClassList(table [, female])</Signature>
    <Description>Fills a table with localized class names keyed by non-localized class tokens. Note that while localized class names have no gender in English, other locales have different names for each gender.</Description>
    <ArgumentList Name="table">
      <Description>An empty table to be filled (number) </Description>
    </ArgumentList>
    <ArgumentList Name="female">
      <Description>True to fill the table with female class names; false or omitted to fill it with male class names (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="FindSpellBookSlotBySpellID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="FlagTutorial" Priority="0" ImageType="Method">
    <Signature>FlagTutorial("tutorial")</Signature>
    <Description>Marks a contextual tutorial as displayed so it doesn't appear again</Description>
    <ArgumentList Name="tutorial">
      <Description>Numeric identifier for the tutorial step (as string); supplied in the TUTORIAL_TRIGGER event (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="FlipCameraYaw" Priority="0" ImageType="Method">
    <Signature>FlipCameraYaw(degrees)</Signature>
    <Description>Rotates the camera around the player</Description>
    <ArgumentList Name="degrees">
      <Description>The number of degrees to rotate; positive for counter-clockwise, negative for clockwise. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="FlyoutHasSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="FocusUnit" Priority="0" ImageType="Method">
    <Signature>FocusUnit("unit") or FocusUnit("name")</Signature>
    <Description>Changes the focus unitID to refer to a new unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to focus (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to focus; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="FollowUnit" Priority="0" ImageType="Method">
    <Signature>FollowUnit("unit") or FollowUnit("name" [, strict])</Signature>
    <Description>Causes the player character to automatically follow another unit. Only friendly player units can be followed.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to follow (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to follow (string) </Description>
    </ArgumentList>
    <ArgumentList Name="strict">
      <Description>True if only an exact match for the given name should be allowed; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ForceGossip" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ForceLogout" Priority="0" ImageType="Method">
    <Signature>ForceLogout()</Signature>
    <Description>Forces the client to logout. Not usable in the current WoW client; causes an error message to be displayed.</Description>
  </WowApi>
  <WowApi Name="ForceQuit" Priority="0" ImageType="Method">
    <Signature>ForceQuit()</Signature>
    <Description>Immediately exits World of Warcraft. Unlike Quit(), this function exits the game application regardless of current conditions.
Used in the default UI when the player chooses "Exit now" in the dialog that appears if the player attempts to quit while not in an inn, major city, or other "rest" area.</Description>
  </WowApi>
  <WowApi Name="FrameXML_Debug" Priority="0" ImageType="Method">
    <Signature>FrameXML_Debug(enable)</Signature>
    <Description>Enables or disables logging of XML loading. When logging is enabled, status and error text will be saved to the file Logs/FrameXML.log (path is relative to the folder containing the World of Warcraft client) as the client parses and loads XML files in the default UI and addons.</Description>
    <ArgumentList Name="enable">
      <Description>True to enable verbose XML logging; false to disable (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GMItemRestorationButtonEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMQuickTicketSystemEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMQuickTicketSystemThrottled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMReportLag" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMRequestPlayerInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMResponseNeedMoreHelp" Priority="0" ImageType="Method">
    <Signature>GMResponseNeedMoreHelp()</Signature>
    <Description>Requests further GM interaction on a ticket to which a GM has already responded</Description>
  </WowApi>
  <WowApi Name="GMResponseResolve" Priority="0" ImageType="Method">
    <Signature>GMResponseResolve()</Signature>
    <Description>Notifies the server that the player's GM ticket issue has been resolved</Description>
  </WowApi>
  <WowApi Name="GMSubmitBug" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMSubmitSuggestion" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMSurveyAnswer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GMSurveyAnswerSubmit" Priority="0" ImageType="Method">
    <Signature>GMSurveyAnswerSubmit(question, rank, "comment")</Signature>
    <Description>Submits an answer to a GM survey question</Description>
    <ArgumentList Name="question">
      <Description>The index of the question being answered (number) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank selected (number) </Description>
    </ArgumentList>
    <ArgumentList Name="comment">
      <Description>A comment for the given question (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GMSurveyCommentSubmit" Priority="0" ImageType="Method">
    <Signature>GMSurveyCommentSubmit("comment")</Signature>
    <Description>Submits a comment to the current GM survey</Description>
    <ArgumentList Name="comment">
      <Description>The comment made on the GM Survey (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GMSurveyNumAnswers" Priority="0" ImageType="Method">
    <Signature>numAnswers = GMSurveyNumAnswers(questionIndex)</Signature>
    <Description>Returns the number of possible answers for a GM Survey question. Deprecated; default UI uses the constant MAX_SURVEY_ANSWERS instead.</Description>
    <ArgumentList Name="questionIndex">
      <Description>Index of a survey question (between 1 and MAX_SURVEY_QUESTIONS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="numAnswers">
      <Description>Number of multiple-choice answers to present for the question (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GMSurveyQuestion" Priority="0" ImageType="Method">
    <Signature>surveyQuestion = GMSurveyQuestion(index)</Signature>
    <Description>Returns the text of a specific question from a GM survey</Description>
    <ArgumentList Name="index">
      <Description>The index of a GM survey question (number) </Description>
    </ArgumentList>
    <ReturnList Name="surveyQuestion">
      <Description>The question being asked (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GMSurveySubmit" Priority="0" ImageType="Method">
    <Signature>GMSurveySubmit()</Signature>
    <Description>Submits the current GM survey</Description>
  </WowApi>
  <WowApi Name="GameMovieFinished" Priority="0" ImageType="Method">
    <Signature>GameMovieFinished()</Signature>
    <Description>Ends in-game movie playback</Description>
  </WowApi>
  <WowApi Name="GetAbandonQuestItems" Priority="0" ImageType="Method">
    <Signature>items = GetAbandonQuestItems()</Signature>
    <Description>Returns information about items that would be destroyed by abandoning a quest. Usable after calling SetAbandonQuest() but before calling AbandonQuest().</Description>
    <ReturnList Name="items">
      <Description>A string listing any items that would be destroyed (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAbandonQuestName" Priority="0" ImageType="Method">
    <Signature>name = GetAbandonQuestName()</Signature>
    <Description>Returns the name of the quest being abandoned. Usable after calling SetAbandonQuest() but before calling AbandonQuest().</Description>
    <ReturnList Name="name">
      <Description>Name of the quest being abandoned (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAccountExpansionLevel" Priority="0" ImageType="Method">
    <Signature>expansionLevel = GetAccountExpansionLevel()</Signature>
    <Description>Returns the most recent of WoW's retail expansion packs for which the player's account is authorized. Returns the expansionID of the highest WoW expansion pack the player's account is authorized for. If you intend to find the highest level the player can reach, you should instead use GetExpansionLevel().</Description>
    <ReturnList Name="expansionLevel">
      <Description>Expansion level of the player's account (number)
0 - World of Warcraft ("Classic")
1 - World of Warcraft: The Burning Crusade
2 - World of Warcraft: Wrath of the Lich King
3 - World of Warcraft: Cataclysm
4 - World of Warcraft: Mists of Pandaria</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementCategory" Priority="0" ImageType="Method">
    <Signature>categoryID = GetAchievementCategory(achievementID)</Signature>
    <Description>Returns the numeric ID of the category to which an achievement belongs</Description>
    <ArgumentList Name="achievementID">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ReturnList Name="categoryID">
      <Description>The numeric ID of the achievement's category (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementComparisonInfo" Priority="0" ImageType="Method">
    <Signature>completed, month, day, year = GetAchievementComparisonInfo(id)</Signature>
    <Description>Returns information about the comparison unit's achievements. Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called.</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ReturnList Name="completed">
      <Description>True if the comparison unit has completed the achievement; otherwise nil (boolean) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Month in which the comparison unit completed the achievement (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month on which the comparison unit completed the achievement (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year in which the comparison unit completed the achievement. (Two digit year, assumed to be 21st century.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementCriteriaInfo" Priority="0" ImageType="Method">
    <Signature>description, type, completed, quantity, requiredQuantity, characterName, flags, assetID, quantityString, criteriaID = GetAchievementCriteriaInfo(achievementID, index) or GetAchievementCriteriaInfo(statisticID)</Signature>
    <Description>Gets information about criteria for an achievement or data for a statistic</Description>
    <ArgumentList Name="achievementID">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of one of the achievement's criteria (between 1 and GetAchievementNumCriteria()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="statisticID">
      <Description>The numeric ID of a statistic (number) </Description>
    </ArgumentList>
    <ReturnList Name="description">
      <Description>Description of the criterion (as displayed in the UI for achievements with multiple criteria) or statistic (string) </Description>
    </ReturnList>
    <ReturnList Name="type">
      <Description>Type of criterion: a value of 8 indicates the criterion is another achievement; other values are not used in the default UI (number) </Description>
    </ReturnList>
    <ReturnList Name="completed">
      <Description>True if the player has completed the criterion; otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="quantity">
      <Description>If applicable, number of steps taken towards completing the criterion (e.g. for the only criterion of "Did Somebody Order a Knuckle Sandwich?", the player's current Unarmed skill; for the first criterion of "Pest Control", 1 if the player has killed an Adder, 0 otherwise (number) </Description>
    </ReturnList>
    <ReturnList Name="requiredQuantity">
      <Description>If applicable, number of steps required to complete the criterion (e.g. 400 for the only criterion of "Did Somebody Order a Knuckle Sandwich?"; 1 for any criterion of "Pest Control" (number) </Description>
    </ReturnList>
    <ReturnList Name="characterName">
      <Description>Character name with which the criterion was completed. Currently always the player character's name for completed criteria (string) </Description>
    </ReturnList>
    <ReturnList Name="flags">
      <Description>Test against the following masks with bit.band() to reveal additional information: (bitfield)
0x00000001 - Criterion should be displayed as a progress bar
0x00000002 - Criterion should be hidden in normal achievement displays</Description>
    </ReturnList>
    <ReturnList Name="assetID">
      <Description>Internal ID number of the quest to complete, NPC to kill, item to acquire, world object to interact with, achievement to earn, or other game entity related to completing the criterion. (Note: some but not all of these ID types are usable elsewhere in the WoW API) (number) </Description>
    </ReturnList>
    <ReturnList Name="quantityString">
      <Description>Text to be shown when displaying quantity and requiredQuantity in a UI element. (Not always the same as format("%d / %d", quantity, requiredQuantity); e.g. "Got My Mind On My Money" shows monetary amounts with embedded textures for gold, silver, and copper) (string) </Description>
    </ReturnList>
    <ReturnList Name="criteriaID">
      <Description>Unique ID number identifying the criterion; usable with GetAchievementInfoFromCriteria() (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementCriteriaInfoByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAchievementGuildRep" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAchievementInfo" Priority="0" ImageType="Method">
    <Signature>id, name, points, completed, month, day, year, description, flags, icon, rewardText, isGuildAch = GetAchievementInfo(category, index) or GetAchievementInfo(id)</Signature>
    <Description>Gets information about an achievement or statistic</Description>
    <ArgumentList Name="category">
      <Description>Numeric ID of an achievement category (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an achievement within a category (between 1 and GetCategoryNumAchievements()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement or statistic (number) </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>The numeric ID of the achievement or statistic (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the achievement or statistic (string) </Description>
    </ReturnList>
    <ReturnList Name="points">
      <Description>Amount of achievement points awarded for completing the achievement (number) </Description>
    </ReturnList>
    <ReturnList Name="completed">
      <Description>True if the player has completed the achievement; otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Month in which the player completed the achievement (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Day of the month on which the player completed the achievement (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Year in which the player completed the achievement. (Two digit year, assumed to be 21st century.) (number) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Description of the achievement (string) </Description>
    </ReturnList>
    <ReturnList Name="flags">
      <Description>Test against the following masks with bit.band() to reveal additional information: (bitfield)
0x00000001 - Info is for a statistic, not an achievement
0x00000002 - Achievement should be hidden in normal displays
0x00000080 - Achievement should display its criteria as a progress bar regardless of per-criterion flags</Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the achievement (string) </Description>
    </ReturnList>
    <ReturnList Name="rewardText">
      <Description>Text describing a reward for the achievement, or the empty string if no reward is offered (string) </Description>
    </ReturnList>
    <ReturnList Name="isGuildAch">
      <Description>True if the achievement is a Guild achievement; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementLink" Priority="0" ImageType="Method">
    <Signature>link = GetAchievementLink(id)</Signature>
    <Description>Returns a hyperlink representing the player's progress on an achievement.
The tooltip associated with the hyperlink shows not only the details of the achievement itself, but also the completion of or progress towards the achievement by the player who produced the link.</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the player's achievement (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementNumCriteria" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAchievementNumRewards" Priority="0" ImageType="Method">
    <Signature>count = GetAchievementNumRewards(id)</Signature>
    <Description>Returns the number of point rewards for an achievement (currently always 1).
Currently all achievements and statistics offer one reward (according to this function), though the rewards offered by statistics are all zero points.</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement or statistic (number) </Description>
    </ArgumentList>
    <ReturnList Name="count">
      <Description>Number of point rewards offered for the achievement (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAchievementReward" Priority="0" ImageType="Method">
    <Signature>points = GetAchievementReward(id, index)</Signature>
    <Description>Returns the number of achievement points awarded for earning an achievement.
Currently all achievements and statistics offer one reward (according to this function), though the rewards offered by statistics are all zero points.</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement or statistic (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of one of the achievement's rewards (between 1 and GetAchievementNumRewards(); currently always 1) (number) </Description>
    </ArgumentList>
    <ReturnList Name="points">
      <Description>Number of achievement points awarded for completing the achievement (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionAutocast" Priority="0" ImageType="Method">
    <Signature>autocastAllowed, autocastEnabled = GetActionAutocast(slot)</Signature>
    <Description>Returns information about autocast actions. No player actions have allowed automatic casting since the initial public release of World of Warcraft.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="autocastAllowed">
      <Description>1 if automatic casting is allowed for the action; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="autocastEnabled">
      <Description>1 if automatic casting is currently turned on for the action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionBarPage" Priority="0" ImageType="Method">
    <Signature>page = GetActionBarPage()</Signature>
    <Description>Returns the current action bar page</Description>
    <ReturnList Name="page">
      <Description>The current action bar page (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionBarToggles" Priority="0" ImageType="Method">
    <Signature>showBar1, showBar2, showBar3, showBar4 = GetActionBarToggles()</Signature>
    <Description>Returns the current visibility settings for the four secondary action bars</Description>
    <ReturnList Name="showBar1">
      <Description>1 if the interface option is set to show the Bottom Left ActionBar, otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="showBar2">
      <Description>1 if the interface option is set to show the Bottom Right ActionBar, otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="showBar3">
      <Description>1 if the interface option is set to show the Right ActionBar, otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="showBar4">
      <Description>1 if the interface option is set to show the Right ActionBar 2, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionCharges" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetActionCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetActionCooldown(slot)</Signature>
    <Description>Returns cooldown information about an action</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the action is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the action is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the action is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionCount" Priority="0" ImageType="Method">
    <Signature>count = GetActionCount(slot)</Signature>
    <Description>Returns the number of uses remaining for the given action slot. Applies to spells that require reagents, items that stack, or items with charges; used in the default UI to display the count on action buttons.
Returns 0 for any action that does not use a count. To distinguish between actions which do not use a count and actions which do but whose current count is 0, see IsConsumableAction.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetActionInfo" Priority="0" ImageType="Method">
    <Signature>type, id, subType, spellID = GetActionInfo(slot)</Signature>
    <Description>Returns information about an action slot</Description>
    <ArgumentList Name="slot">
      <Description>An action slot (number) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Type of action in the slot (string)
companion - Summons a mount or non-combat pet
equipmentset - Equips a set of items
flyout - Brings up a menu of related spells
item - Uses an item
macro - Runs a macro
spell - Casts a spell</Description>
    </ReturnList>
    <ReturnList Name="id">
      <Description>An identifier for the action; varies by type: (number or string)
companion - The companion's index in the mount or minipet list
equipmentset - Name of the equipment set
item - The item's itemID
macro - The macro's index in the macro list (macroID)
spell - The spell's index in the player's spellboook ( spellbookID)</Description>
    </ReturnList>
    <ReturnList Name="subType">
      <Description>Subtype of the action (or nil if not applicable) (string)
CRITTER - For companion actions: indicates id is as an index in the non-combat pets list
MOUNT - For companion actions: indicates id is an index in the mounts list
spell - For spell actions: indicates id is an index in the player's spellbook (as opposed to the pet's)</Description>
    </ReturnList>
    <ReturnList Name="spellID">
      <Description>For spell and companion actions, the global ID of the spell (or the summoning "spell" for a companion) (string, spellID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionLossOfControlCooldown" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetActionText" Priority="0" ImageType="Method">
    <Signature>text = GetActionText(slot)</Signature>
    <Description>Returns the text label associated with an action. Currently used only for macros, which in the default UI show their name as a label on an action button.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="text">
      <Description>Label for the action (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActionTexture" Priority="0" ImageType="Method">
    <Signature>texture = GetActionTexture(slot)</Signature>
    <Description>Returns the icon texture for an action. Can be the icon of a spell or item, the icon manually set for a macro, or an icon reflecting the current state of a macro.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the action in the slot, or nil if the slot is empty (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActiveArtifactByRace" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetActiveLevel" Priority="0" ImageType="Method">
    <Signature>level = GetActiveLevel(index)</Signature>
    <Description>Returns the level of a quest which can be turned in to the current Quest NPC. Only returns valid information after a QUEST_GREETING event.
Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="level">
      <Description>Recommended character level for attempting the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActiveSpecGroup" Priority="0" ImageType="Method">
    <Signature>activeTalentGroup = GetActiveSpecGroup()</Signature>
    <Description>Returns the active talent group/specialisation (Dual Talent system).</Description>
    <ReturnList Name="activeTalentGroup">
      <Description>ID of active talent group/specialisation (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetActiveTitle" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetActiveVoiceChannel" Priority="0" ImageType="Method">
    <Signature>index = GetActiveVoiceChannel()</Signature>
    <Description>Returns the currently active voice channel</Description>
    <ReturnList Name="index">
      <Description>Index of the active voice channel in the chat display window (between 1 and GetNumDisplayChannels()), or nil if no channel is active (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAddOnCPUUsage" Priority="0" ImageType="Method">
    <Signature>usage = GetAddOnCPUUsage("name") or GetAddOnCPUUsage(index)</Signature>
    <Description>Returns the amount of CPU time used by an addon. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.
The value returned is from a cache only updated when calling UpdateAddOnCPUUsage(). This value is the sum of GetFunctionCPUUsage() for all functions created on the addon's behalf -- note that if the addon calls external functions which in turn create new functions, the new functions are considered to belong to the addon.</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="usage">
      <Description>Amount of CPU time used by the addon (in milliseconds) since the UI was loaded or ResetCPUUsage() was last called (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAddOnDependencies" Priority="0" ImageType="Method">
    <Signature>... = GetAddOnDependencies("name") or GetAddOnDependencies(index)</Signature>
    <Description>Returns a list of addons a given addon is dependent upon</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, each the (folder) name of another addon this addon is dependent upon (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAddOnInfo" Priority="0" ImageType="Method">
    <Signature>name, title, notes, enabled, loadable, reason, security = GetAddOnInfo("name") or GetAddOnInfo(index)</Signature>
    <Description>Returns information about an addon</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the addon (name of the addon's folder and TOC file) (string) </Description>
    </ReturnList>
    <ReturnList Name="title">
      <Description>Title of the addon (from the Title header in the addon's TOC file) (string) </Description>
    </ReturnList>
    <ReturnList Name="notes">
      <Description>Contents of the Notes header in the addon's TOC file (string) </Description>
    </ReturnList>
    <ReturnList Name="enabled">
      <Description>1 if the addon is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="loadable">
      <Description>If the addon can currently be loaded (1nil) </Description>
    </ReturnList>
    <ReturnList Name="reason">
      <Description>If the addon cannot be loaded, an unlocalized string token indicating the reason for failure. Localized strings for display can be found by prepending "ADDON_"; e.g. ADDON_DEP_MISSING == "Dependency missing". (string)
BANNED - Banned
CORRUPT - Corrupt
DEP_BANNED - Dependency banned
DEP_CORRUPT - Dependency corrupt
DEP_DISABLED - Dependency disabled
DEP_INCOMPATIBLE - Dependency incompatible
DEP_INSECURE - Dependency insecure
DEP_INTERFACE_VERSION - Dependcy out of date
DEP_MISSING - Dependency missing
DEP_NOT_DEMAND_LOADED - Dependency not loadable on demand
DISABLED - Disabled
INCOMPATIBLE - Incompatible
INSECURE - Insecure
INTERFACE_VERSION - Out of Date
MISSING - Missing
NOT_DEMAND_LOADED - Not loadable on demand</Description>
    </ReturnList>
    <ReturnList Name="security">
      <Description>"SECURE" for Blizzard built-in addons (or other digitally signed Blizzard-produced addons); "BANNED" for black-listed addons; otherwise "INSECURE" (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAddOnMemoryUsage" Priority="0" ImageType="Method">
    <Signature>mem = GetAddOnMemoryUsage("name") or GetAddOnMemoryUsage(index)</Signature>
    <Description>Returns the amount of memory used by an addon. The value returned is from a cache only updated when calling UpdateAddOnMemoryUsage().</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="mem">
      <Description>Memory usage of the addon (in kilobytes) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAddOnMetadata" Priority="0" ImageType="Method">
    <Signature>data = GetAddOnMetadata(index, "variable") or GetAddOnMetadata("name", "variable")</Signature>
    <Description>Returns the value of certain fields in an addon's TOC file</Description>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="variable">
      <Description>Name of a header from the addon's TOC file; only certain headers can be queried: Author, Title, Notes, Version, and any header whose name starts with "X-" (e.g. X-Website, X-Category) (string) </Description>
    </ArgumentList>
    <ReturnList Name="data">
      <Description>Contents of the given TOC file header, or nil if the header does not exist or cannot be queried (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAddOnOptionalDependencies" Priority="0" ImageType="Method">
    <Signature>... = GetAddOnOptionalDependencies("name") or GetAddOnOptionalDependencies(index)</Signature>
    <Description>Returns a list of addons a given addon is optionally dependent upon</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, each the (folder) name of another addon this addon is dependent upon (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAllowLowLevelRaid" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAlternatePowerInfoByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetArchaeologyInfo" Priority="0" ImageType="Method">
    <Signature>name = GetArchaeologyInfo()</Signature>
    <Description>Returns information about Archeology</Description>
    <ReturnList Name="name">
      <Description>Localized name of this profession (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArchaeologyRaceInfo" Priority="0" ImageType="Method">
    <Signature>raceName, raceTexture, raceItemID, numFragmentsCollected, numFragmentsRequired = GetArchaeologyRaceInfo(raceIndex)</Signature>
    <Description>Get name, icon, index, and fragment for a race. See GetNumArcheologyRaces() for the raceIndex numbers.</Description>
    <ArgumentList Name="raceIndex">
      <Description>nil (number, GetNumArchaeologyRaces()) </Description>
    </ArgumentList>
    <ReturnList Name="raceName">
      <Description>Name of the race (string) </Description>
    </ReturnList>
    <ReturnList Name="raceTexture">
      <Description>Path to the texture (icon) used by this race in the Archaeology UI (string) </Description>
    </ReturnList>
    <ReturnList Name="raceItemID">
      <Description>The itemID for the Keystone this race uses (number) </Description>
    </ReturnList>
    <ReturnList Name="numFragmentsCollected">
      <Description>Number of collected fragments for this race (number) </Description>
    </ReturnList>
    <ReturnList Name="numFragmentsRequired">
      <Description>Number of fragments required to solve the current artifact (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAreaMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAreaMaps" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAreaSpiritHealerTime" Priority="0" ImageType="Method">
    <Signature>timeleft = GetAreaSpiritHealerTime()</Signature>
    <Description>Returns the time remaining until a nearby battleground spirit healer resurrects all players in its area</Description>
    <ReturnList Name="timeleft">
      <Description>Seconds remaining before the next area resurrection (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArenaOpponentSpec" Priority="0" ImageType="Method">
    <Signature>specialisationID = GetArenaOpponentSpec(oppNumber)</Signature>
    <Description>Returns information about current enemy specialization.</Description>
    <ArgumentList Name="oppNumber">
      <Description>Number 1-5. The numbering corresponds Arena units. (number) </Description>
    </ArgumentList>
    <ReturnList Name="specialisationID">
      <Description>Specialization ID. Use GetSpecializationInfoByID() to get rest of data. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArenaTeam" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetArenaTeamGdfInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetArenaTeamRosterInfo" Priority="0" ImageType="Method">
    <Signature>name, rank, level, class, online, played, win, seasonPlayed, seasonWin, rating = GetArenaTeamRosterInfo(team, index)</Signature>
    <Description>Returns information about an arena team member</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a team member (between 1 and GetNumArenaTeamMembers(team)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the team member (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Rank of the member in the team (number)
0 - Team captain
1 - Member</Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Character level of the team member (number) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Localized name of the team member's class (string) </Description>
    </ReturnList>
    <ReturnList Name="online">
      <Description>1 if the team member is currently online; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="played">
      <Description>Number of games played by the team member in the current week (number) </Description>
    </ReturnList>
    <ReturnList Name="win">
      <Description>Number of winning games played by the team member in the current week (number) </Description>
    </ReturnList>
    <ReturnList Name="seasonPlayed">
      <Description>Number of games played by the team member in the current arena season (number) </Description>
    </ReturnList>
    <ReturnList Name="seasonWin">
      <Description>Number of winning games played by the team member in the current arena season (number) </Description>
    </ReturnList>
    <ReturnList Name="rating">
      <Description>The team member's personal rating with this team (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArenaTeamRosterSelection" Priority="0" ImageType="Method">
    <Signature>index = GetArenaTeamRosterSelection(team)</Signature>
    <Description>Returns the currently selected member in an arena team roster. Selection in the arena team roster currently has no effect beyond highlighting list entry in the default UI.</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of the selected member in the roster listing (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArenaTeamRosterShowOffline" Priority="0" ImageType="Method">
    <Signature>showOffline = GetArenaTeamRosterShowOffline()</Signature>
    <Description>Returns whether arena team roster listings should include offline members. The "Show Offline" filter is not used in the default UI; if disabled, offline members are still shown.</Description>
    <ReturnList Name="showOffline">
      <Description>1 if the show offline filter for arena teams is enabled, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArmorPenetration" Priority="0" ImageType="Method">
    <Signature>amount = GetArmorPenetration()</Signature>
    <Description>Returns the percentage of enemy armor ignored due to the player's Armor Penetration Rating</Description>
    <ReturnList Name="amount">
      <Description>Percentage of enemy armor ignored due to the player's Armor Penetration Rating (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetArtifactInfoByRace" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetArtifactProgress" Priority="0" ImageType="Method">
    <Signature>base, adjusted, total_cost = GetArtifactProgress()</Signature>
    <Description>Returns information about the progress of the currently-selected artifact's construction.</Description>
    <ReturnList Name="base">
      <Description>Base number of fragments currently possessed. (number) </Description>
    </ReturnList>
    <ReturnList Name="adjusted">
      <Description>Adjusted number of fragments from keystones. (number) </Description>
    </ReturnList>
    <ReturnList Name="total_cost">
      <Description>Total fragments required to assemble the artifact. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAttackPowerForStat" Priority="0" ImageType="Method">
    <Signature>attackPower = GetAttackPowerForStat(statIndex, effectiveStat)</Signature>
    <Description>Returns the attack power bonus provided by one of the player's basic statistics</Description>
    <ArgumentList Name="statIndex">
      <Description>Index of a basic statistic (number)
1 - Strength
2 - Agility
3 - Stamina
4 - Intellect
5 - Spirit</Description>
    </ArgumentList>
    <ArgumentList Name="effectiveStat">
      <Description>Value of the statistic to use in attack power calculation (number) </Description>
    </ArgumentList>
    <ReturnList Name="attackPower">
      <Description>Attack power bonus provided to the player by the basic statistic value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionHouseDepositRate" Priority="0" ImageType="Method">
    <Signature>rate = GetAuctionHouseDepositRate()</Signature>
    <Description>Returns the deposit rate for the current auction house. Obsolete (returns different values for faction and neutral auction houses, but these values do not describe the ratio of auction deposit to an item's vendor buy or sell price); use CalculateAuctionDeposit() instead.</Description>
    <ReturnList Name="rate">
      <Description>The current auction house deposit rate (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionInvTypes" Priority="0" ImageType="Method">
    <Signature>token, display, ... = GetAuctionInvTypes(classIndex, subClassIndex)</Signature>
    <Description>Returns a list of the inventory subtypes for a given auction house item subclass. Inventory types are the second level of hierarchy seen when browsing item classes (categories) and subclasses at the Auction House: Head, Neck, Shirt, et al for Miscellaneous; Head, Shoulder, Chest, Wrist, et al for Cloth; etc.
This function still returns valid information if the player is not interacting with an auctioneer.</Description>
    <ArgumentList Name="classIndex">
      <Description>Index of an item class (in the list returned by GetAuctionItemClasses()); currently, inventory types are only applicable in class 2 (armor) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="subClassIndex">
      <Description>Index of an item subclass (in the list returned by GetAuctionItemSubClasses(classIndex)); currently, inventory types are only applicable in the armor subclasses listed below: (number)
1 - Miscellaneous
2 - Cloth
3 - Leather
4 - Mail
5 - Plate</Description>
    </ArgumentList>
    <ReturnList Name="token">
      <Description>Name of a global variable containing the localized name of the inventory type (e.g. INVTYPE_FINGER) (string) </Description>
    </ReturnList>
    <ReturnList Name="display">
      <Description>1 if the inventory type should be displayed; otherwise nil (used in the default auction UI to hide subclass/invType combinations that don't exist in the game; e.g. Plate/Back, Leather/Trinket, etc) (1nil) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional token, display pairs for each inventory type listed (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionItemBattlePetInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAuctionItemClasses" Priority="0" ImageType="Method">
    <Signature>... = GetAuctionItemClasses()</Signature>
    <Description>Returns a list of localized item class (category) names. Item classes are the first level of hierarchy seen when browsing at the Auction House: Weapon, Armor, Container, Consumable, etc.
This function still returns valid information if the player is not interacting with an auctioneer.</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the name of an item class (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, count, quality, canUse, level, minBid, minIncrement, buyoutPrice, bidAmount, highestBidder, owner, sold = GetAuctionItemInfo("list", index)</Signature>
    <Description>Returns information about an auction listing</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an auction in the listing (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Number of items in the stack (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>The quality (rarity) level of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="canUse">
      <Description>1 if the player character can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Required character level to use or equip the item (number) </Description>
    </ReturnList>
    <ReturnList Name="minBid">
      <Description>Minimum cost to bid on the item (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="minIncrement">
      <Description>Minimum bid increment to become the highest bidder on the item (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="buyoutPrice">
      <Description>Buyout price of the auction (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="bidAmount">
      <Description>Current highest bid on the item (in copper); 0 if no bids have been placed (number) </Description>
    </ReturnList>
    <ReturnList Name="highestBidder">
      <Description>1 if the player is currently the highest bidder; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="owner">
      <Description>Name of the character who placed the auction (string) </Description>
    </ReturnList>
    <ReturnList Name="sold">
      <Description>1 if the auction has sold (and payment is awaiting delivery; applies only to owner auctions); otherwise nil (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetAuctionItemLink("list", index)</Signature>
    <Description>Returns a hyperlink for an item in an auction listing</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an auction in the listing (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionItemSubClasses" Priority="0" ImageType="Method">
    <Signature>... = GetAuctionItemSubClasses(classIndex)</Signature>
    <Description>Returns a list of localized subclass names for a given item class. Item subclasses are the second level of hierarchy seen when browsing item classes (categories) at the Auction House: One-Handed Axes, Two-Handed Axes, Bows, Guns, et al for Weapon; Cloth, Leather, Plate, Shields, et al for Armor; Food &amp; Drink, Potion, Elixir et al for Consumable; Red, Blue, Yellow, et al for Gem; etc.
This function still returns valid information if the player is not interacting with an auctioneer.</Description>
    <ArgumentList Name="classIndex">
      <Description>Index of an item class (in the list returned by GetAuctionItemClasses()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, each the name of an item subclass; or nil if the class contains no subclasses (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionItemTimeLeft" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAuctionSellItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, count, quality, canUse, pricePerStack, pricePerItem, maxStack, invCount = GetAuctionSellItemInfo()</Signature>
    <Description>Returns information about the item currently being set up for auction. Only returns useful information once an item has been placed in the Create Auction UI's "auction item" slot (see ClickAuctionSellItemButton()). </Description>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Number of items in the stack (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) level of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="canUse">
      <Description>1 if the player character can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="pricePerStack">
      <Description>Price to sell this stack of the item to a vendor (in copper). Uses the stack size which was dropped into the auction item slot (and not what might be set in the dialog). (number) </Description>
    </ReturnList>
    <ReturnList Name="pricePerItem">
      <Description>Price to sell the item to a vendor (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="maxStack">
      <Description>Maximum stack size of the item (number) </Description>
    </ReturnList>
    <ReturnList Name="invCount">
      <Description>Amount of how many of the item can be found in the player's inventory (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAuctionSort" Priority="0" ImageType="Method">
    <Signature>criterion, reverse = GetAuctionSort("list", index)</Signature>
    <Description>Returns the current sort settings for auction data. The index argument describes priority order for sort criteria: e.g. if GetAuctionSort("list",1) returns quality and GetAuctionSort("list",2) returns level,1, items are sorted first by itemQuality and items with the same quality are sorted by required level.</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a sorting priority (number) </Description>
    </ArgumentList>
    <ReturnList Name="criterion">
      <Description>Non-localized string naming the criterion (or column in the default UI) by which listings are sorted (string) </Description>
    </ReturnList>
    <ReturnList Name="reverse">
      <Description>1 if listings are sorted in reverse order; otherwise nil. "Reverse" here is relative to the default order, not to absolute value: e.g. the default order for quality is descending (Epic, Rare, Uncommon, etc), but the default order for level is ascending (1-80) (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAutoCompletePresenceID" Priority="0" ImageType="Method">
    <Signature>presenceID = GetAutoCompletePresenceID("name")</Signature>
    <Description>Obtains the presence ID using a full name or BattleTag.</Description>
    <ArgumentList Name="name">
      <Description>Either a full name (Real ID) or a BattleTag (without the numeric part). (Note: this is not a Kstring.) (string) </Description>
    </ArgumentList>
    <ReturnList Name="presenceID">
      <Description>The presence ID of the player. (number, presenceID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAutoCompleteResults" Priority="0" ImageType="Method">
    <Signature>... = GetAutoCompleteResults("inputString", includeBitfield, excludeBitfield, maxResults [, cursorPosition])</Signature>
    <Description>Returns a list of character names which complete a given partial name prefix</Description>
    <ArgumentList Name="inputString">
      <Description>Partial name for which to return completions (string) </Description>
    </ArgumentList>
    <ArgumentList Name="includeBitfield">
      <Description>One or more of the following flags (combined via bit.bor()), indicating which characters should be included in the result list: (number, bitfield)
0x00000000 - AUTOCOMPLETE_FLAG_NONE: No characters
0x00000001 - AUTOCOMPLETE_FLAG_IN_GROUP: Characters in the player's party or raid
0x00000002 - AUTOCOMPLETE_FLAG_IN_GUILD: Characters in the player's guild
0x00000004 - AUTOCOMPLETE_FLAG_FRIEND: Characters from the player's friends list
0x00000010 - AUTOCOMPLETE_FLAG_INTERACTED_WITH: Characters with whom the player has recently interacted
0x00000020 - AUTOCOMPLETE_FLAG_ONLINE: Currently online friends and guildmates
0xffffffff - AUTOCOMPLETE_FLAG_ALL: All characters</Description>
    </ArgumentList>
    <ArgumentList Name="excludeBitfield">
      <Description>One or more of the following flags (combined via bit.bor()), indicating which characters should be excluded from the result list: (number, bitfield)
0x00000000 - AUTOCOMPLETE_FLAG_NONE: No characters
0x00000001 - AUTOCOMPLETE_FLAG_IN_GROUP: Characters in the player's party or raid
0x00000002 - AUTOCOMPLETE_FLAG_IN_GUILD: Characters in the player's guild
0x00000004 - AUTOCOMPLETE_FLAG_FRIEND: Characters from the player's friends list
0x00000010 - AUTOCOMPLETE_FLAG_INTERACTED_WITH: Characters with whom the player has recently interacted
0x00000020 - AUTOCOMPLETE_FLAG_ONLINE: Currently online friends and guildmates
0xffffffff - AUTOCOMPLETE_FLAG_ALL: All characters</Description>
    </ArgumentList>
    <ArgumentList Name="maxResults">
      <Description>Maximum number of results to be returned (number) </Description>
    </ArgumentList>
    <ArgumentList Name="cursorPosition">
      <Description>Cursor position in the inputString; currently unused (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, each the name of a character matching the search parameters (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAutoDeclineGuildInvites" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAutoQuestPopUp" Priority="0" ImageType="Method">
    <Signature>questId, type = GetAutoQuestPopUp(index)</Signature>
    <Description>Returns information about the AutoQuestPopup(s)</Description>
    <ArgumentList Name="index">
      <Description>Index of the quest popup (between 1 and GetNumAutoQuestPopUps()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="questId">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="type">
      <Description>Popup type, can be either of the following (string)
COMPLETE - Completing a quest
OFFER - Offering a quest</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAvailableBandwidth" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAvailableLevel" Priority="0" ImageType="Method">
    <Signature>level = GetAvailableLevel(index)</Signature>
    <Description>Returns the level of a quest available from the current Quest NPC. Only returns valid information after a QUEST_GREETING event.
Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetAvailableLocales" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetAvailableQuestInfo" Priority="0" ImageType="Method">
    <Signature>isTrivial, isDaily, isRepeatable = GetAvailableQuestInfo(availableIndex)</Signature>
    <Description>Returns the flags of an available quest during an NPC dialog</Description>
    <ArgumentList Name="availableIndex">
      <Description>Number of an available quest in the dialog frame; 1..GetNumAvailableQuests() (number) </Description>
    </ArgumentList>
    <ReturnList Name="isTrivial">
      <Description>True if the quest is trivial (gray), false otherwise. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isDaily">
      <Description>True if the quest is daily, false otherwise. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isRepeatable">
      <Description>True if the quest is repeatable, false otherwise. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAvailableTitle" Priority="0" ImageType="Method">
    <Signature>title = GetAvailableTitle(index)</Signature>
    <Description>Returns the name of a quest available from the current Quest NPC. Only returns valid information after a QUEST_GREETING event.
Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="title">
      <Description>Title of the quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetAverageItemLevel" Priority="0" ImageType="Method">
    <Signature>total, equipped = GetAverageItemLevel()</Signature>
    <Description>Returns the players average item level as displayed in the character pane.</Description>
    <ReturnList Name="total">
      <Description>The average item level of all items in inventory and equipped (number) </Description>
    </ReturnList>
    <ReturnList Name="equipped">
      <Description>The item level of the items that the player has equipped (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBackgroundLoadingStatus" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetBackpackCurrencyInfo" Priority="0" ImageType="Method">
    <Signature>name, count, extraCurrencyType, icon, itemID = GetBackpackCurrencyInfo(index)</Signature>
    <Description>Returns information about a currency marked for watching on the Backpack UI</Description>
    <ArgumentList Name="index">
      <Description>Index of a 'slot' for displaying currencies on the backpack (between 1 and MAX_WATCHED_TOKENS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the currency type (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Amount of the currency the player has (number) </Description>
    </ReturnList>
    <ReturnList Name="extraCurrencyType">
      <Description>Type of the currency (number)
0 - Item-based currency
1 - Arena points
2 - Honor points</Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture representing the currency item (for Honor/Arena points, not the icon displayed in the default UI) (string) </Description>
    </ReturnList>
    <ReturnList Name="itemID">
      <Description>ID for the currency item (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBagName" Priority="0" ImageType="Method">
    <Signature>name = GetBagName(container)</Signature>
    <Description>Returns the name of one of the player's bags. Returns nil for the bank and keyring, for bank bags while the player is not at the bank, and for empty bag or bank bag slots.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the container (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBankSlotCost" Priority="0" ImageType="Method">
    <Signature>cost = GetBankSlotCost()</Signature>
    <Description>Returns the cost of the next purchasable bank bag slot. Returns 999999999 if the player owns all available slots.</Description>
    <ReturnList Name="cost">
      <Description>Cost of the next available bank bag slot (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBarberShopStyleInfo" Priority="0" ImageType="Method">
    <Signature>name, unused, cost, isCurrent = GetBarberShopStyleInfo(styleIndex)</Signature>
    <Description>Returns information about the selected barber shop style option</Description>
    <ArgumentList Name="styleIndex">
      <Description>Index of a style option (number)
1 - Hair (or Horn) Style
2 - Hair (or Horn) Color
3 - Varies by race and gender: Facial Hair, Earrings, Features, Hair, Horns, Markings, Normal, Piercings, or Tusks</Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the style option, or nil if the style is not named (string) </Description>
    </ReturnList>
    <ReturnList Name="unused">
      <Description>Currently unused (string) </Description>
    </ReturnList>
    <ReturnList Name="cost">
      <Description>Price of applying the style option, not including changes to other style options (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="isCurrent">
      <Description>1 if the style option matches the character's existing style; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBarberShopTotalCost" Priority="0" ImageType="Method">
    <Signature>cost = GetBarberShopTotalCost()</Signature>
    <Description>Returns the total price of selected barber shop style changes</Description>
    <ReturnList Name="cost">
      <Description>Price of the barber shop style change (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldArenaFaction" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetBattlefieldEstimatedWaitTime" Priority="0" ImageType="Method">
    <Signature>waitTime = GetBattlefieldEstimatedWaitTime(index)</Signature>
    <Description>Returns the estimated wait time on a battleground or arena queue</Description>
    <ArgumentList Name="index">
      <Description>Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number) </Description>
    </ArgumentList>
    <ReturnList Name="waitTime">
      <Description>Estimated wait time to join the battleground/arena (in milliseconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldFlagPosition" Priority="0" ImageType="Method">
    <Signature>flagX, flagY, flagToken = GetBattlefieldFlagPosition(index)</Signature>
    <Description>Returns the position of a flag in a battleground</Description>
    <ArgumentList Name="index">
      <Description>Index of a flag (between 1 and GetNumBattlefieldFlagPositions()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="flagX">
      <Description>Horizontal (X) coordinate of the flag's position relative to the zone map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="flagY">
      <Description>Vertical (Y) coordinate of the flag's position relative to the zone map (0 = bottom edge, 1 = top edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="flagToken">
      <Description>Unique portion of the path to a texure for the flag; preface with "Interface\\WorldStateFrame\" for the full path (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldInstanceExpiration" Priority="0" ImageType="Method">
    <Signature>timeLeft = GetBattlefieldInstanceExpiration()</Signature>
    <Description>Returns the amount of time remaining before all players are removed from the instance, if in a battleground instance where the match has completed</Description>
    <ReturnList Name="timeLeft">
      <Description>Amount of time remaining (in milliseconds) before all players are removed from the instance, if in a battleground instance where the match has completed; otherwise 0. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldInstanceRunTime" Priority="0" ImageType="Method">
    <Signature>time = GetBattlefieldInstanceRunTime()</Signature>
    <Description>Returns the amount of time since the current battleground instance opened</Description>
    <ReturnList Name="time">
      <Description>Amount of time since the current battleground instance opened (in milliseconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldMapIconScale" Priority="0" ImageType="Method">
    <Signature>scale = GetBattlefieldMapIconScale()</Signature>
    <Description>Returns the scale to be used for displaying battleground map icons. Used in the default UI to determine the size of the point of interest icons (towers, graveyards, etc.) on the zone map (the small battle minimap). The default size of the icons is set by DEFAULT_POI_ICON_SIZE and the scale is used to grow or shrink them depending on the size of the map.</Description>
    <ReturnList Name="scale">
      <Description>Scale factor for map icons (between 0 and 1) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldPortExpiration" Priority="0" ImageType="Method">
    <Signature>expiration = GetBattlefieldPortExpiration(index)</Signature>
    <Description>Returns the time left on a battleground or arena invitation</Description>
    <ArgumentList Name="index">
      <Description>Index of a battleground/arena queue the player has joined (between 1 and MAX_BATTLEFIELD_QUEUES) (number) </Description>
    </ArgumentList>
    <ReturnList Name="expiration">
      <Description>Time remaining before the player's invitation to enter the battleground/arena expires (in seconds); 0 if the player has not yet been invited to enter or is already in the battleground/arena instance (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldScore" Priority="0" ImageType="Method">
    <Signature>name, killingBlows, honorableKills, deaths, honorGained, faction, race, class, classToken, damageDone, healingDone, bgRating, ratingChange, preMatchMMR, mmrChange, talentSpec = GetBattlefieldScore(index)</Signature>
    <Description>Returns basic scoreboard information for a battleground/arena participant. Does not include battleground-specific score data (e.g. flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc); see GetBattlefieldStatData() for such information.</Description>
    <ArgumentList Name="index">
      <Description>Index of a participant in the battleground/arena scoreboard (between 1 and GetNumBattlefieldScores()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the participant (string) </Description>
    </ReturnList>
    <ReturnList Name="killingBlows">
      <Description>Number of killing blows scored by the participant during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="honorableKills">
      <Description>Number of honorable kills scored by the participant during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="deaths">
      <Description>Number of times the participant died during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="honorGained">
      <Description>Amount of honor points gained by the participant during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="faction">
      <Description>Faction or team to which the participant belongs (number)
0 - Horde (Battleground) / Green Team (Arena)
1 - Alliance (Battleground) / Gold Team (Arena)</Description>
    </ReturnList>
    <ReturnList Name="race">
      <Description>Localized name of the participant's race (string) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Localized token representing the participant's class (string) </Description>
    </ReturnList>
    <ReturnList Name="classToken">
      <Description>Non-localized token representing the participant's class (string) </Description>
    </ReturnList>
    <ReturnList Name="damageDone">
      <Description>Total amount of damage done by the participant during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="healingDone">
      <Description>Total amount of healing done by the participant during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="bgRating">
      <Description>Personal battleground rating at the start of the match (number) </Description>
    </ReturnList>
    <ReturnList Name="ratingChange">
      <Description>Amount of rating gained/lost during the match (number) </Description>
    </ReturnList>
    <ReturnList Name="preMatchMMR">
      <Description>After 4.2 update is always zero (number) </Description>
    </ReturnList>
    <ReturnList Name="mmrChange">
      <Description>After 4.2 update is always zero (number) </Description>
    </ReturnList>
    <ReturnList Name="talentSpec">
      <Description>Localized name of player build (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldStatData" Priority="0" ImageType="Method">
    <Signature>columnData = GetBattlefieldStatData(index, statIndex)</Signature>
    <Description>Returns battleground-specific scoreboard information for a battleground participant. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc. For the name and icon associated with each statistic, see GetBattlefieldStatInfo(). For basic battleground score information, see GetBattlefieldScore().</Description>
    <ArgumentList Name="index">
      <Description>Index of a participant in the battleground/arena scoreboard (between 1 and GetNumBattlefieldScores()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="statIndex">
      <Description>Index of a battleground-specific statistic (between 1 and GetNumBattlefieldStats()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="columnData">
      <Description>The participant's score for the statistic (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldStatInfo" Priority="0" ImageType="Method">
    <Signature>text, icon, tooltip = GetBattlefieldStatInfo(statIndex)</Signature>
    <Description>Returns information about a battleground-specific scoreboard column. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc.</Description>
    <ArgumentList Name="statIndex">
      <Description>Index of a battleground-specific statistic (between 1 and GetNumBattlefieldStats()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="text">
      <Description>Name to display for the statistic's scoreboard column header (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the statistic (string) </Description>
    </ReturnList>
    <ReturnList Name="tooltip">
      <Description>Text to be displayed as a tooltip when mousing over the scoreboard column (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldStatus" Priority="0" ImageType="Method">
    <Signature>status, mapName, instanceID, bracketMin, bracketMax, teamSize, registeredMatch = GetBattlefieldStatus(index)</Signature>
    <Description>Returns information about an active or queued battleground/arena instance</Description>
    <ArgumentList Name="index">
      <Description>Index of a battleground/arena queue the player has joined (between 1 and GetMaxBattlefieldID()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>Status of the player with respect to the battleground (string)
active - The player is currently playing in this battleground
confirm - The player has been invited to enter this battleground but has not done so yet
none - No battleground or queue at this index
queued - The player is queued for this battleground</Description>
    </ReturnList>
    <ReturnList Name="mapName">
      <Description>Name of the battleground (e.g. "Alterac Valley") or arena ("All Arenas" while queued; "Eastern Kingdoms" regardless of destination while status is confirm, e.g. "Dalaran Sewers" while active) (string) </Description>
    </ReturnList>
    <ReturnList Name="instanceID">
      <Description>If in a battleground or queued for a specific instance, the number identifying that instance (e.g. 13 in "Warsong Gulch 13"); otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="bracketMin">
      <Description>Lowest level of characters in the player's level bracket for the battleground (number) </Description>
    </ReturnList>
    <ReturnList Name="bracketMax">
      <Description>Highest level of characters in the player's level bracket for the battleground (number) </Description>
    </ReturnList>
    <ReturnList Name="teamSize">
      <Description>Number of players per team for an arena match (number)
0 - Not an arena match
2 - 2v2 Arena
3 - 3v3 Arena
5 - 5v5 Arena</Description>
    </ReturnList>
    <ReturnList Name="registeredMatch">
      <Description>1 if a rated arena match; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldTeamInfo" Priority="0" ImageType="Method">
    <Signature>teamName, teamRating, newTeamRating, teamMMR, numPlayers = GetBattlefieldTeamInfo(index)</Signature>
    <Description>Returns info about teams and their rating and MMR in a rated arena match. Usable following the UPDATE_BATTLEFIELD_SCORE event.</Description>
    <ArgumentList Name="index">
      <Description>Index of a team in the arena match (number)
0 - Green Team/Horde
1 - Gold Team/Alliance</Description>
    </ArgumentList>
    <ReturnList Name="teamName">
      <Description>Name of the team (string) </Description>
    </ReturnList>
    <ReturnList Name="teamRating">
      <Description>The team's rating at the start of the match (number) </Description>
    </ReturnList>
    <ReturnList Name="newTeamRating">
      <Description>New rating for the team when the match is complete (number) </Description>
    </ReturnList>
    <ReturnList Name="teamMMR">
      <Description>The team MMR at the start of the match (number) </Description>
    </ReturnList>
    <ReturnList Name="numPlayers">
      <Description>Number of players in the team (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldTimeWaited" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetBattlefieldVehicleInfo" Priority="0" ImageType="Method">
    <Signature>vehicleX, vehicleY, unitName, isPossessed, vehicleType, orientation, isPlayer, isAlive = GetBattlefieldVehicleInfo(index)</Signature>
    <Description>Returns information about special vehicles in the current zone. Used only for certain vehicles in certain zones: includes the airships in Icecrown as well as vehicles used in Ulduar, Wintergrasp, and Strand of the Ancients.</Description>
    <ArgumentList Name="index">
      <Description>Index of a special vehicle (between 1 and GetNumBattlefieldVehicles()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="vehicleX">
      <Description>Horizontal position of the vehicle relative to the zone map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="vehicleY">
      <Description>Vertical position of the vehicle relative to the zone map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
    <ReturnList Name="unitName">
      <Description>Localized name of the vehicle (string) </Description>
    </ReturnList>
    <ReturnList Name="isPossessed">
      <Description>True if the vehicle is controlled by another unit (boolean) </Description>
    </ReturnList>
    <ReturnList Name="vehicleType">
      <Description>Token indicating type of vehicle; some types can be used as keys to the global VEHICLE_TEXTURES table to get display texture information for the vehicle (string)
Airship Alliance - The Alliance flying quest hub in Icecrown
Airship Horde - The Horde flying quest hub in Icecrown
Carriage - Fiona's Caravan in Eastern Plaguelands
Drive - A land vehicle such as a siege engine
Fly - A flying vehicle
Idle - A non-moving vehicle (e.g. an artillery turret)</Description>
    </ReturnList>
    <ReturnList Name="orientation">
      <Description>Facing angle of the vehicle ((in radians, 0 = north, values increasing counterclockwise) (number) </Description>
    </ReturnList>
    <ReturnList Name="isPlayer">
      <Description>True if the vehicle is controlled by the player (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isAlive">
      <Description>True if the vehicle has not been destroyed (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlefieldWinner" Priority="0" ImageType="Method">
    <Signature>winner = GetBattlefieldWinner()</Signature>
    <Description>Returns the winner of the current battleground or arena match</Description>
    <ReturnList Name="winner">
      <Description>Index of the winning team if in a completed match; otherwise nil (number)
0 - Horde (Battleground) / Green Team (Arena)
1 - Alliance (Battleground) / Gold Team (Arena)
255 - Draw (Arena)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBattlegroundInfo" Priority="0" ImageType="Method">
    <Signature>localizedName, canEnter, isHoliday, isRandom, BattleGroundID, mapDescription = GetBattlegroundInfo(index)</Signature>
    <Description>Returns information about available battlegrounds</Description>
    <ArgumentList Name="index">
      <Description>Index of a battleground (between 1 and GetNumBattlegroundTypes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="localizedName">
      <Description>Localized name of the battleground (Alterac Valley, Warsong Gulch, etc.) (string) </Description>
    </ReturnList>
    <ReturnList Name="canEnter">
      <Description>1 if the player can enter the battleground; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isHoliday">
      <Description>1 if a "holiday" offering bonus honor is currently active for the battleground; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isRandom">
      <Description>1 if the index is the entry for a random battleground, else nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="BattleGroundID">
      <Description>ID of the battleground. (number) </Description>
    </ReturnList>
    <ReturnList Name="mapDescription">
      <Description>Localized description of the battleground (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBestRFChoice" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetBidderAuctionItems" Priority="0" ImageType="Method">
    <Signature>GetBidderAuctionItems()</Signature>
    <Description>Requests data from the server for the list of auctions bid on by the player. The AUCTION_BIDDER_LIST_UPDATE event fires if new data is available; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.</Description>
  </WowApi>
  <WowApi Name="GetBillingTimeRested" Priority="0" ImageType="Method">
    <Signature>time = GetBillingTimeRested()</Signature>
    <Description>Returns the amount of time for which the player must be offline in order to lift play time restrictions. After playing for a number of hours, restrictions may be placed on the player's ability to gain loot or XP, complete quests, or use trade skills; if in such a state, the player must log off for the period of time specified by this function in order to return to normal play.
Only used in locales where the length of play sessions is restricted (e.g. mainland China).</Description>
    <ReturnList Name="time">
      <Description>Offline time required to lift play time restrictions (in minutes) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBindLocation" Priority="0" ImageType="Method">
    <Signature>location = GetBindLocation()</Signature>
    <Description>Returns the name of the player's Hearthstone location</Description>
    <ReturnList Name="location">
      <Description>Name of the player's Hearthstone location (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBinding" Priority="0" ImageType="Method">
    <Signature>commandName, binding1, binding2 = GetBinding(index)</Signature>
    <Description>Returns information about a key binding</Description>
    <ArgumentList Name="index">
      <Description>Index in the key bindings list (between 1 and GetNumBindings()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="commandName">
      <Description>Name of the binding command (string) </Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="GetBindingAction" Priority="0" ImageType="Method">
    <Signature>action = GetBindingAction("key" [, checkOverride])</Signature>
    <Description>Returns the action bound to a key or key combination</Description>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="checkOverride">
      <Description>True to check possible override bindings for the key, false or omitted to check only normal bindings (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="action">
      <Description>Name of the action associated with the key, or the empty string ("") if the key is not bound to an action (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBindingByKey" Priority="0" ImageType="Method">
    <Signature>action = GetBindingByKey("key")</Signature>
    <Description>Returns the action bound to a key or key combination</Description>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ReturnList Name="action">
      <Description>Name of the action associated with the key, or the empty string ("") if the key is not bound to an action (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBindingKey" Priority="0" ImageType="Method">
    <Signature>key1, ... = GetBindingKey("COMMAND")</Signature>
    <Description>Returns the key combinations for a given binding command. Although the default UI only allows two combinations to be bound to a command, more than two can be set via the API.</Description>
    <ArgumentList Name="COMMAND">
      <Description>Name of a binding command (string) </Description>
    </ArgumentList>
    <ReturnList Name="key1">
      <Description>First key binding for the command, or nil if no key is bound (string, binding) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>A list of additional bindings for the command (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBlacklistMap" Priority="0" ImageType="Method">
    <Signature>bgIndex = GetBlacklistMap(i)</Signature>
    <Description>Return ID of blacklisted battleground.</Description>
    <ArgumentList Name="i">
      <Description>Index of blacklist (between 1 and 2) (number) </Description>
    </ArgumentList>
    <ReturnList Name="bgIndex">
      <Description>ID number of battleground (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBlockChance" Priority="0" ImageType="Method">
    <Signature>chance = GetBlockChance()</Signature>
    <Description>Returns the player's percentage chance to block with a shield</Description>
    <ReturnList Name="chance">
      <Description>Percentage chance to block (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBonusBarIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetBonusBarOffset" Priority="0" ImageType="Method">
    <Signature>offset = GetBonusBarOffset()</Signature>
    <Description>Returns the current "stance" offset for use with the bonus action bar. This value corresponds to what "stance" the player is currently in, and more specifically which set of actions correspond to that stance. Action IDs for special stances start on action bar #7 (or NUM_ACTIONBAR_PAGES + 1), so the offset returned by this function corresponds to the number to be added to NUM_ACTIONBAR_PAGES in calculating action IDs for these action bars.
Note that the UI definition of "stance" includes not just warrior stances but also druid shapeshift forms, rogue/druid stealth, priest shadowform, and various other cases, but does not necessarily include all states normally presented in the default UI's stance/shapeshift bar (notable exclusions are paladin auras and death knight presences).</Description>
    <ReturnList Name="offset">
      <Description>Offset of the stance's action bar in relation to NUM_ACTIONBAR_PAGES (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBuildInfo" Priority="0" ImageType="Method">
    <Signature>version, internalVersion, date, uiVersion = GetBuildInfo()</Signature>
    <Description>Returns the version information about the client</Description>
    <ReturnList Name="version">
      <Description>Display version number of the client (e.g. "3.1.1") (string) </Description>
    </ReturnList>
    <ReturnList Name="internalVersion">
      <Description>Internal version number of the client (e.g. "9835") (string) </Description>
    </ReturnList>
    <ReturnList Name="date">
      <Description>Date on which the client executable was built (e.g. "Apr 24 2009"); not necessarily the date it was released to the public (string) </Description>
    </ReturnList>
    <ReturnList Name="uiVersion">
      <Description>Version compatibility number for UI purposes (e.g. 30100); generally, installed addons should have this number in the Interface header of their TOC files to avoid being marked as Out of Date and possibly not loaded (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBuybackItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, price, quantity, numAvailable, isUsable = GetBuybackItemInfo(index)</Signature>
    <Description>Returns information about an item recently sold to a vendor and available to be repurchased</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="price">
      <Description>Current cost to repurchase the item from this vendor (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="quantity">
      <Description>Number of stacked items per purchase (number) </Description>
    </ReturnList>
    <ReturnList Name="numAvailable">
      <Description>Number of items available for purchase, if the vendor has a limited stock of the item; generally 0 for buyback items (number) </Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetBuybackItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetBuybackItemLink(index)</Signature>
    <Description>Returns a hyperlink for an item recently sold to a vendor and available to be repurchased</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCVar" Priority="0" ImageType="Method">
    <Signature>string = GetCVar("cvar")</Signature>
    <Description>Returns the value of a configuration variable. Causes an error if the named CVar does not exist.
Note that all values are returned as strings: use of tonumber() may be required if using a value in a numeric context. (See also GetCVarBool() for binary values.)</Description>
    <ArgumentList Name="cvar">
      <Description>Name of a CVar (string) </Description>
    </ArgumentList>
    <ReturnList Name="string">
      <Description>Value of the CVar (any) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCVarBitfield" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCVarBool" Priority="0" ImageType="Method">
    <Signature>value = GetCVarBool("cvar")</Signature>
    <Description>Returns the value of a configuration variable in a format compatible with Lua conditional expressions. All configuration variables are stored as strings; many CVars represent the state of a binary flag and are stored as either "1" or "0". This function provides a convenient way to test the state of such variables without the extra syntax required to explicitly check for "1" or "0" values.</Description>
    <ArgumentList Name="cvar">
      <Description>Name of a CVar (string) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>1 if the CVar's value should be treated as true; nil if it should be treated as false (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCVarDefault" Priority="0" ImageType="Method">
    <Signature>value = GetCVarDefault("CVar")</Signature>
    <Description>Returns the default value of a configuration variable. Causes an error if the named CVar does not exist.</Description>
    <ArgumentList Name="CVar">
      <Description>Name of a CVar (string) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>Default value of the CVar (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCVarInfo" Priority="0" ImageType="Method">
    <Signature>value, defaultValue, serverStoredAccountWide, serverStoredPerCharacter = GetCVarInfo("cvar")</Signature>
    <Description>Returns information about a configuration variable</Description>
    <ArgumentList Name="cvar">
      <Description>Name of a CVar (string) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>Current value of the CVar (string) </Description>
    </ReturnList>
    <ReturnList Name="defaultValue">
      <Description>Default value of the CVar (string) </Description>
    </ReturnList>
    <ReturnList Name="serverStoredAccountWide">
      <Description>1 if the CVar's value is saved on the server and shared by all characters on the player's account; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="serverStoredPerCharacter">
      <Description>1 if the CVar's value is saved on the server and specific to the current cahracter; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCallPetSpellInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCategoryAchievementPoints" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCategoryInfo" Priority="0" ImageType="Method">
    <Signature>name, parentID, flags = GetCategoryInfo(id)</Signature>
    <Description>Returns information about an achievement/statistic category</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement/statistic category (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the category (string) </Description>
    </ReturnList>
    <ReturnList Name="parentID">
      <Description>ID of the parent category of which this is a sub-category, or -1 if this is a top-level category (number) </Description>
    </ReturnList>
    <ReturnList Name="flags">
      <Description>Various additional information about the category; currently unused (0 for all existing categories) (bitfield) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCategoryList" Priority="0" ImageType="Method">
    <Signature>categories = GetCategoryList()</Signature>
    <Description>Returns a list of all achievement categories</Description>
    <ReturnList Name="categories">
      <Description>A list of achievement category IDs (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCategoryNumAchievements" Priority="0" ImageType="Method">
    <Signature>numItems, numCompleted = GetCategoryNumAchievements(id)</Signature>
    <Description>Returns the number of achievements/statistics to display in a category.
Note this function does not return the total number of achievements in a category; it only returns the number to be displayed in the default UI. Achievements may belong to a category but not be counted for display: e.g. among those which are part of a series (100 Quests Completed, 500 Quests Completed), only the achievement most recently completed and the achievement following it in the series are shown.</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement/statistic category (number) </Description>
    </ArgumentList>
    <ReturnList Name="numItems">
      <Description>Number of achievements or statistics to display in the category (number) </Description>
    </ReturnList>
    <ReturnList Name="numCompleted">
      <Description>Number of completed achievements in the category (or 0 for statistics) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCemeteryPreference" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeBestTime" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeBestTimeInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeBestTimeNum" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeMapMoney" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeMapRewardInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeCompletionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeCompletionReward" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeLeaderInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeMapPlayerStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeMapTable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChallengeModeMapTimes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChannelDisplayInfo" Priority="0" ImageType="Method">
    <Signature>name, header, collapsed, channelNumber, count, active, category, voiceEnabled, voiceActive = GetChannelDisplayInfo(index)</Signature>
    <Description>Returns information about an entry in the channel list display</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the channel list display (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the channel or header (string) </Description>
    </ReturnList>
    <ReturnList Name="header">
      <Description>1 if the entry is a group header; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="collapsed">
      <Description>1 if the entry is a collapsed group header; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="channelNumber">
      <Description>Number identifying the channel (as returned by GetChannelList() and used by SendChatMessage() and other channel functions) (number) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Number of characters in the channel (number) </Description>
    </ReturnList>
    <ReturnList Name="active">
      <Description>1 if the channel is currently active; otherwise nil. (Used for special server channels, e.g. "Trade" and "LookingForGroup", which can only be used under certain conditions) (1nil) </Description>
    </ReturnList>
    <ReturnList Name="category">
      <Description>Category to which the chat channel belongs (string)
CHANNEL_CATEGORY_CUSTOM - Custom channels created by players
CHANNEL_CATEGORY_GROUP - Group channels (party, raid, battleground)
CHANNEL_CATEGORY_WORLD - World channels (General, Trade, etc.)</Description>
    </ReturnList>
    <ReturnList Name="voiceEnabled">
      <Description>1 if voice chat is enabled for the channel; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="voiceActive">
      <Description>1 if voice chat is active for the channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChannelList" Priority="0" ImageType="Method">
    <Signature>index, channel, ... = GetChannelList()</Signature>
    <Description>Returns the list of the channels the player has joined</Description>
    <ReturnList Name="index">
      <Description>Index of the channel (number) </Description>
    </ReturnList>
    <ReturnList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional index, channel pairs for each channel the player has joined (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChannelName" Priority="0" ImageType="Method">
    <Signature>channel, channelName, instanceID = GetChannelName(channelIndex) or GetChannelName("channelName")</Signature>
    <Description>Returns information about a chat channel</Description>
    <ArgumentList Name="channelIndex">
      <Description>A channel ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>A channel name (string) </Description>
    </ArgumentList>
    <ReturnList Name="channel">
      <Description>ID of the channel (number) </Description>
    </ReturnList>
    <ReturnList Name="channelName">
      <Description>Name of the channel (string) </Description>
    </ReturnList>
    <ReturnList Name="instanceID">
      <Description>The channel's instance ID, or 0 if there are not separate instances of the channel. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChannelRosterInfo" Priority="0" ImageType="Method">
    <Signature>name, owner, moderator, muted, active, enabled = GetChannelRosterInfo(index, rosterIndex)</Signature>
    <Description>Returns information about a character in a chat channel in the channel list display</Description>
    <ArgumentList Name="index">
      <Description>Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="rosterIndex">
      <Description>Index of a participant in the channel (between 1 and count, where count = select(5,GetChannelDisplayInfo(index)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the character (string) </Description>
    </ReturnList>
    <ReturnList Name="owner">
      <Description>1 if the character is the channel owner; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="moderator">
      <Description>1 if the character is a channel moderator; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="muted">
      <Description>1 if the character is muted; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="active">
      <Description>1 if the character is currently speaking in the channel; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="enabled">
      <Description>1 if the character has voice chat active for the channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChatTypeIndex" Priority="0" ImageType="Method">
    <Signature>index = GetChatTypeIndex("messageGroup")</Signature>
    <Description>Returns the numeric index corresponding to a chat message type. These indices are used in the default UI to identify lines printed in a chat window, allowing (for example) their color to be changed to match changes in the player's color preferences.</Description>
    <ArgumentList Name="messageGroup">
      <Description>Token identifying a message type (string, chatMsgType) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Numeric index of the chat type (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChatWindowChannels" Priority="0" ImageType="Method">
    <Signature>channelName, channelId, ... = GetChatWindowChannels(index)</Signature>
    <Description>Returns the saved list of channels to which a chat window is subscribed</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="channelName">
      <Description>Name of the channel (string) </Description>
    </ReturnList>
    <ReturnList Name="channelId">
      <Description>Numeric id for the channel (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional channelName, channelId pairs for each channel belonging to the chat window (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChatWindowInfo" Priority="0" ImageType="Method">
    <Signature>name, fontSize, r, g, b, alpha, shown, locked, docked, uninteractable = GetChatWindowInfo(index)</Signature>
    <Description>Returns the saved settings for a chat window. These values reflect the settings saved between sessions, which are used by the default UI to set up the chat frames it displays.</Description>
    <ArgumentList Name="index">
      <Description>Index of the window you wish you get information on (starts at 1) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the chat window (string) </Description>
    </ReturnList>
    <ReturnList Name="fontSize">
      <Description>Font size for text displayed in the chat window (number) </Description>
    </ReturnList>
    <ReturnList Name="r">
      <Description>Red component of the window's background color (0.0 - 1.0) (number) </Description>
    </ReturnList>
    <ReturnList Name="g">
      <Description>Green component of the window's background color (0.0 - 1.0) (number) </Description>
    </ReturnList>
    <ReturnList Name="b">
      <Description>Blue component of the window's background color (0.0 - 1.0) (number) </Description>
    </ReturnList>
    <ReturnList Name="alpha">
      <Description>Alpha value (opacity) of the window's background (0 = fully transparent, 1 = fully opaque) (number) </Description>
    </ReturnList>
    <ReturnList Name="shown">
      <Description>1 if the window should be shown; 0 if it should be hidden (number) </Description>
    </ReturnList>
    <ReturnList Name="locked">
      <Description>1 if the window should be locked; 0 if it should be movable/resizable (number) </Description>
    </ReturnList>
    <ReturnList Name="docked">
      <Description>1 if the window should be docked to the main chat window; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="uninteractable">
      <Description>1 if the window should ignore all mouse events; otherwise 0 (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChatWindowMessages" Priority="0" ImageType="Method">
    <Signature>... = GetChatWindowMessages(index)</Signature>
    <Description>Returns the saved list of messages to which a chat window is subscribed</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of chatMsgTypes for which the chat window is subscribed (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetChatWindowSavedDimensions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetChatWindowSavedPosition" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetClassInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetClassInfoByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetClickFrame" Priority="0" ImageType="Method">
    <Signature>frame = GetClickFrame("name")</Signature>
    <Description>Returns the Frame object associated with the given name.
Returns nil if there is no UI object with the name given, or if the named UI object is not a Frame.</Description>
    <ArgumentList Name="name">
      <Description>Name of a Frame or other UI object (string) </Description>
    </ArgumentList>
    <ReturnList Name="frame">
      <Description>A reference to the named frame (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCoinIcon" Priority="0" ImageType="Method">
    <Signature>icon = GetCoinIcon(amount)</Signature>
    <Description>Returns an icon representing an amount of money</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money in copper (number) </Description>
    </ArgumentList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture representing the amount (string)
Interface\Icons\INV_Misc_Coin_01 - Small amount of Gold
Interface\Icons\INV_Misc_Coin_02 - Large amount of Gold
Interface\Icons\INV_Misc_Coin_03 - Small amount of Silver
Interface\Icons\INV_Misc_Coin_04 - Large amount of Silver
Interface\Icons\INV_Misc_Coin_05 - Small amount of Copper
Interface\Icons\INV_Misc_Coin_06 - Large amount of Copper</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCoinText" Priority="0" ImageType="Method">
    <Signature>coinText = GetCoinText(amount, "separator")</Signature>
    <Description>Returns a localized string describing an amount of money</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money in copper (number) </Description>
    </ArgumentList>
    <ArgumentList Name="separator">
      <Description>String to use as separator (', ' is used if nil) (string) </Description>
    </ArgumentList>
    <ReturnList Name="coinText">
      <Description>Text description of the amount using localized names for 'Gold', 'Silver' and 'Copper' (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCoinTextureString" Priority="0" ImageType="Method">
    <Signature>coinText = GetCoinTextureString(amount [, fontSize])</Signature>
    <Description>Returns a string with embedded coin icons describing an amount of money. As in most places where money amounts are shown in the UI, lesser denominations are only shown when non-zero.</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money in copper (number) </Description>
    </ArgumentList>
    <ArgumentList Name="fontSize">
      <Description>Size of the money icons. Defaults to 14. (number) </Description>
    </ArgumentList>
    <ReturnList Name="coinText">
      <Description>Text description of the amount using embedded texture codes for gold, silver, and copper coin icons (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCombatRating" Priority="0" ImageType="Method">
    <Signature>rating = GetCombatRating(ratingIndex)</Signature>
    <Description>Returns the value of a combat rating for the player</Description>
    <ArgumentList Name="ratingIndex">
      <Description>Index of a rating; the following global constants are provided for convenience (number)
CR_BLOCK - Block skill
CR_CRIT_MELEE - Melee critical strike chance
CR_CRIT_RANGED - Ranged critical strike chance
CR_CRIT_SPELL - Spell critical strike chance
CR_CRIT_TAKEN_MELEE - Melee Resilience
CR_CRIT_TAKEN_RANGED - Ranged Resilience
CR_CRIT_TAKEN_SPELL - Spell Resilience
CR_DEFENSE_SKILL - Defense skill
CR_DODGE - Dodge skill
CR_HASTE_MELEE - Melee haste
CR_HASTE_RANGED - Ranged haste
CR_HASTE_SPELL - Spell haste
CR_HIT_MELEE - Melee chance to hit
CR_HIT_RANGED - Ranged chance to hit
CR_HIT_SPELL - Spell chance to hit
CR_HIT_TAKEN_MELEE - Unused
CR_HIT_TAKEN_RANGED - Unused
CR_HIT_TAKEN_SPELL - Unused
CR_PARRY - Parry skill
CR_WEAPON_SKILL - Weapon skill
CR_WEAPON_SKILL_MAINHAND - Main-hand weapon skill
CR_WEAPON_SKILL_OFFHAND - Offhand weapon skill
CR_WEAPON_SKILL_RANGED - Ranged weapon skill</Description>
    </ArgumentList>
    <ReturnList Name="rating">
      <Description>Value of the rating for the player (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCombatRatingBonus" Priority="0" ImageType="Method">
    <Signature>ratingBonus = GetCombatRatingBonus(ratingIndex)</Signature>
    <Description>Returns the percentage effect for the player's current value of a given combat rating. Used in the default UI to show tooltips with actual percentage effects (such as increased parry chance or reduced critical strike damage taken) when mousing over rating information in the Character window.</Description>
    <ArgumentList Name="ratingIndex">
      <Description>Index of a rating; the following global constants are provided for convenience (number)
CR_BLOCK - Block skill
CR_CRIT_MELEE - Melee critical strike chance
CR_CRIT_RANGED - Ranged critical strike chance
CR_CRIT_SPELL - Spell critical strike chance
CR_CRIT_TAKEN_MELEE - Melee Resilience
CR_CRIT_TAKEN_RANGED - Ranged Resilience
CR_CRIT_TAKEN_SPELL - Spell Resilience
CR_DEFENSE_SKILL - Defense skill
CR_DODGE - Dodge skill
CR_HASTE_MELEE - Melee haste
CR_HASTE_RANGED - Ranged haste
CR_HASTE_SPELL - Spell haste
CR_HIT_MELEE - Melee chance to hit
CR_HIT_RANGED - Ranged chance to hit
CR_HIT_SPELL - Spell chance to hit
CR_HIT_TAKEN_MELEE - Unused
CR_HIT_TAKEN_RANGED - Unused
CR_HIT_TAKEN_SPELL - Unused
CR_PARRY - Parry skill
CR_WEAPON_SKILL - Weapon skill
CR_WEAPON_SKILL_MAINHAND - Main-hand weapon skill
CR_WEAPON_SKILL_OFFHAND - Offhand weapon skill
CR_WEAPON_SKILL_RANGED - Ranged weapon skill</Description>
    </ArgumentList>
    <ReturnList Name="ratingBonus">
      <Description>Percentage change in the underlying statistic or mechanic conferred by the player's rating value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetComboPoints" Priority="0" ImageType="Method">
    <Signature>comboPoints = GetComboPoints("unit" [, "target"])</Signature>
    <Description>Returns the player's number of combo points on the target.</Description>
    <ArgumentList Name="unit">
      <Description>Either 'player' or 'vehicle' (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>Unit to check for combo points. (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="comboPoints">
      <Description>Number of combo points (between 0 and MAX_COMBO_POINTS) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCompanionInfo" Priority="0" ImageType="Method">
    <Signature>creatureID, creatureName, spellID, icon, active, mountFlags = GetCompanionInfo("type", index)</Signature>
    <Description>Returns information about a non-combat pet or mount</Description>
    <ArgumentList Name="type">
      <Description>Type of companion (string)
CRITTER - A non-combat pet
MOUNT - A mount</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a companion (between 1 and GetNumCompanions(type)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="creatureID">
      <Description>Unique ID of the companion (usable with PlayerModel:SetCreature) (number) </Description>
    </ReturnList>
    <ReturnList Name="creatureName">
      <Description>Localized name of the companion (string) </Description>
    </ReturnList>
    <ReturnList Name="spellID">
      <Description>The "spell" for summoning the companion (usable with GetSpellLink et al) (number) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the companion (string) </Description>
    </ReturnList>
    <ReturnList Name="active">
      <Description>1 if the companion queried is currently summoned; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="mountFlags">
      <Description>A bitfield that indicates mount capabilities. Only returned for mounts. (bitfield)
0x01 - Ground mount
0x02 - Flying mount
0x04 - Usable at the water's surface
0x08 - Usable underwater
0x10 - Can jump (the turtle mount cannot, for example)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetComparisonAchievementPoints" Priority="0" ImageType="Method">
    <Signature>points = GetComparisonAchievementPoints()</Signature>
    <Description>Returns the comparison unit's total achievement points earned.

Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called.
 </Description>
    <ReturnList Name="points">
      <Description>Total number of achievement points earned by the comparison unit (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetComparisonCategoryNumAchievements" Priority="0" ImageType="Method">
    <Signature>numCompleted = GetComparisonCategoryNumAchievements(id)</Signature>
    <Description>Returns the number of achievements completed by the comparison unit within a category.

Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called.
 </Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement category (number) </Description>
    </ArgumentList>
    <ReturnList Name="numCompleted">
      <Description>Number of achievements completed by the comparison unit in the category (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetComparisonStatistic" Priority="0" ImageType="Method">
    <Signature>info = GetComparisonStatistic(id)</Signature>
    <Description>Returns the comparison unit's data for a statistic.

Only accurate once the INSPECT_ACHIEVEMENT_READY event has fired following a call to SetAchievementComparisonUnit(). No longer accurate once ClearAchievementComparisonUnit() is called.
 </Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of a statistic (number) </Description>
    </ArgumentList>
    <ReturnList Name="info">
      <Description>The comparison unit's data for the statistic, or "--" if none has yet been recorded for it (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerFreeSlots" Priority="0" ImageType="Method">
    <Signature>slotTable = GetContainerFreeSlots(container [, returnTable])</Signature>
    <Description>Returns a list of open slots in a container. The optional argument returnTable allows for performance optimization in cases where this function is expected to be called repeatedly. Rather than creating new tables each time the function is called (eventually requiring garbage collection), an existing table can be recycled. (Note, however, that this function does not clear the table's contents; use wipe() first to guarantee consistent results.)</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="returnTable">
      <Description>Reference to a table to be filled with return values (table) </Description>
    </ArgumentList>
    <ReturnList Name="slotTable">
      <Description>A table listing the indices of open slots in the given container (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetContainerItemCooldown(container, slot)</Signature>
    <Description>Returns cooldown information about an item in the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the item is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemDurability" Priority="0" ImageType="Method">
    <Signature>durability, max = GetContainerItemDurability(container, slot)</Signature>
    <Description>Returns durability status for an item in the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="durability">
      <Description>The item's current durability (number) </Description>
    </ReturnList>
    <ReturnList Name="max">
      <Description>The item's maximum durability (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemEquipmentSetInfo" Priority="0" ImageType="Method">
    <Signature>isInSet, setName = GetContainerItemEquipmentSetInfo(index, slot)</Signature>
    <Description>Returns whether an item in the bags is a part of a saved item set.</Description>
    <ArgumentList Name="index">
      <Description>The ID of the container the item is in. (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>The slot within the container where the item is. (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="isInSet">
      <Description>Indicates whether the item belongs to a saved equipment set. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="setName">
      <Description>The name of the equipment set, as can be obtained from GetEquipmentSetInfo. Is nil of the first return value is false. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemGems" Priority="0" ImageType="Method">
    <Signature>gem1, gem2, gem3 = GetContainerItemGems(container, slot)</Signature>
    <Description>Returns the gems socketed in an item in the player's bags. The IDs returned refer to the gems themselves (not the enchantments they provide), and thus can be passed to GetItemInfo() to get a gem's name, quality, icon, etc.</Description>
    <ArgumentList Name="container">
      <Description>The index of the container (bagID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>The slot within the given container; slots are numbered left-to-right, top-to-bottom, starting with the leftmost slot on the top row (number) </Description>
    </ArgumentList>
    <ReturnList Name="gem1">
      <Description>Item ID of the first gem socketed in the item (itemID) </Description>
    </ReturnList>
    <ReturnList Name="gem2">
      <Description>Item ID of the second gem socketed in the item (itemID) </Description>
    </ReturnList>
    <ReturnList Name="gem3">
      <Description>Item ID of the third gem socketed in the item (itemID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemID" Priority="0" ImageType="Method">
    <Signature>id = GetContainerItemID(container, slot)</Signature>
    <Description>Returns the item ID of an item in the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>Numeric ID of the item in the given slot (itemID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemInfo" Priority="0" ImageType="Method">
    <Signature>texture, count, locked, quality, readable, lootable, link = GetContainerItemInfo(container, slot)</Signature>
    <Description>Returns information about an item in the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to the icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Number of items in the slot (number) </Description>
    </ReturnList>
    <ReturnList Name="locked">
      <Description>1 if the item is locked; otherwise nil. Items become locked while being moved, split, or placed into other UI elements (such as the mail, trade, and auction windows). (1nil) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (or rarity) of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="readable">
      <Description>1 if the item is readable; otherwise nil. This value is used by the default UI to show a special cursor over items such as books and scrolls which can be read by right-clicking. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="lootable">
      <Description>1 if the item is a temporary container containing items that can be looted; otherwise nil. Examples include the Bag of Fishing Treasures and Small Spice Bag rewarded by daily quests, lockboxes (once unlocked), and the trunks occasionally found while fishing. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (itemLink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetContainerItemLink(container, slot)</Signature>
    <Description>Returns a hyperlink for an item in the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemPurchaseCurrency" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetContainerItemPurchaseInfo" Priority="0" ImageType="Method">
    <Signature>money, itemCount, refundSec, currecycount, hasEnchants = GetContainerItemPurchaseInfo(container, slot, IsEquipped)</Signature>
    <Description>Returns information about alternate currencies refunded for returning an item to vendors.
Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase.
If the given container slot is empty, contains an item which cannot be returned for an alternate currency refund, or contains an item for which the refund grace period has expired, all returns are nil.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ArgumentList Name="IsEquipped">
      <Description>wheather to get an equipped item info (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="money">
      <Description>Amount of copper to be refunded (number) </Description>
    </ReturnList>
    <ReturnList Name="itemCount">
      <Description>Number of different item currencies to be refunded (e.g. the price a PvP mount is in 3 currencies, as it requires multiple battlegrounds' Marks of Honor) (number) </Description>
    </ReturnList>
    <ReturnList Name="refundSec">
      <Description>Seconds remaining until this item is no longer eligible to be returned for a refund (number) </Description>
    </ReturnList>
    <ReturnList Name="currecycount">
      <Description>Amount of currency to be refunded (number) </Description>
    </ReturnList>
    <ReturnList Name="hasEnchants">
      <Description>weather the item is enchanted (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemPurchaseItem" Priority="0" ImageType="Method">
    <Signature>texture, quantity, link = GetContainerItemPurchaseItem(container, slot, index)</Signature>
    <Description>Returns information about a specific currency refunded for returning an item to vendors. See GetContainerItemPurchaseInfo for more information about alternate currency refunds. </Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of the currency type; between 1 and itemCount, where itemCount is the 4th return from GetContainerItemPurchaseInfo() for the same container and slot (number) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the currency item (string) </Description>
    </ReturnList>
    <ReturnList Name="quantity">
      <Description>Quantity of the currency item to be refunded (number) </Description>
    </ReturnList>
    <ReturnList Name="link">
      <Description>Hyperlink for the currency item (itemLink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerItemQuestInfo" Priority="0" ImageType="Method">
    <Signature>isQuest, questId, isActive = GetContainerItemQuestInfo(container, slot)</Signature>
    <Description>Returns quest information about an item in the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ReturnList Name="isQuest">
      <Description>true if the item is a quest item, nil otherwise. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="questId">
      <Description>ID of the quest started by the item, nil if the item does not start a quest. (number) </Description>
    </ReturnList>
    <ReturnList Name="isActive">
      <Description>1 if the quest started by the item is in the player's quest log, nil otherwise. (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerNumFreeSlots" Priority="0" ImageType="Method">
    <Signature>freeSlots, bagType = GetContainerNumFreeSlots(container)</Signature>
    <Description>Returns the number of free slots in a container and the types of items it can hold</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ReturnList Name="freeSlots">
      <Description>Number of empty slots in the bag (number) </Description>
    </ReturnList>
    <ReturnList Name="bagType">
      <Description>Bitwise OR of the item families that can be put into the container; see GetItemFamily for details (number, bitfield) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContainerNumSlots" Priority="0" ImageType="Method">
    <Signature>numSlots = GetContainerNumSlots(container)</Signature>
    <Description>Returns the number of slots in one of the player's bags</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ReturnList Name="numSlots">
      <Description>Number of item slots in the container (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetContinentMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetContinentMaps" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCorpseMapPosition" Priority="0" ImageType="Method">
    <Signature>corpseX, corpseY = GetCorpseMapPosition()</Signature>
    <Description>Returns the position of the player's corpse on the world map. Returns 0,0 if the location of the player's corpse is not visible on the current world map.</Description>
    <ReturnList Name="corpseX">
      <Description>Horizontal position of the player's corpse relative to the zone map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="corpseY">
      <Description>Vertical position of the player's corpse relative to the zone map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCorpseRecoveryDelay" Priority="0" ImageType="Method">
    <Signature>timeLeft = GetCorpseRecoveryDelay()</Signature>
    <Description>Returns the amount of time left until the player can recover their corpse. Applies to resurrection spells offered by other units, resurrecting by returning to the player's corpse as a ghost, and to resurrecting at a graveyard's spirit healer, if the player has recently died several times in short succession.</Description>
    <ReturnList Name="timeLeft">
      <Description>Amount of time remaining before the player can resurrect (in seconds); 0 if the player can resurrect immediately (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCritChance" Priority="0" ImageType="Method">
    <Signature>critChance = GetCritChance()</Signature>
    <Description>Returns the player's melee critical strike chance</Description>
    <ReturnList Name="critChance">
      <Description>The player's percentage critical strike chance for melee attacks (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCritChanceFromAgility" Priority="0" ImageType="Method">
    <Signature>critChance = GetCritChanceFromAgility(["unit"])</Signature>
    <Description>Returns additional critical strike chance provided by Agility</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player and pet, defaults to player if omitted (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="critChance">
      <Description>Additional percentage chance of critical strikes conferred by the unit's Agility statistic (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCriteriaSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrencyInfo" Priority="0" ImageType="Method">
    <Signature>name, amount, texturePath, earnedThisWeek, weeklyMax, totalMax, isDiscovered = GetCurrencyInfo(id)</Signature>
    <Description>Returns information about a currency by ID</Description>
    <ArgumentList Name="id">
      <Description>A number representing a currencyID. All currently known currencyIDs can be found at http://www.wowhead.com/currencies (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the currency (string) </Description>
    </ReturnList>
    <ReturnList Name="amount">
      <Description>Amount of the currency the player has (number) </Description>
    </ReturnList>
    <ReturnList Name="texturePath">
      <Description>Path of the texture for the currency's icon (string) </Description>
    </ReturnList>
    <ReturnList Name="earnedThisWeek">
      <Description>Amount of this currency earned this week (number) </Description>
    </ReturnList>
    <ReturnList Name="weeklyMax">
      <Description>Maximum amount of the currency the player can get per week (number) </Description>
    </ReturnList>
    <ReturnList Name="totalMax">
      <Description>Maximum amount of the currency the player can get in total (number) </Description>
    </ReturnList>
    <ReturnList Name="isDiscovered">
      <Description>Whether the character ever got some of this currency (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrencyLink" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrencyListInfo" Priority="0" ImageType="Method">
    <Signature>name, isHeader, isExpanded, isUnused, isWatched, count, extraCurrencyType, icon, itemID = GetCurrencyListInfo(index)</Signature>
    <Description>Returns information about a currency type (or headers in the Currency UI)</Description>
    <ArgumentList Name="index">
      <Description>Index of a currency type in the currency list (between 1 and GetCurrencyListSize()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the currency type or category header (string) </Description>
    </ReturnList>
    <ReturnList Name="isHeader">
      <Description>True if this listing is a category header, false for actual currencies (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isExpanded">
      <Description>True if this listing is a category header whose contents are shown, false for collapsed headers and actual currencies (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isUnused">
      <Description>True if the player has marked this currency as Unused (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isWatched">
      <Description>True if the player has marked this currency to be watched on the backpack UI (boolean) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Amount of the currency the player has (number) </Description>
    </ReturnList>
    <ReturnList Name="extraCurrencyType">
      <Description>1 for Arena points, 2 for Honor points, 0 for other currencies (number) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to a texture representing the currency item (not applicable for Arena/Honor points) (string) </Description>
    </ReturnList>
    <ReturnList Name="itemID">
      <Description>ID for the currency item (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrencyListLink" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrencyListSize" Priority="0" ImageType="Method">
    <Signature>numEntries = GetCurrencyListSize()</Signature>
    <Description>Returns the number of list entries to show in the Currency UI</Description>
    <ReturnList Name="numEntries">
      <Description>Number of currency types (including category headers) to be shown in the Currency UI (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentArenaSeason" Priority="0" ImageType="Method">
    <Signature>season = GetCurrentArenaSeason()</Signature>
    <Description>Returns a number identifying the current arena season. New arena seasons begin every few months, resetting team rankings and providing new rewards.</Description>
    <ReturnList Name="season">
      <Description>Number identifying the current arena season (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentBindingSet" Priority="0" ImageType="Method">
    <Signature>bindingSet = GetCurrentBindingSet()</Signature>
    <Description>Returns which set of key bindings is currently in use</Description>
    <ReturnList Name="bindingSet">
      <Description>Set of bindings currently in use (number)
1 - Key bindings shared by all characters
2 - Character specific key bindings</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentEventID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrentGuildBankTab" Priority="0" ImageType="Method">
    <Signature>index = GetCurrentGuildBankTab()</Signature>
    <Description>Returns the currently selected guild bank tab</Description>
    <ReturnList Name="index">
      <Description>Index of the selected guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentGuildPerkIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrentKeyBoardFocus" Priority="0" ImageType="Method">
    <Signature>frame = GetCurrentKeyBoardFocus()</Signature>
    <Description>Returns the frame currently handling keyboard input. Typically an EditBox</Description>
    <ReturnList Name="frame">
      <Description>Frame currently handling keyboard input, or nil if no frame is currently focused (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentLevelFeatures" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrentLevelSpells" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrentMapAreaID" Priority="0" ImageType="Method">
    <Signature>areaID = GetCurrentMapAreaID()</Signature>
    <Description>Returns an ID number for the current map zone.
Currently only used in the default UI to determine whether the Wintergrasp map is showing (and if so, display the time remaining until the next battle).</Description>
    <ReturnList Name="areaID">
      <Description>A number identifying the current map zone (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentMapContinent" Priority="0" ImageType="Method">
    <Signature>continent = GetCurrentMapContinent()</Signature>
    <Description>Returns the current world map continent</Description>
    <ReturnList Name="continent">
      <Description>Index of the world map's current continent (in the list returned by GetMapContinents(), or one of the following values) (number)
-1 - Cosmic map
0 - Azeroth
1 - Kalimdor
2 - Eastern Kingdoms
3 - Outland
4 - Northrend
5 - The Maelstrom
6 - Pandaria</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentMapDungeonLevel" Priority="0" ImageType="Method">
    <Signature>dungeonLevel, x1, y1, x2, y2 = GetCurrentMapDungeonLevel()</Signature>
    <Description>Returns which map image is currently selected on the world map (for zones which use more than one map image). Used in zones with more than one "floor" or area, such as Dalaran and several Wrath of the Lich King dungeons and raids. More than one map image may contain the player's current location; if the world map has not been explicitly set to show a particular area, this returns whichever is the "best" match.
The coordinates provided are used to place the different dungeon maps relative to each other.</Description>
    <ReturnList Name="dungeonLevel">
      <Description>Index of the current map image (number) </Description>
    </ReturnList>
    <ReturnList Name="x1">
      <Description>The x coordinate of the left side of the map (number) </Description>
    </ReturnList>
    <ReturnList Name="y1">
      <Description>The y coordinate of the top side of the map (number) </Description>
    </ReturnList>
    <ReturnList Name="x2">
      <Description>The x coordinate of the right side of the map (number) </Description>
    </ReturnList>
    <ReturnList Name="y2">
      <Description>The y coordinate of the bottom side of the map (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentMapLevelRange" Priority="0" ImageType="Method">
    <Signature>minLevel, maxLevel = GetCurrentMapLevelRange()</Signature>
    <Description>Returns the level range of the currently shown zone.</Description>
    <ReturnList Name="minLevel">
      <Description>Minimum level of the current map image (number) </Description>
    </ReturnList>
    <ReturnList Name="maxLevel">
      <Description>Maximum level of the current map image (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentMapZone" Priority="0" ImageType="Method">
    <Signature>zone = GetCurrentMapZone()</Signature>
    <Description>Returns the current world map zone</Description>
    <ReturnList Name="zone">
      <Description>Index of a zone within the continent (in the list returned by GetMapZones(GetCurrentMapContinent())), or 0 for the continent map (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentMultisampleFormat" Priority="0" ImageType="Method">
    <Signature>index = GetCurrentMultisampleFormat()</Signature>
    <Description>Returns the index of the current multisample setting. The index returned corresponds to the individual settings described by GetMultisampleFormats() (each a set of three values).</Description>
    <ReturnList Name="index">
      <Description>Index of the current multisample setting (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentRaidDifficulty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrentRefresh" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetCurrentResolution" Priority="0" ImageType="Method">
    <Signature>index = GetCurrentResolution()</Signature>
    <Description>Returns the index of the current resolution setting. For the dimensions of a resolution setting, use GetScreenResolutions().</Description>
    <ReturnList Name="index">
      <Description>Index of the current resolution setting (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCurrentTitle" Priority="0" ImageType="Method">
    <Signature>currentTitle = GetCurrentTitle()</Signature>
    <Description>Returns the currently selected player title</Description>
    <ReturnList Name="currentTitle">
      <Description>Index of the player's current title (between 1 and GetNumTitles()) (integer) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCursorInfo" Priority="0" ImageType="Method">
    <Signature>type, data, subType, subData = GetCursorInfo()</Signature>
    <Description>Returns information about the contents of the cursor</Description>
    <ReturnList Name="type">
      <Description>Type of data attached to the cursor (string)
battlepet
companion
equipmentset
flyout
guildbankmoney
item
macro
merchant
money
petaction
spell</Description>
    </ReturnList>
    <ReturnList Name="data">
      <Description>Identifier for the data on the cursor; varies by type: (value)
battlepet - Hexadecimal flag representation - unknown use.
companion - Index of the companion in the non-combat pet or mount list (number)
equipmentset - Name of the equipment set (string)
guildbankmoney - Amount of the money from the guild bank (in copper) (number)
item - Numeric identifier for the item (number, itemID)
macro - Index of the macro in the macro listing (number, macroID)
merchant - Index of the item in the vendor's listings (number)
money - Amount of the player's money (in copper) (number)
petaction - is nil
spell - Index of the spell in the player's spellbook (number, spellbookID)</Description>
    </ReturnList>
    <ReturnList Name="subType">
      <Description>Secondary identifier for the data on the cursor; used only for certain types: (string)
companion - "CRITTER" or "MOUNT", indicating whether the returned data is an index in the non-combat pet or mount list
item - A complete hyperlink for the item
spell - "spell" or "pet", indicating whether the returned data is an index in the player's or pet's spellbook</Description>
    </ReturnList>
    <ReturnList Name="subData">
      <Description>Secondary data based on subType: (value)
spell - Spell ID.</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCursorMoney" Priority="0" ImageType="Method">
    <Signature>cursorMoney = GetCursorMoney()</Signature>
    <Description>Returns the amount of money currently on the cursor</Description>
    <ReturnList Name="cursorMoney">
      <Description>Amount of money currently on the cursor (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetCursorPosition" Priority="0" ImageType="Method">
    <Signature>cursorX, cursorY = GetCursorPosition()</Signature>
    <Description>Returns the absolute position of the mouse cursor</Description>
    <ReturnList Name="cursorX">
      <Description>Scale-independent X coordinate of the cursor's current position (number) </Description>
    </ReturnList>
    <ReturnList Name="cursorY">
      <Description>Scale-independent Y coordinate of the cursor's current position (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetDailyQuestsCompleted" Priority="0" ImageType="Method">
    <Signature>dailyQuestsComplete = GetDailyQuestsCompleted()</Signature>
    <Description>Returns the number of daily quests the player has completed today. The daily quest period resets at or around 3:00 AM server time on most realms.</Description>
    <ReturnList Name="dailyQuestsComplete">
      <Description>Number of daily quests completed in the current period (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetDeathReleasePosition" Priority="0" ImageType="Method">
    <Signature>graveyardX, graveyardY = GetDeathReleasePosition()</Signature>
    <Description>Returns the location of the graveyard where the player's spirit will appear upon release. Returns 0,0 if the player is not dead or the graveyard's location is not visible on the current world map.</Description>
    <ReturnList Name="graveyardX">
      <Description>Horizontal position of the graveyard relative to the zone map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="graveyardY">
      <Description>Vertical position of the graveyard relative to the zone map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetDebugAnimationStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDebugSpellEffects" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDebugStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDebugZoneMap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDefaultLanguage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDefaultVideoOptions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDemotionRank" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDestinationReforgeStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDetailColumnString" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDistanceSqToQuest" Priority="0" ImageType="Method">
    <Signature>distance = GetDistanceSqToQuest(index)</Signature>
    <Description>Returns a (squared) distance to the quest objective location</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="distance">
      <Description>Squared distance in yards to the quest objective location, 0 if the distance cannot be determined, or nil if the index points at a log header (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetDodgeChance" Priority="0" ImageType="Method">
    <Signature>chance = GetDodgeChance()</Signature>
    <Description>Returns the player's chance to dodge melee attacks</Description>
    <ReturnList Name="chance">
      <Description>Percentage chance to dodge melee attacks (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetDownloadedPercentage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDungeonDifficultyID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDungeonForRandomSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDungeonInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDungeonMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetDungeonMaps" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetEclipseDirection" Priority="0" ImageType="Method">
    <Signature>direction = GetEclipseDirection()</Signature>
    <Description>Returns the direction in which the players eclipse is moving.</Description>
    <ReturnList Name="direction">
      <Description>The direction in which eclipse is moving. Either sun or moon (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetEquipmentSetInfo" Priority="0" ImageType="Method">
    <Signature>name, icon, setID, isEquipped, numItems, numEquipped, numInventory, numMissing, numIgnored = GetEquipmentSetInfo(index)</Signature>
    <Description>Returns information about an equipment set (specified by index)</Description>
    <ArgumentList Name="index">
      <Description>Index of an equipment set (between 1 and GetNumEquipmentSets()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the equipment set (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the equipment set (string) </Description>
    </ReturnList>
    <ReturnList Name="setID">
      <Description>Internal ID number for the set (not used elsewhere in API) (number) </Description>
    </ReturnList>
    <ReturnList Name="isEquipped">
      <Description>If the set is equipped returns true, if not, false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of items in the set (number) </Description>
    </ReturnList>
    <ReturnList Name="numEquipped">
      <Description>Number of items in the set currently equipped (number) </Description>
    </ReturnList>
    <ReturnList Name="numInventory">
      <Description>Number of items from the set in current bags (number) </Description>
    </ReturnList>
    <ReturnList Name="numMissing">
      <Description>Number of items missing from the set (current bags) (number) </Description>
    </ReturnList>
    <ReturnList Name="numIgnored">
      <Description>Number of ignored slots (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetEquipmentSetInfoByName" Priority="0" ImageType="Method">
    <Signature>icon, setID, isEquipped, numItems, numEquipped, unknown, numMissing, numIgnored = GetEquipmentSetInfoByName("name")</Signature>
    <Description>Returns information about an equipment set</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the equipment set (string) </Description>
    </ReturnList>
    <ReturnList Name="setID">
      <Description>Internal ID number for the set (not used elsewhere in API) (number) </Description>
    </ReturnList>
    <ReturnList Name="isEquipped">
      <Description>If the set is equipped returns true, if not, false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of items in the set (number) </Description>
    </ReturnList>
    <ReturnList Name="numEquipped">
      <Description>Number of items in the set currently equipped (number) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>Unknown, always seem to be 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="numMissing">
      <Description>Number of items missing from the set (current bags) (number) </Description>
    </ReturnList>
    <ReturnList Name="numIgnored">
      <Description>Number of ignored slots (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetEquipmentSetItemIDs" Priority="0" ImageType="Method">
    <Signature>itemIDs = GetEquipmentSetItemIDs("name")</Signature>
    <Description>Returns a table listing the items in an equipment set</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
    <ReturnList Name="itemIDs">
      <Description>A table listing the itemIDs of the set's contents, keyed by inventoryID (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetEquipmentSetLocations" Priority="0" ImageType="Method">
    <Signature>itemIDs = GetEquipmentSetLocations("name")</Signature>
    <Description>Returns a table listing the locations of the items in an equipment set</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
    <ReturnList Name="itemIDs">
      <Description>A table listing the itemLocations of the set's contents, keyed by inventoryID (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetEventCPUUsage" Priority="0" ImageType="Method">
    <Signature>usage, numEvents = GetEventCPUUsage(["event"])</Signature>
    <Description>Returns information about the CPU usage of an event. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.</Description>
    <ArgumentList Name="event">
      <Description>Name of an event; if omitted, returns usage information for all events (string) </Description>
    </ArgumentList>
    <ReturnList Name="usage">
      <Description>Amount of CPU time used by handlers for the event (in milliseconds) since the UI was loaded or ResetCPUUsage() was last called (number) </Description>
    </ReturnList>
    <ReturnList Name="numEvents">
      <Description>Number of times the event has fired this session (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetEventTime" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetExistingLocales" Priority="0" ImageType="Method">
    <Signature>... = GetExistingLocales()</Signature>
    <Description>Returns a list of installed localization packs for the WoW client</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the four-letter locale code (see GetLocale()) for an installed localization (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetExistingSocketInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, name = GetExistingSocketInfo(index)</Signature>
    <Description>Returns information about a permanently socketed gem. If the given socket contains a permanently socketed gem, returns information for that gem (even if a new gem has been dropped in the socket to overwrite the existing gem, but has not yet been confirmed). If the socket is empty, returns nil.
Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a gem socket (between 1 and GetNumSockets()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the socketed gem (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the socketed gem (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>1 if the gem matches the socket's color; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetExistingSocketLink" Priority="0" ImageType="Method">
    <Signature>link = GetExistingSocketLink(index)</Signature>
    <Description>Returns a hyperlink for a permanently socketed gem. If the given socket contains a permanently socketed gem, returns an item link for that gem (even if a new gem has been dropped in the socket to overwrite the existing gem, but has not yet been confirmed). If the socket is empty, returns nil.
Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a gem socket (between 1 and GetNumSockets()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the socketed gem (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetExpansionLevel" Priority="0" ImageType="Method">
    <Signature>expansion = GetExpansionLevel()</Signature>
    <Description>Returns the expansion level of the game. Returns the expansion level active on the current account. Differs from GetAccountExpansionLevel() as that function returns the highest purchased expansion level, while GetExpansionLevel() returns the currently active one.</Description>
    <ReturnList Name="expansion">
      <Description>A number determining the active expansion level of the game (number, expansionID)
0 - World of Warcraft ("Classic")
1 - World of Warcraft: The Burning Crusade
2 - World of Warcraft: Wrath of the Lich King
3 - World of Warcraft: Cataclysm
4 - World of Warcraft: Mists of Pandaria</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetExpertise" Priority="0" ImageType="Method">
    <Signature>expertise = GetExpertise()</Signature>
    <Description>Returns the player's current expertise value</Description>
    <ReturnList Name="expertise">
      <Description>The player's expertise value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetExtendedItemInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetExtraBarIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetFacialHairCustomization" Priority="0" ImageType="Method">
    <Signature>token = GetFacialHairCustomization()</Signature>
    <Description>Returns a token used for displaying facial feature customization options. The token referred to by this function can be used to look up a global variable containing localized names for the customization options available to the player's race at character creation time and in the Barbershop UI; see example.</Description>
    <ReturnList Name="token">
      <Description>Part of a localized string token for displaying facial feature options for the player's race (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFactionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetFactionInfoByID" Priority="0" ImageType="Method">
    <Signature>name, description, standingID, barMin, barMax, barValue, atWarWith, canToggleAtWar, isHeader, isCollapsed, hasRep, isWatched, isChild = GetFactionInfoByID(factionID)</Signature>
    <Description>Returns information about a faction or header listing. Returns information about a faction regardless of whether the faction is known to the player (indeed, even for factions only available to the opposing alliance); see GetFactionInfo for information about factions listed in the player's Reputation UI.
Faction IDs used by this function match those found on database sites (e.g. Guardians of Hyjal) and are also returned by GetQuestLogRewardFactionInfo.</Description>
    <ArgumentList Name="factionID">
      <Description>Unique numeric identifier for a faction (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the faction (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Brief description of the faction, as displayed in the default UI's detail window for a selected faction (string) </Description>
    </ReturnList>
    <ReturnList Name="standingID">
      <Description>Current standing with the given faction (number, standingID)
1 - Hated
2 - Hostile
3 - Unfriendly
4 - Neutral
5 - Friendly
6 - Honored
7 - Revered
8 - Exalted</Description>
    </ReturnList>
    <ReturnList Name="barMin">
      <Description>The minimum value of the reputation bar at the given standing (number) </Description>
    </ReturnList>
    <ReturnList Name="barMax">
      <Description>The maximum value of the reputation bar at the given standing (number) </Description>
    </ReturnList>
    <ReturnList Name="barValue">
      <Description>The player's current reputation with the faction (number) </Description>
    </ReturnList>
    <ReturnList Name="atWarWith">
      <Description>1 if the player is at war with the given faction, otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="canToggleAtWar">
      <Description>1 if the player can declare war with the given faction, otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isHeader">
      <Description>1 if the index refers to a faction group header (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isCollapsed">
      <Description>1 if the index refers to a faction group header and currently collapsed (1nil) </Description>
    </ReturnList>
    <ReturnList Name="hasRep">
      <Description>1 if the index refers to a faction group header whose reputation value should be displayed (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isWatched">
      <Description>1 if the faction is currently being watched (i.e. displayed above the experience bar) (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isChild">
      <Description>1 if the index refers to a faction sub-group header within another group, or to an individual faction within a sub-group (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFileStreamingStatus" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetFirstTradeSkill" Priority="0" ImageType="Method">
    <Signature>index = GetFirstTradeSkill()</Signature>
    <Description>Returns the index of the first non-header in the trade skill listing</Description>
    <ReturnList Name="index">
      <Description>Index of the first trade skill recipe (as opposed to group headers) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFlyoutID" Priority="0" ImageType="Method">
    <Signature>flyoutID = GetFlyoutID(index)</Signature>
    <Description>Returns the internal flyoutID for a given flyout index. The input parameter index is from 1 to the number provided by GetNumFlyouts()</Description>
    <ArgumentList Name="index">
      <Description>flyout index (number) </Description>
    </ArgumentList>
    <ReturnList Name="flyoutID">
      <Description>flyout ID to be used in GetFlyoutInfo(flyoutID) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFlyoutInfo" Priority="0" ImageType="Method">
    <Signature>name, description, numSlots, isKnown = GetFlyoutInfo(id)</Signature>
    <Description>Returns information about a flyout slot. Flyout IDs are provided by GetFlyoutID(index).</Description>
    <ArgumentList Name="id">
      <Description>flyout ID (from GetFlyoutID(index) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>The name of the flyout element (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>A description of the flyout element (string) </Description>
    </ReturnList>
    <ReturnList Name="numSlots">
      <Description>The number of slots in the flyout element (number) </Description>
    </ReturnList>
    <ReturnList Name="isKnown">
      <Description>Indicates whether or not the player knows the spell associated with the given flyout element (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFlyoutSlotInfo" Priority="0" ImageType="Method">
    <Signature>spellID, isKnown = GetFlyoutSlotInfo(flyoutID, slot)</Signature>
    <Description>Returns information about a flyout ability slot</Description>
    <ArgumentList Name="flyoutID">
      <Description>flyout ID, which can be obtained from GetFlyoutID(index) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>The slot index for the given flyout (number) </Description>
    </ArgumentList>
    <ReturnList Name="spellID">
      <Description>Spell ID number (number, spellID) </Description>
    </ReturnList>
    <ReturnList Name="isKnown">
      <Description>Whether or not the player knows the spell (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFrameCPUUsage" Priority="0" ImageType="Method">
    <Signature>usage, calls = GetFrameCPUUsage(frame, includeChildren)</Signature>
    <Description>Returns information about CPU usage by a frame's script handlers. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.</Description>
    <ArgumentList Name="frame">
      <Description>A Frame object (table) </Description>
    </ArgumentList>
    <ArgumentList Name="includeChildren">
      <Description>True to include CPU usage by children of the frame; false to include only the frame itself (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="usage">
      <Description>Amount of CPU time used by the frame's script handlers (in milliseconds) since the UI was loaded or ResetCPUUsage() was last called (number) </Description>
    </ReturnList>
    <ReturnList Name="calls">
      <Description>Number of function calls made from the frame's script handlers (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFramerate" Priority="0" ImageType="Method">
    <Signature>framerate = GetFramerate()</Signature>
    <Description>Returns the number of frames per second rendered by the client</Description>
    <ReturnList Name="framerate">
      <Description>Number of frames per second rendered by the client (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFramesRegisteredForEvent" Priority="0" ImageType="Method">
    <Signature>... = GetFramesRegisteredForEvent("event")</Signature>
    <Description>Returns all frames registered for a given event</Description>
    <ArgumentList Name="event">
      <Description>An event name (string) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of tables, each a reference to a frame registered for the event (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFriendInfo" Priority="0" ImageType="Method">
    <Signature>name, level, class, area, connected, status, note, RAF = GetFriendInfo(index)</Signature>
    <Description>Returns information about a character on the player's friends list</Description>
    <ArgumentList Name="index">
      <Description>Index of a character in the Friends list (between 1 and GetNumFriends()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the friend (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Character level of the friend, if online; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Localized name of the friend's class, if online; otherwise UNKNOWN (string) </Description>
    </ReturnList>
    <ReturnList Name="area">
      <Description>Name of the zone in which the friend is located, if online; otherwise UNKNOWN (string) </Description>
    </ReturnList>
    <ReturnList Name="connected">
      <Description>1 if the friend is online; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="status">
      <Description>A label indicating the friend's status ("&lt;AFK&gt;" or "&lt;DND&gt;"), or the empty string ("") if not applicable (string) </Description>
    </ReturnList>
    <ReturnList Name="note">
      <Description>Note text associated with the friend (string) </Description>
    </ReturnList>
    <ReturnList Name="RAF">
      <Description>1 if the friend's account is linked to the player's via the Recruit-A-Friend program; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetFriendshipReputation" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetFriendshipReputationRanks" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetFunctionCPUUsage" Priority="0" ImageType="Method">
    <Signature>usage, calls = GetFunctionCPUUsage(function, includeSubroutines)</Signature>
    <Description>Returns information about CPU usage by a function. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.</Description>
    <ArgumentList Name="function">
      <Description>A function reference (function) </Description>
    </ArgumentList>
    <ArgumentList Name="includeSubroutines">
      <Description>True to include time spent in other functions called by the given function; false to count only time spent in the function body (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="usage">
      <Description>Amount of CPU time used by the function (in milliseconds) since the UI was loaded or ResetCPUUsage() was last called (number) </Description>
    </ReturnList>
    <ReturnList Name="calls">
      <Description>Number times the function was called (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGMStatus" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGMTicket" Priority="0" ImageType="Method">
    <Signature>GetGMTicket()</Signature>
    <Description>Requests GM ticket status from the server. The UPDATE_TICKET event fires when data is ready.</Description>
  </WowApi>
  <WowApi Name="GetGMTicketCategories" Priority="0" ImageType="Method">
    <Signature>... = GetGMTicketCategories()</Signature>
    <Description>Returns a list of available GM ticket categories. No longer used in the current GM Help UI.</Description>
    <ReturnList Name="...">
      <Description>A variable number of categories (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGameTime" Priority="0" ImageType="Method">
    <Signature>hour, minute = GetGameTime()</Signature>
    <Description>Returns the current realm (server) time. Warning! When player is on an instance server (Dungeon, Arena, Battleground) GetGameTime() might return different server time than on the player server. This is caused by fact that some instance servers run in different timezone that players servers.</Description>
    <ReturnList Name="hour">
      <Description>Hour portion of the time (on a 24-hour clock) (number) </Description>
    </ReturnList>
    <ReturnList Name="minute">
      <Description>Minute portion of the time (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGamma" Priority="0" ImageType="Method">
    <Signature>gamma = GetGamma()</Signature>
    <Description>Returns the current display gamma setting. Gamma value determines the contrast between lighter and darker portions of the game display; for a detailed explanation see the Wikipedia entry on Gamma correction entry.</Description>
    <ReturnList Name="gamma">
      <Description>Current gamma setting (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGlyphClearInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGlyphInfo" Priority="0" ImageType="Method">
    <Signature>name, glyphType, isKnown, icon, castSpell = GetGlyphInfo(index)</Signature>
    <Description>Returns information about a glyph in the glyph list.
This function is used to iterate through all the glyphs the current class can use, whether known or not.
The spell ID referenced in the fifth return castSpell refers to the spell used to put the glyph in the socket -- not the Inscription spell that creates a glyph item, but the spell associated with that item's "Use:" effect.</Description>
    <ArgumentList Name="index">
      <Description>Which glyph button to query (between 1 and GetNumGlyphs()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Full name of the glyph (localized) (string) </Description>
    </ReturnList>
    <ReturnList Name="glyphType">
      <Description>1 for minor glyphs, 2 for major glyphs, 3 for prime glyphs (number) </Description>
    </ReturnList>
    <ReturnList Name="isKnown">
      <Description>True if the glyph is known, false otherwise (boolean) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to a texture for the glyph (string) </Description>
    </ReturnList>
    <ReturnList Name="castSpell">
      <Description>Spell ID of the spell that will inscribe the glyph into a socket (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGlyphLink" Priority="0" ImageType="Method">
    <Signature>link = GetGlyphLink(socket, talentGroup)</Signature>
    <Description>Gets a hyperlink for the contents of a glyph socket.
Glyph links are distinct from item and spell links: e.g. "|cff66bbff|Hglyph:21:361|h[Glyph of Hunter's Mark]|h|r".</Description>
    <ArgumentList Name="socket">
      <Description>Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex) </Description>
    </ArgumentList>
    <ArgumentList Name="talentGroup">
      <Description>Which set of glyphs to query, if the player has Dual Talent Specialization enabled (number)
1 - Primary Talents
2 - Secondary Talents
nil - Currently active talents</Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the glyph socket's contents, or "" if the socket is empty (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGlyphLinkByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGlyphSocketInfo" Priority="0" ImageType="Method">
    <Signature>enabled, glyphType, glyphTooltipIndex, glyphSpell, icon = GetGlyphSocketInfo(socket, talentGroup)</Signature>
    <Description>Returns information about a glyph socket and its contents.
The spell ID referenced in the third return glyphSpell refers to the spell used to put the glyph in the socket -- not the Inscription spell that creates a glyph item, but the spell associated with that item's "Use:" effect.</Description>
    <ArgumentList Name="socket">
      <Description>Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex) </Description>
    </ArgumentList>
    <ArgumentList Name="talentGroup">
      <Description>Which set of glyphs to query, if the player has Dual Talent Specialization enabled (number)
1 - Primary Talents
2 - Secondary Talents
nil - Currently active talents</Description>
    </ArgumentList>
    <ReturnList Name="enabled">
      <Description>True if the socket can be given a glyph at the player's current level; false if the socket is locked (boolean) </Description>
    </ReturnList>
    <ReturnList Name="glyphType">
      <Description>1 for minor glyph sockets, 2 for major glyph sockets, 3 for prime glyph sockets (number) </Description>
    </ReturnList>
    <ReturnList Name="glyphTooltipIndex">
      <Description>Index to be used with GLYPH_SLOT_TOOLTIP# for the overlay (number) </Description>
    </ReturnList>
    <ReturnList Name="glyphSpell">
      <Description>Spell ID of the spell that inscribed a glyph into the socket, or nil if the socket is empty (number) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to a texture for the glyph inscribed into the socket, or nil if the socket is empty (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGossipActiveQuests" Priority="0" ImageType="Method">
    <Signature>name, level, isTrivial, isComplete, isLegendary, ... = GetGossipActiveQuests()</Signature>
    <Description>Returns a list of quests which can be turned in to the current Gossip NPC. For quests offered by the NPC, see GetGossipAvailableQuests().</Description>
    <ReturnList Name="name">
      <Description>Name of the quest (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Suggested character level for attempting the quest (number) </Description>
    </ReturnList>
    <ReturnList Name="isTrivial">
      <Description>1 if the quest is considered "trivial" at the player's level (rewards no XP); otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isComplete">
      <Description>1 if the quest is complete; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isLegendary">
      <Description>1 if the quest is legendary; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional name, level, isTrivial, isComplete, isLegendary values for each active quest (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGossipAvailableQuests" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGossipOptions" Priority="0" ImageType="Method">
    <Signature>text, gossipType, ... = GetGossipOptions()</Signature>
    <Description>Returns a list of interaction options for the Gossip NPC</Description>
    <ReturnList Name="text">
      <Description>Text to be displayed for the gossip option (string) </Description>
    </ReturnList>
    <ReturnList Name="gossipType">
      <Description>Non-localized string indicating the type of gossip option (string)
Banker - Begin a Bank interaction
BattleMaster - Queue for a battleground instance
Binder - Set the player's Hearthstone location
Gossip - Talk to the NPC
Tabard - Begin a Tabard design interaction
Taxi - Begin a Taxi (flight master) interaction
Trainer - Begin a Trainer interaction
Vendor - Begin a Merchant interaction</Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional text, gossipType values for each gossip option available (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGossipText" Priority="0" ImageType="Method">
    <Signature>text = GetGossipText()</Signature>
    <Description>Returns greeting or other text to be displayed in an NPC dialog</Description>
    <ReturnList Name="text">
      <Description>Text to be displayed for the NPC conversation (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGraphicsAPIs" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGreetingText" Priority="0" ImageType="Method">
    <Signature>greetingText = GetGreetingText()</Signature>
    <Description>Returns the greeting text displayed for quest NPCs with multiple quests. Not used often; most quest NPCs offering multiple quests (and/or other options) use the Gossip functions to provide a greeting (see GetGossipText()).</Description>
    <ReturnList Name="greetingText">
      <Description>Text to be displayed before choosing from among the NPC's multiple quests (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildAchievementMemberInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildAchievementMembers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildAchievementNumMembers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildApplicantInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildApplicantSelection" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildBankBonusDepositMoney" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildBankItemInfo" Priority="0" ImageType="Method">
    <Signature>texture, count, locked = GetGuildBankItemInfo(tab, slot)</Signature>
    <Description>Returns information about the contents of a guild bank item slot</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="GetGuildBankItemLink" Priority="0" ImageType="Method">
    <Signature>item = GetGuildBankItemLink(tab, slot)</Signature>
    <Description>Returns a hyperlink for an item in the guild bank</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot in the guild bank tab (between 1 and MAX_GUILDBANK_SLOTS_PER_TAB) (number) </Description>
    </ArgumentList>
    <ReturnList Name="item">
      <Description>A hyperlink for the contents of the slot (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankMoney" Priority="0" ImageType="Method">
    <Signature>guildBankMoney = GetGuildBankMoney()</Signature>
    <Description>Returns the amount of money in the guild bank. The return value is cached and returns the last value seen when not interacting with a guild bank vault. This cache works across characters, and is updated when the GUILDBANK_UPDATE_MONEY or GUILDBANKFRAME_OPENED event fires. If no player character has accessed a guild bank since the game client was launched, this function returns 0.</Description>
    <ReturnList Name="guildBankMoney">
      <Description>Amount of money in the guild bank (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankMoneyTransaction" Priority="0" ImageType="Method">
    <Signature>type, name, year, month, day, hour = GetGuildBankMoneyTransaction(index)</Signature>
    <Description>Returns information about a transaction in the guild bank money log</Description>
    <ArgumentList Name="index">
      <Description>Index of a transaction in the money log (between 1 and GetNumGuildBankMoneyTransactions()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Type of log event (string)
deposit - Deposit into the guildbank
repair - Repair cost withdrawal from the guildbank
withdraw - Withdrawal from the guildbank</Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the guild member responsible for the event, or nil if the name is unknown (string) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Number of years since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Number of months since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Number of days since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>Number of hours since the event occurred (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankTabCost" Priority="0" ImageType="Method">
    <Signature>tabCost = GetGuildBankTabCost()</Signature>
    <Description>Returns the cost of the next available guild bank tab</Description>
    <ReturnList Name="tabCost">
      <Description>Cost to purchase the next guild bank tab (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankTabInfo" Priority="0" ImageType="Method">
    <Signature>name, icon, isViewable, canDeposit, numWithdrawals, remainingWithdrawals = GetGuildBankTabInfo(tab)</Signature>
    <Description>Returns information about a guild bank tab</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the tab (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to the icon texture for the tab (string) </Description>
    </ReturnList>
    <ReturnList Name="isViewable">
      <Description>1 if the player is allowed to view the contents of the tab; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="canDeposit">
      <Description>1 if the player is allowed to deposit items into the tab; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="numWithdrawals">
      <Description>Maximum number of items (stacks) the player is allowed to withdraw from the tab per day (number) </Description>
    </ReturnList>
    <ReturnList Name="remainingWithdrawals">
      <Description>Maximum number of items (stacks) the player is currently allowed to withdraw from the tab (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankTabPermissions" Priority="0" ImageType="Method">
    <Signature>canView, canDeposit, canUpdateText, numWithdrawls = GetGuildBankTabPermissions(tab)</Signature>
    <Description>Returns information about guild bank tab privileges for the guild rank currently being edited. Used in the default UI's guild control panel.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canView">
      <Description>1 if the guild rank has permission to view the tab's contents; otherwise nil. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="canDeposit">
      <Description>1 if the guild rank has permission to deposit items into the tab; otherwise nil. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="canUpdateText">
      <Description>1 if the guild rank can update the tab's info text; otherwise nil. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="numWithdrawls">
      <Description>Maximum number of withdrawals per day the guild rank is allowed for the given tab. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankText" Priority="0" ImageType="Method">
    <Signature>text = GetGuildBankText(tab)</Signature>
    <Description>Returns text associated with a guild bank tab. Only returns valid data after QueryGuildBankText() has been called to retrieve the text from the server and the following GUILDBANK_UPDATE_TEXT event has fired.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetGuildBankTransaction" Priority="0" ImageType="Method">
    <Signature>type, name, itemLink, count, tab1, tab2, year, month, day, hour = GetGuildBankTransaction(tab, index)</Signature>
    <Description>Returns information about a transaction in the log for a guild bank tab. Only returns valid information following the GUILDBANKLOG_UPDATE event which fires after calling QueryGuildBankLog().</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a log entry (between 1 and GetNumGuildBankTransactions(tab)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Type of transaction (string)
deposit
move
repair
withdraw</Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the guild member responsible for the transaction (string) </Description>
    </ReturnList>
    <ReturnList Name="itemLink">
      <Description>A hyperlink for the item involved in the transaction (string, hyperlink) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Number of stacked items involved in the transaction (number) </Description>
    </ReturnList>
    <ReturnList Name="tab1">
      <Description>Index of the source tab, if the item was moved between tabs (number) </Description>
    </ReturnList>
    <ReturnList Name="tab2">
      <Description>Index of the destination tab, if the item was moved between tabs (number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Number of years since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Number of months since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Number of days since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>Number of hours since the event occurred (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildBankWithdrawGoldLimit" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildBankWithdrawMoney" Priority="0" ImageType="Method">
    <Signature>withdrawLimit = GetGuildBankWithdrawMoney()</Signature>
    <Description>Returns the amount of money the player is allowed to withdraw from the guild bank per day</Description>
    <ReturnList Name="withdrawLimit">
      <Description>Amount of money the player is allowed to withdraw from the guild bank per day (in copper), or -1 if the player has unlimited withdrawal privileges (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildCategoryList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildChallengeInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildCharterCost" Priority="0" ImageType="Method">
    <Signature>cost = GetGuildCharterCost()</Signature>
    <Description>Returns the cost to purchase a guild charter. Usable if the player is interacting with a guild registrar (i.e. between the GUILD_REGISTRAR_SHOW and GUILD_REGISTRAR_CLOSED events).</Description>
    <ReturnList Name="cost">
      <Description>Cost to purchase a guild charter (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildEventInfo" Priority="0" ImageType="Method">
    <Signature>type, player1, player2, rank, year, month, day, hour = GetGuildEventInfo(index)</Signature>
    <Description>Returns information about an entry in the guild event log. Only returns valid data after calling QueryGuildEventLog() and the following GUILD_EVENT_LOG_UPDATE event has fired.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the guild event log (between 1 and GetNumGuildEvents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Type of event (example descriptions from the default UI below) (string)
demote - player1 demotes player2 to rank.
invite - player1 invites player2 to the guild.
join - player1 joins the guild.
promote - player1 promotes player2 to rank.
quit - player1 has quit the guild.
remove - player1 removes player2 from the guild.</Description>
    </ReturnList>
    <ReturnList Name="player1">
      <Description>First actor in the event (string) </Description>
    </ReturnList>
    <ReturnList Name="player2">
      <Description>Second actor in the event, if applicable (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Name of the rank related to promote/demote events (string) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>Number of years since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>Number of months since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>Number of days since the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="hour">
      <Description>Number of hours since the event occurred (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildExpirationTime" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildFactionGroup" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildFactionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildInfo" Priority="0" ImageType="Method">
    <Signature>guildName, guildRankName, guildRankIndex = GetGuildInfo("unit") or GetGuildInfo("name")</Signature>
    <Description>Returns a unit's guild affiliation</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="guildName">
      <Description>Name of the character's guild (string) </Description>
    </ReturnList>
    <ReturnList Name="guildRankName">
      <Description>Name of the character's guild rank (string) </Description>
    </ReturnList>
    <ReturnList Name="guildRankIndex">
      <Description>Numeric guild rank of the character (0 = guild leader; higher numbers for lower ranks) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildInfoText" Priority="0" ImageType="Method">
    <Signature>guildInfoText = GetGuildInfoText()</Signature>
    <Description>Returns guild information text. Only returns valid data after calling GuildRoster() and the following GUILD_ROSTER_UPDATE event has fired.
This text appears when clicking the "Guild Information" button in the default UI's Guild window.</Description>
    <ReturnList Name="guildInfoText">
      <Description>The guild information text (including newline characters) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildLevel" Priority="0" ImageType="Method">
    <Signature>guildLevel = GetGuildLevel()</Signature>
    <Description>Returns the guild level as displayed in the guild pane. In World of Warcraft: Cataclysm, this level may be between 1 and 25, both inclusive. For characters that are not in a guild, it may return the previously cached value.
This function should be called from within code that respond to displaying guild-related information. For example, all calls to this function in Blizzard_GuildUI.lua is done when the guild pane is shown, thus only possible while in a guild.
If it is absolutely necessary to obtain guild levels for anyone, use UnitGetGuildLevel() instead.</Description>
    <ReturnList Name="guildLevel">
      <Description>The guild level of a guild. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildLevelEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildLogoInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildMemberRecipes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildMembershipRequestInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildMembershipRequestSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildNewsFilters" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildNewsInfo" Priority="0" ImageType="Method">
    <Signature>isSticky, isHeader, newsType, text1, text2, id, data, data2, weekday, day, month, year, = GetGuildNewsInfo(newsIndex)</Signature>
    <Description>Returns information about an item of guild news</Description>
    <ArgumentList Name="newsIndex">
      <Description>(number) </Description>
    </ArgumentList>
    <ReturnList Name="isSticky">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="isHeader">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="newsType">
      <Description>(number)
0 - Guild achievement "text2" earned by guild "text1"
1 - Achievement "text2" earned by player "text1"
2 - Boss "text2" slain by guild "text1"
3 - Item "text2" looted by player "text1"
4 - Item "text2" created by player "text1"
5 - Item "text2" purchased by player "text1"</Description>
    </ReturnList>
    <ReturnList Name="text1">
      <Description>(string) </Description>
    </ReturnList>
    <ReturnList Name="text2">
      <Description>(string) </Description>
    </ReturnList>
    <ReturnList Name="id">
      <Description>()
newsType = 0 - The id of the achievement
newsType = 1 - The id of the achievement
newsType = 2 - Unknown
newsType = 3 - The id of the item
newsType = 4 - The id of the item
newsType = 5 - The id of the item</Description>
    </ReturnList>
    <ReturnList Name="data">
      <Description>Only set if newsType = 2. Meaning unknown. () </Description>
    </ReturnList>
    <ReturnList Name="data2">
      <Description>Only set if newsType = 2. Meaning unknown. () </Description>
    </ReturnList>
    <ReturnList Name="weekday">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="day">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="month">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="year">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="- (number) " />
  </WowApi>
  <WowApi Name="GetGuildNewsMemberName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildNewsSort" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildPerkInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRecipeInfoPostQuery" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRecipeMember" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRecruitmentComment" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRecruitmentSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRenameRequired" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRewardInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRosterContribution" Priority="0" ImageType="Method">
    <Signature>weeklyXP, totalXP, weeklyRank, totalRank = GetGuildRosterContribution(index)</Signature>
    <Description>Returns weekly and total guild exp of a player</Description>
    <ArgumentList Name="index">
      <Description>The player index of the currently visible guild roster (number) </Description>
    </ArgumentList>
    <ReturnList Name="weeklyXP">
      <Description>The player XP for this week (number) </Description>
    </ReturnList>
    <ReturnList Name="totalXP">
      <Description>The player XP in total (number) </Description>
    </ReturnList>
    <ReturnList Name="weeklyRank">
      <Description>The players rank for this week (number) </Description>
    </ReturnList>
    <ReturnList Name="totalRank">
      <Description>The players rank at all (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildRosterInfo" Priority="0" ImageType="Method">
    <Signature>name, rank, rankIndex, level, class, zone, note, officernote, online, status, classFileName, achievementPoints, achievementRank, isMobile, canSoR = GetGuildRosterInfo(index)</Signature>
    <Description>Returns information about the selected player in your guild roster.. Only returns valid data after calling GuildRoster() and the following GUILD_ROSTER_UPDATE event has fired.</Description>
    <ArgumentList Name="index">
      <Description>Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetGuildRosterLargestAchievementPoints" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetGuildRosterLargestContribution" Priority="0" ImageType="Method">
    <Signature>maxWeeklyXP, maxTotalXP = GetGuildRosterLargestContribution()</Signature>
    <Description>Return the weekly and total largest contibution</Description>
    <ReturnList Name="maxWeeklyXP">
      <Description>The largest contribution for the current week (number) </Description>
    </ReturnList>
    <ReturnList Name="maxTotalXP">
      <Description>The largest total contribution (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildRosterLastOnline" Priority="0" ImageType="Method">
    <Signature>years, months, days, hours = GetGuildRosterLastOnline(index)</Signature>
    <Description>Returns the amount of time since a guild member was last online. Only returns valid data after calling GuildRoster() and the following GUILD_ROSTER_UPDATE event has fired.</Description>
    <ArgumentList Name="index">
      <Description>Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ArgumentList>
    <ReturnList Name="years">
      <Description>Number of years since the member was last online (number) </Description>
    </ReturnList>
    <ReturnList Name="months">
      <Description>Number of months since the member was last online (number) </Description>
    </ReturnList>
    <ReturnList Name="days">
      <Description>Number of days since the member was last online (number) </Description>
    </ReturnList>
    <ReturnList Name="hours">
      <Description>Number of hours since the member was last online (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildRosterMOTD" Priority="0" ImageType="Method">
    <Signature>guildMOTD = GetGuildRosterMOTD()</Signature>
    <Description>Returns the Message of the Day for the player's guild</Description>
    <ReturnList Name="guildMOTD">
      <Description>The guild Message of the Day (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildRosterSelection" Priority="0" ImageType="Method">
    <Signature>index = GetGuildRosterSelection()</Signature>
    <Description>Returns the index of the selected member in the guild roster. Selection in the guild roster is used only for display in the default UI and has no effect on other Guild APIs.</Description>
    <ReturnList Name="index">
      <Description>Index of the selected member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildRosterShowOffline" Priority="0" ImageType="Method">
    <Signature>showOffline = GetGuildRosterShowOffline()</Signature>
    <Description>Returns whether the guild roster lists offline members</Description>
    <ReturnList Name="showOffline">
      <Description>1 if offline members are included in the guild roster listing; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildTabardFileNames" Priority="0" ImageType="Method">
    <Signature>tabardBackgroundUpper, tabardBackgroundLower, tabardEmblemUpper, tabardEmblemLower, tabardBorderUpper, tabardBorderLower = GetGuildTabardFileNames()</Signature>
    <Description>Returns the textures that comprise the player's guild tabard. Returns nil if the player is not in a guild.</Description>
    <ReturnList Name="tabardBackgroundUpper">
      <Description>Path to the texture for the upper portion of the tabard's background (string) </Description>
    </ReturnList>
    <ReturnList Name="tabardBackgroundLower">
      <Description>Path to the texture for the lower portion of the tabard's background (string) </Description>
    </ReturnList>
    <ReturnList Name="tabardEmblemUpper">
      <Description>Path to the texture for the upper portion of the tabard's emblem (string) </Description>
    </ReturnList>
    <ReturnList Name="tabardEmblemLower">
      <Description>Path to the texture for the lower portion of the tabard's emblem (string) </Description>
    </ReturnList>
    <ReturnList Name="tabardBorderUpper">
      <Description>Path to the texture for the upper portion of the tabard's border (string) </Description>
    </ReturnList>
    <ReturnList Name="tabardBorderLower">
      <Description>Path to the texture for the lower portion of the tabard's border (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetGuildTradeSkillInfo" Priority="0" ImageType="Method">
    <Signature>professionID, isCollapsed, iconTexture, headerName, numOnline, numVisible, numPlayers, playerName, class, online, zone, skill, classFileName, isMobile = GetGuildTradeSkillInfo(index)</Signature>
    <Description>Returns information about the specified guild profession entry.. Returns information about the specified guild profession entry (crafter or header).</Description>
    <ArgumentList Name="index">
      <Description>The index of the profession entry to retrieve information about. Ranges from 1 to GetNumGuildTradeSkill(). (number) </Description>
    </ArgumentList>
    <ReturnList Name="professionID">
      <Description>The professionID of the profession. For use with ViewGuildRecipes() and similar functions. (number) </Description>
    </ReturnList>
    <ReturnList Name="isCollapsed">
      <Description>Boolean true/false indicating collapsed state for headers, nil for individual crafters. (boolean or nil) </Description>
    </ReturnList>
    <ReturnList Name="iconTexture">
      <Description>Full texture path to the icon to display for headers, nil for individual crafters. (string) </Description>
    </ReturnList>
    <ReturnList Name="headerName">
      <Description>Label to use for headers, nil for individual crafters. (string) </Description>
    </ReturnList>
    <ReturnList Name="numOnline">
      <Description>Number of online crafters for the profession for headers, nil for individual crafters. (number) </Description>
    </ReturnList>
    <ReturnList Name="numVisible">
      <Description>Number of visible crafters for the profession for headers (according to the user's "Show Offline Members" setting), nil for individual crafters. (number) </Description>
    </ReturnList>
    <ReturnList Name="numPlayers">
      <Description>Number of crafters (including offline players) for the profession for headers, nil for individual crafters. (number) </Description>
    </ReturnList>
    <ReturnList Name="playerName">
      <Description>Crafter's name for individual crafters, nil for headers. (string) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Crafter's class for individual crafters, nil for headers. (string) </Description>
    </ReturnList>
    <ReturnList Name="online">
      <Description>1 if the crafter is online, nil for headers and offline crafters. (1 or nil) </Description>
    </ReturnList>
    <ReturnList Name="zone">
      <Description>Zone the crafter is/was in, nil for headers. (string) </Description>
    </ReturnList>
    <ReturnList Name="skill">
      <Description>Skill level of the crafter, nil for headers. (number) </Description>
    </ReturnList>
    <ReturnList Name="classFileName">
      <Description>A non-localized token representing the class (same as second return from UnitClass()), nil for headers. (string) </Description>
    </ReturnList>
    <ReturnList Name="isMobile">
      <Description>[Assumption] Whether the crafter is connected using Remote Guild Chat. Always false for headers. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetHairCustomization" Priority="0" ImageType="Method">
    <Signature>token = GetHairCustomization()</Signature>
    <Description>Returns a token used for displaying "hair" customization options. The token referred to by this function can be used to look up a global variable containing localized names for the customization options available to the player's race at character creation time and in the Barbershop UI; see example.</Description>
    <ReturnList Name="token">
      <Description>Part of a localized string token for displaying "hair" options for the player's race (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetHitModifier" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetHolidayBGHonorCurrencyBonuses" Priority="0" ImageType="Method">
    <Signature>unk, honorWinReward, arenaWinReward, honorLossReward, arenaLossReward = GetHolidayBGHonorCurrencyBonuses()</Signature>
    <Description>Returns the awarded honor and arena points for a Call to Arms battleground win or loss</Description>
    <ReturnList Name="unk">
      <Description>Unknown (boolean) </Description>
    </ReturnList>
    <ReturnList Name="honorWinReward">
      <Description>Honor points rewarded for a win (number) </Description>
    </ReturnList>
    <ReturnList Name="arenaWinReward">
      <Description>Arena points rewarded for a win (number) </Description>
    </ReturnList>
    <ReturnList Name="honorLossReward">
      <Description>Honor points rewarded for a loss (number) </Description>
    </ReturnList>
    <ReturnList Name="arenaLossReward">
      <Description>Arena points rewarded for a loss (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetHomePartyInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetIgnoreName" Priority="0" ImageType="Method">
    <Signature>name = GetIgnoreName("index")</Signature>
    <Description>Returns the name of a character on the ignore list</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the ignore list (between 1 and GetNumIgnores()) (string) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the ignored character (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInboxHeaderInfo" Priority="0" ImageType="Method">
    <Signature>packageIcon, stationeryIcon, sender, subject, money, CODAmount, daysLeft, itemCount, wasRead, wasReturned, textCreated, canReply, isGM, itemQuantity = GetInboxHeaderInfo(mailID)</Signature>
    <Description>Returns information about a mail in the player's inbox</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="packageIcon">
      <Description>Path to an icon texture for the message if it contains an item; nil for other messages (string) </Description>
    </ReturnList>
    <ReturnList Name="stationeryIcon">
      <Description>Path to an icon texture for the message (string) </Description>
    </ReturnList>
    <ReturnList Name="sender">
      <Description>Name of the mail's sender (string) </Description>
    </ReturnList>
    <ReturnList Name="subject">
      <Description>Subject text of the mail (string) </Description>
    </ReturnList>
    <ReturnList Name="money">
      <Description>Amount of money attached to the mail (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="CODAmount">
      <Description>Cash-On-Delivery cost to take any items attached to the mail (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="daysLeft">
      <Description>Number of days remaining before the mail is automatically returned or deleted (number) </Description>
    </ReturnList>
    <ReturnList Name="itemCount">
      <Description>Number of item attachments to the mail (number) </Description>
    </ReturnList>
    <ReturnList Name="wasRead">
      <Description>1 if the player has read the mail; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="wasReturned">
      <Description>1 if the mail was sent by the player to another character and returned by the recipient; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="textCreated">
      <Description>1 if the player has saved a copy of the mail text as an item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="canReply">
      <Description>1 if the player can reply to the mail; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isGM">
      <Description>1 if the mail is from a game master; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="itemQuantity">
      <Description>Number of stacked items attached to the mail if the mail has one attachment; nil if the mail has zero or multiple attachments (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInboxInvoiceInfo" Priority="0" ImageType="Method">
    <Signature>invoiceType, itemName, playerName, bid, buyout, deposit, consignment, moneyDelay, etaHour, etaMin = GetInboxInvoiceInfo(index)</Signature>
    <Description>Returns auction house invoice information for a mail</Description>
    <ArgumentList Name="index">
      <Description>Index of the mail mail in the inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="invoiceType">
      <Description>Type of invoice (string)
buyer - An invoice for an item the player won
seller - An invoice for an item the player sold
seller_temp_invoice - A temporary invoice for an item sold by the player but for which payment has not yet been delivered</Description>
    </ReturnList>
    <ReturnList Name="itemName">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="playerName">
      <Description>Name of the player who bought or sold the item (string) </Description>
    </ReturnList>
    <ReturnList Name="bid">
      <Description>Amount of the winning bid or buyout (number) </Description>
    </ReturnList>
    <ReturnList Name="buyout">
      <Description>Amount of buyout (if the auction was bought out) (number) </Description>
    </ReturnList>
    <ReturnList Name="deposit">
      <Description>Amount of money paid in deposit (number) </Description>
    </ReturnList>
    <ReturnList Name="consignment">
      <Description>Amount withheld from the deposit by the auction house as charge for running the auction (number) </Description>
    </ReturnList>
    <ReturnList Name="moneyDelay">
      <Description>Delay for delivery of payment on a temporary invoice (in minutes; generally 60) (number) </Description>
    </ReturnList>
    <ReturnList Name="etaHour">
      <Description>Hour portion (on a 24-hour clock) of the estimated time for delivery of payment on a temporary invoice (number) </Description>
    </ReturnList>
    <ReturnList Name="etaMin">
      <Description>Minute portion of the estimated time for delivery of payment on a temporary invoice (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInboxItem" Priority="0" ImageType="Method">
    <Signature>name, itemTexture, count, quality, canUse = GetInboxItem(mailID, attachmentIndex)</Signature>
    <Description>Returns information for an item attached to a mail in the player's inbox</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="attachmentIndex">
      <Description>Index of an attachment to the message (between 1 and ATTACHMENTS_MAX_RECEIVE) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="itemTexture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="GetInboxItemLink" Priority="0" ImageType="Method">
    <Signature>itemlink = GetInboxItemLink(mailID, attachmentIndex)</Signature>
    <Description>Returns a hyperlink for an item attached to a mail in the player's inbox</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="attachmentIndex">
      <Description>Index of an attachment to the mail (between 1 and ATTACHMENTS_MAX_RECEIVE) (number) </Description>
    </ArgumentList>
    <ReturnList Name="itemlink">
      <Description>A hyperlink for the attachment item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInboxNumItems" Priority="0" ImageType="Method">
    <Signature>numItems, totalItems = GetInboxNumItems()</Signature>
    <Description>Returns the number of mails in the player's inbox</Description>
    <ReturnList Name="numItems">
      <Description>Number of mails in the player's inbox (number) </Description>
    </ReturnList>
    <ReturnList Name="totalItems">
      <Description>Total number of items both in the inbox and on the server. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInboxText" Priority="0" ImageType="Method">
    <Signature>bodyText, texture, isTakeable, isInvoice = GetInboxText(mailID)</Signature>
    <Description>Returns information about the text of an inbox mail. Also marks the mail as read if it wasn't already.</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="bodyText">
      <Description>Text of the mail (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Unique part of the path to a background texture to be displayed for the message; actual texture paths are STATIONERY_PATH .. texture .. "1" and STATIONERY_PATH .. texture .. "2" (string) </Description>
    </ReturnList>
    <ReturnList Name="isTakeable">
      <Description>1 if the text of the mail can be saved as an item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isInvoice">
      <Description>1 if the mail is an auction house invoice; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInspectArenaTeamData" Priority="0" ImageType="Method">
    <Signature>teamName, teamSize, teamRating, teamPlayed, teamWins, playerPlayed, playerRating, bg_red, bg_green, bg_blue, emblem, emblem_red, emblem_green, emblem_blue, border, border_red, border_green, border_blue = GetInspectArenaTeamData(team)</Signature>
    <Description>Returns arena team information about the currently inspected unit. Only available if data has been downloaded from the server; see HasInspectHonorData() and RequestInspectHonorData().</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the unit's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ReturnList Name="teamName">
      <Description>Name of the arena team (string) </Description>
    </ReturnList>
    <ReturnList Name="teamSize">
      <Description>Size of the team (2 for 2v2, 3 for 3v3, or 5 for 5v5) (number) </Description>
    </ReturnList>
    <ReturnList Name="teamRating">
      <Description>The team's current rating (number) </Description>
    </ReturnList>
    <ReturnList Name="teamPlayed">
      <Description>Number of games played by the team in the current week (number) </Description>
    </ReturnList>
    <ReturnList Name="teamWins">
      <Description>Number of games won by the team in the current week (number) </Description>
    </ReturnList>
    <ReturnList Name="playerPlayed">
      <Description>Number of games in which the unit has participated in the current week (number) </Description>
    </ReturnList>
    <ReturnList Name="playerRating">
      <Description>The unit's personal rating with this team (number) </Description>
    </ReturnList>
    <ReturnList Name="bg_red">
      <Description>Red component of the color value for the team banner's background (number) </Description>
    </ReturnList>
    <ReturnList Name="bg_green">
      <Description>Green component of the color value for the team banner's background (number) </Description>
    </ReturnList>
    <ReturnList Name="bg_blue">
      <Description>Blue component of the color value for the team banner's background (number) </Description>
    </ReturnList>
    <ReturnList Name="emblem">
      <Description>Index of the team's emblem graphic; full path to the emblem texture can be found using the format "Interface\PVPFrame\Icons\PVP-Banner-Emblem-"..emblem (number) </Description>
    </ReturnList>
    <ReturnList Name="emblem_red">
      <Description>Red component of the color value for the team banner's emblem (number) </Description>
    </ReturnList>
    <ReturnList Name="emblem_green">
      <Description>Green component of the color value for the team banner's emblem (number) </Description>
    </ReturnList>
    <ReturnList Name="emblem_blue">
      <Description>Blue component of the color value for the team banner's emblem (number) </Description>
    </ReturnList>
    <ReturnList Name="border">
      <Description>Index of the team's border graphic; full path to the border texture can be found by using the format "Interface\PVPFrame\PVP-Banner-"..teamSize.."-Border-"..border (number) </Description>
    </ReturnList>
    <ReturnList Name="border_red">
      <Description>Red component of the color value for the team banner's border (number) </Description>
    </ReturnList>
    <ReturnList Name="border_green">
      <Description>Green component of the color value for the team banner's border (number) </Description>
    </ReturnList>
    <ReturnList Name="border_blue">
      <Description>Blue component of the color value for the team banner's border (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInspectGlyph" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetInspectGuildInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetInspectHonorData" Priority="0" ImageType="Method">
    <Signature>todayHK, todayHonor, yesterdayHK, yesterdayHonor, lifetimeHK, lifetimeRank = GetInspectHonorData()</Signature>
    <Description>Returns PvP honor information about the currently inspected unit. Only available if data has been downloaded from the server; see HasInspectHonorData() and RequestInspectHonorData().</Description>
    <ReturnList Name="todayHK">
      <Description>Number of honorable kills on the current day (number) </Description>
    </ReturnList>
    <ReturnList Name="todayHonor">
      <Description>Amount of honor points earned on the current day (number) </Description>
    </ReturnList>
    <ReturnList Name="yesterdayHK">
      <Description>Number of honorable kills on the previous day (number) </Description>
    </ReturnList>
    <ReturnList Name="yesterdayHonor">
      <Description>Amount of honor points earned on the previous day (number) </Description>
    </ReturnList>
    <ReturnList Name="lifetimeHK">
      <Description>Lifetime total of honorable kills scored (number) </Description>
    </ReturnList>
    <ReturnList Name="lifetimeRank">
      <Description>Highest rank earned in the pre-2.0 PvP reward system; see GetPVPRankInfo() for rank display information (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInspectRatedBGData" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetInspectSpecialization" Priority="0" ImageType="Method">
    <Signature>specID = GetInspectSpecialization()</Signature>
    <Description>Return specialization global ID of inspected player.</Description>
    <ReturnList Name="specID">
      <Description>Specialization global ID number (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInspectTalent" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetInstanceBootTimeRemaining" Priority="0" ImageType="Method">
    <Signature>timeleft = GetInstanceBootTimeRemaining()</Signature>
    <Description>Returns the amount of time left until the player is removed from the current instance. Used when the player is in an instance he doesn't own; e.g. if the player enters an instance with a group and is then removed from the group.</Description>
    <ReturnList Name="timeleft">
      <Description>The number of seconds until the player is booted from the current instance (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInstanceDifficulty" Priority="0" ImageType="Method">
    <Signature>difficulty = GetInstanceDifficulty()</Signature>
    <Description>Returns difficulty setting for the current dungeon/raid instance.
This returns the difficulty setting for the instance the player is currently in; not to be confused with GetCurrentDungeonDifficulty(), which is the current group's setting for entering new instances, nor with GetDefaultDungeonDifficulty(), which is the player's preference for dungeon difficulty and may differ from that of the current party leader.</Description>
    <ReturnList Name="difficulty">
      <Description>The current instance's difficulty setting (number)
1 - None; not in an Instance.
2 - 5-player Instance or Scenario.
3 - 5-player Heroic Instance.
4 - 10-player Raid Instance.
5 - 25-player Raid Instance.
6 - 10-player Heroic Raid Instance.
7 - 25-player Heroic Raid Instance.
8 - Raid Finder Instance.
9 - Challenge mode Raid Instance.
10 - 40-player Raid Instance.</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInstanceInfo" Priority="0" ImageType="Method">
    <Signature>name, type, difficulty, difficultyName, maxPlayers, playerDifficulty, isDynamicInstance = GetInstanceInfo()</Signature>
    <Description>Returns instance information about the current area</Description>
    <ReturnList Name="name">
      <Description>Name of the instance or world area (string) </Description>
    </ReturnList>
    <ReturnList Name="type">
      <Description>Type of the instance (string)
arena - A PvP Arena instance
none - Normal world area (e.g. Northrend, Kalimdor, Deeprun Tram)
party - An instance for 5-man groups
pvp - A PvP battleground instance
raid - An instance for raid groups
scenario - A scenario instance</Description>
    </ReturnList>
    <ReturnList Name="difficulty">
      <Description>Difficulty setting of the instance (number)
0 - None; not in an Instance.
1 - 5-player Instance.
2 - 5-player Heroic Instance.
3 - 10-player Raid Instance.
4 - 25-player Raid Instance.
5 - 10-player Heroic Raid Instance.
6 - 25-player Heroic Raid Instance.
7 - Raid Finder Instance.
8 - Challenge Mode Instance.
9 - 40-player Raid Instance.
10 - Not used.
11 - Heroic Scenario Instance.
12 - Scenario Instance.</Description>
    </ReturnList>
    <ReturnList Name="difficultyName">
      <Description>String representing the difficulty of the instance. E.g. "10 Player" (string) </Description>
    </ReturnList>
    <ReturnList Name="maxPlayers">
      <Description>Maximum number of players allowed in the instance (number) </Description>
    </ReturnList>
    <ReturnList Name="playerDifficulty">
      <Description>Unknown (number) </Description>
    </ReturnList>
    <ReturnList Name="isDynamicInstance">
      <Description>True for raid instances that can support multiple maxPlayers values (10 and 25) - eg. ToC, DS, ICC, etc (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInstanceLockTimeRemaining" Priority="0" ImageType="Method">
    <Signature>seconds = GetInstanceLockTimeRemaining()</Signature>
    <Description>Returns time remaining before the player is saved to a recently entered instance.
Applies when the player enters an instance to which other members of her group are saved; if the player leaves the instance (normally or with RespondInstanceLock(false)) within this time limit she will not be saved to the instance.</Description>
    <ReturnList Name="seconds">
      <Description>Time remaining before the player is saved to the instance (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInstanceLockTimeRemainingEncounter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetInventoryAlertStatus" Priority="0" ImageType="Method">
    <Signature>status = GetInventoryAlertStatus(slot)</Signature>
    <Description>Returns the durability warning status of an equipped item. Looking up the status returned by this function in the INVENTORY_ALERT_COLORS table provides color values, used in the default UI to highlight parts of the DurabiltyFrame (i.e. the "armored man" image) that appears when durability is low.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>Alert status for the item in the given slot (number)
0 - No alert; the slot is empty, contains an item whose durability is above critical levels, or contains an item without a durability value
1 - The item's durability is dangerously low
2 - The item's durability is at zero (the item is broken)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemBroken" Priority="0" ImageType="Method">
    <Signature>isBroken = GetInventoryItemBroken("unit", slot)</Signature>
    <Description>Returns whether an equipped item is broken</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="isBroken">
      <Description>1 if the item is broken (durability zero); otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetInventoryItemCooldown("unit", slot)</Signature>
    <Description>Returns cooldown information about an equipped item</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the item is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemCount" Priority="0" ImageType="Method">
    <Signature>count = GetInventoryItemCount("unit", slot)</Signature>
    <Description>Returns the number of items stacked in an inventory slot.
Currently only returns meaningful information for the ammo slot.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="count">
      <Description>The amount of items stacked in the inventory slot (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemDurability" Priority="0" ImageType="Method">
    <Signature>durability, max = GetInventoryItemDurability(slot)</Signature>
    <Description>Returns the current durability level of an equipped item. If an item does not have durability (for example, heirlooms, tabards and some other items) then this function will simply return nil.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="durability">
      <Description>The item's current durability, the first number listed in the item's tooltip where it displays the durability information: for example 4 in 4/29. (number) </Description>
    </ReturnList>
    <ReturnList Name="max">
      <Description>The item's maximum durability, the first number listed in the item's tooltip where it displays the durability information: for example 29 in 4/29 (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemGems" Priority="0" ImageType="Method">
    <Signature>gem1, gem2, gem3 = GetInventoryItemGems(slot)</Signature>
    <Description>Returns the gems socketed in an equipped item. The IDs returned refer to the gems themselves (not the enchantments they provide), and thus can be passed to GetItemInfo() to get a gem's name, quality, icon, etc.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="gem1">
      <Description>Item ID of the first gem socketed in the item (itemID) </Description>
    </ReturnList>
    <ReturnList Name="gem2">
      <Description>Item ID of the second gem socketed in the item (itemID) </Description>
    </ReturnList>
    <ReturnList Name="gem3">
      <Description>Item ID of the third gem socketed in the item (itemID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemID" Priority="0" ImageType="Method">
    <Signature>id = GetInventoryItemID("unit", slot)</Signature>
    <Description>Returns the item ID of an equipped item. The results of this function can be used with GetInventorySlotInfo() and other related inventory functions.
If the player beign /inspected has used transmorgification on the slot, then the itemID of the transmorgified item is what is returned, not the actual item equipped.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>Numeric ID of the item in the given slot (itemID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetInventoryItemLink("unit", slot)</Signature>
    <Description>Returns an item link for an item in the unit's inventory. The player's inventory is actually extended to include items in the bank, items in the player's containers and the player's key ring in addition to the items the player has equipped. The appropriate inventoryID can be found by calling the appropriate function.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="GetInventoryItemQuality" Priority="0" ImageType="Method">
    <Signature>quality = GetInventoryItemQuality("unit", slot)</Signature>
    <Description>Returns the quality level of an equipped item</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="quality">
      <Description>The quality level of the item (number, itemQuality) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemTexture" Priority="0" ImageType="Method">
    <Signature>texture = GetInventoryItemTexture("unit", slot)</Signature>
    <Description>Returns the icon texture for an equipped item</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for 'player' or the unit currently being inspected (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventoryItemsForSlot" Priority="0" ImageType="Method">
    <Signature>availableItems = GetInventoryItemsForSlot(slot)</Signature>
    <Description>Returns a list of items that can be equipped in a given inventory slot</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="availableItems">
      <Description>A table listing itemIDs of items which can be equipped in the slot, keyed by itemLocation (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetInventorySlotInfo" Priority="0" ImageType="Method">
    <Signature>id, texture, checkRelic = GetInventorySlotInfo("slotName")</Signature>
    <Description>Returns information about an inventory slot</Description>
    <ArgumentList Name="slotName">
      <Description>Name of an inventory slot to query (string)
AmmoSlot - Ranged ammunition slot
BackSlot - Back (cloak) slot
Bag0Slot - Backpack slot
Bag1Slot - First bag slot
Bag2Slot - Second bag slot
Bag3Slot - Third bag slot
ChestSlot - Chest slot
FeetSlot - Feet (boots) slot
Finger0Slot - First finger (ring) slot
Finger1Slot - Second finger (ring) slot
HandsSlot - Hand (gloves) slot
HeadSlot - Head (helmet) slot
LegsSlot - Legs (pants) slot
MainHandSlot - Main hand weapon slot
NeckSlot - Necklace slot
RangedSlot - Ranged weapon or relic slot
SecondaryHandSlot - Off-hand (weapon, shield, or held item) slot
ShirtSlot - Shirt slot
ShoulderSlot - Shoulder slot
TabardSlot - Tabard slot
Trinket0Slot - First trinket slot
Trinket1Slot - Second trinket slot
WaistSlot - Waist (belt) slot
WristSlot - Wrist (bracers) slot</Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>The numeric slotId usable in other Inventory functions (number, inventoryID) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>The path to the texture to be displayed when this slot is empty (string) </Description>
    </ReturnList>
    <ReturnList Name="checkRelic">
      <Description>1 if the slot might be the relic slot; otherwise nil. The ranged slot token is re-used for the relic slot; if this return is 1, UnitHasRelicSlot should be used to determine how the slot should be displayed. (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetItemCooldown(itemID) or GetItemCooldown("itemName") or GetItemCooldown("itemLink")</Signature>
    <Description>Returns cooldown information about an arbitrary item</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the item is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemCount" Priority="0" ImageType="Method">
    <Signature>itemCount = GetItemCount(itemId, includeBank, includeCharges) or GetItemCount("itemName", includeBank, includeCharges) or GetItemCount("itemLink", includeBank, includeCharges)</Signature>
    <Description>Returns information about how many of a given item the player has or on remaining item charges.
When the third argument includeCharges is true, the returned number indicates the total number of remaining charges for the item instead of how many of the item you have; e.g. if you have 3 Wizard Oils and one of them has been used twice, the returned value will be 13.</Description>
    <ArgumentList Name="itemId">
      <Description>An item id (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item link (string) </Description>
    </ArgumentList>
    <ArgumentList Name="includeBank">
      <Description>true to include items in the bank in the returned count, otherwise false (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="includeCharges">
      <Description>true to count charges for applicable items, otherwise false (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="itemCount">
      <Description>The number of the given item the player has in possession (possibly including items in the bank), or the total number of charges on those items (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemFamily" Priority="0" ImageType="Method">
    <Signature>bagType = GetItemFamily(itemID) or GetItemFamily("itemName") or GetItemFamily("itemLink")</Signature>
    <Description>Returns information about special bag types that can hold a given item. The meaning of bagType varies depending on the item:
If the item is a container, bagType indicates which kinds of items the container is limited to holding; a bagType of 0 indicates the container can hold any kind of item.
If the item is not a container, bagType indicates which kinds of specialty containers can hold the item; a bagType of 0 indicates the item can only be put in general-purpose containers. </Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="bagType">
      <Description>Bitwise OR of bag type flags: (number, bitfield)
0x0001 - Quiver
0x0002 - Ammo Pouch
0x0004 - Soul Bag
0x0008 - Leatherworking Bag
0x0010 - Inscription Bag
0x0020 - Herb Bag
0x0040 - Enchanting Bag
0x0080 - Engineering Bag
0x0100 - Keyring
0x0200 - Gem Bag
0x0400 - Mining Bag
0x0800 - Unused
0x1000 - Vanity Pets
0x10000 - Cooking Bag
0x100000 - Tackle Box</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemGem" Priority="0" ImageType="Method">
    <Signature>name, link = GetItemGem(itemID, index) or GetItemGem("itemName", index) or GetItemGem("itemLink", index)</Signature>
    <Description>Returns information about gems socketed in an item</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a socket on the item (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the gem in the socket (string) </Description>
    </ReturnList>
    <ReturnList Name="link">
      <Description>A hyperlink for the gem in the socket (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemIcon" Priority="0" ImageType="Method">
    <Signature>texture = GetItemIcon(itemID) or GetItemIcon("itemName") or GetItemIcon("itemLink")</Signature>
    <Description>Returns the path to an icon texture for the item. Unlike GetItemInfo, this function always returns icons for valid items, even if the item is not in the client's cache.</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemInfo" Priority="0" ImageType="Method">
    <Signature>name, link, quality, iLevel, reqLevel, class, subclass, maxStack, equipSlot, texture, vendorPrice = GetItemInfo(itemID) or GetItemInfo("itemName") or GetItemInfo("itemLink")</Signature>
    <Description>Returns information about an item, by name, link or id. Will only return item information if it is directly available in memory.
An item is present in memory if:
It has been seen this session, OR
It's present in Cache/enUS/Item-sparse.dba, where enUS is the user's locale
If item information is not readily available, the client will first look on disk in DBFilesClient/Item-sparse.db2. If an item is found there, the client fires the GET_ITEM_INFO_RECEIVED event and keeps the result in memory for further GetItemInfo requests.
If an item is not found on disk either, the client will send a server request for it. If the request fails, nothing happens. If the request succeeds, the client stores the item in memory and writes it to Cache/Locale/Item-sparse.dba. The client will never send more than one server request per id per session. </Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number, itemID) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name. This value will only work if the player has the item in their bags. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) level of the item. (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="iLevel">
      <Description>Internal level of the item; (number) </Description>
    </ReturnList>
    <ReturnList Name="reqLevel">
      <Description>Minimum character level required to use or equip the item (number) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Localized name of the item's class/type (as in the list returned by GetAuctionItemClasses()) (string) </Description>
    </ReturnList>
    <ReturnList Name="subclass">
      <Description>Localized name of the item's subclass/subtype (as in the list returned by GetAuctionItemSubClasses()) (string) </Description>
    </ReturnList>
    <ReturnList Name="maxStack">
      <Description>Maximum stack size for the item (i.e. largest number of items that can be held in a single bag slot) (number) </Description>
    </ReturnList>
    <ReturnList Name="equipSlot">
      <Description>Non-localized token identifying the inventory type of the item (as in the list returned by GetAuctionItemInvTypes()); name of a global variable containing the localized name of the inventory type (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="vendorPrice">
      <Description>Price an NPC vendor will pay to buy the item from the player. This value was added in patch 3.2. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemLevelIncrement" Priority="0" ImageType="Method">
    <Signature>levelIncrement = GetItemLevelIncrement()</Signature>
    <Description>Returns the item level increment recieved when upgrading. The item level increment returned depends on the type of item, i.e. blue items recieve 8 levels per upgrade while epic items recieve 4 per upgrade (which costs half as much).
This function can currently only be called when at the upgrade merchant.</Description>
    <ReturnList Name="levelIncrement">
      <Description>The amount of item levels that are added to an item's current level once upgraded (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemQualityColor" Priority="0" ImageType="Method">
    <Signature>redComponent, greenComponent, blueComponent, hexColor = GetItemQualityColor(quality)</Signature>
    <Description>Returns color values for use in displaying items of a given quality. Color components are floating-point values between 0 (no component) and 1 (full intensity of the component).
Prior to 4.2 the hexColor return was prefixed with |c now it is just the hex codes for the color.</Description>
    <ArgumentList Name="quality">
      <Description>An numeric item quality (rarity) value (number, itemQuality) </Description>
    </ArgumentList>
    <ReturnList Name="redComponent">
      <Description>Red component of the color (number) </Description>
    </ReturnList>
    <ReturnList Name="greenComponent">
      <Description>Green component of the color (number) </Description>
    </ReturnList>
    <ReturnList Name="blueComponent">
      <Description>Blue component of the color (number) </Description>
    </ReturnList>
    <ReturnList Name="hexColor">
      <Description>Color value of a colorString for formatting text with the color (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemSpell" Priority="0" ImageType="Method">
    <Signature>name, rank = GetItemSpell(itemID) or GetItemSpell("itemName") or GetItemSpell("itemLink")</Signature>
    <Description>Returns information about the spell cast by an item's "Use:" effect</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Secondary text associated with the spell (often a rank, e.g. "Rank 7"); or the empty string ("") if not applicable (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemStatDelta" Priority="0" ImageType="Method">
    <Signature>statTable = GetItemStatDelta("item1Link", "item2Link" [, returnTable])</Signature>
    <Description>Returns a summary of the difference in stat bonuses between two items. Keys in the table returned are the names of global variables containing the localized names of the stats (e.g. _G["ITEM_MOD_SPIRIT_SHORT"] = "Spirit", _G["ITEM_MOD_HIT_RATING_SHORT"] = "Hit Rating").
The optional argument returnTable allows for performance optimization in cases where this function is expected to be called repeatedly. Rather than creating new tables each time the function is called (eventually requiring garbage collection), an existing table can be recycled. (Note, however, that this function does not clear the table's contents; use wipe() first to guarantee consistent results.)</Description>
    <ArgumentList Name="item1Link">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string, hyperlink) </Description>
    </ArgumentList>
    <ArgumentList Name="item2Link">
      <Description>Another item's hyperlink, or any string containing the itemString portion of an item link (string, hyperlink) </Description>
    </ArgumentList>
    <ArgumentList Name="returnTable">
      <Description>Reference to a table to be filled with return values (table) </Description>
    </ArgumentList>
    <ReturnList Name="statTable">
      <Description>A table listing the difference in stat bonuses provided by the items (i.e. if item1Link is equipped, what changes to the player's stats would occur if it is replaced by item2Link) (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemStats" Priority="0" ImageType="Method">
    <Signature>statTable = GetItemStats("itemLink" [, returnTable])</Signature>
    <Description>Returns a summary of an item's stat bonuses. Keys in the table returned are the names of global variables containing the localized names of the stats (e.g. _G["ITEM_MOD_SPIRIT_SHORT"] = "Spirit", _G["ITEM_MOD_HIT_RATING_SHORT"] = "Hit Rating").
The optional argument returnTable allows for performance optimization in cases where this function is expected to be called repeatedly. Rather than creating new tables each time the function is called (eventually requiring garbage collection), an existing table can be recycled. (Note, however, that this function does not clear the table's contents; use wipe() first to guarantee consistent results.)</Description>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string, hyperlink) </Description>
    </ArgumentList>
    <ArgumentList Name="returnTable">
      <Description>Reference to a table to be filled with return values (table) </Description>
    </ArgumentList>
    <ReturnList Name="statTable">
      <Description>A table listing the stat bonuses provided by the item (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemTransmogrifyInfo" Priority="0" ImageType="Method">
    <Signature>canBeChanged, noChangeReason, canBeSource, noSourceReason = GetItemTransmogrifyInfo(itemID) or GetItemTransmogrifyInfo("itemName") or GetItemTransmogrifyInfo("itemLink")</Signature>
    <Description>Returns information about the eligibility of an item to be used for transmogrification</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number, itemID) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name. This value will only work if the player has the item in their bags. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="canBeChanged">
      <Description>Returns true when this item can be transmogrified. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="noChangeReason">
      <Description>If canTransmogrify returns false this will contain an error code. (string) </Description>
    </ReturnList>
    <ReturnList Name="canBeSource">
      <Description>Returns true when an item can be transmogrified to this item. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="noSourceReason">
      <Description>If canBeSource returns false this will contain an error code. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemUniqueness" Priority="0" ImageType="Method">
    <Signature>uniqueFamily, maxEquipped = GetItemUniqueness(itemID) or GetItemUniqueness("itemName") or GetItemUniqueness("itemLink")</Signature>
    <Description>Returns information about uniqueness restrictions for equipping an item.
Only applies to items with "Unique Equipped" restrictions upon how many similar items can be equipped -- returns nil for items which for which "Unique" restricts how many the player can have in her possession.
Also returns nil if the queried item is not currently in the WoW client's item cache.</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's link (string) </Description>
    </ArgumentList>
    <ReturnList Name="uniqueFamily">
      <Description>The family of items with special uniqueness restrictions to which the item belongs (number) </Description>
    </ReturnList>
    <ReturnList Name="maxEquipped">
      <Description>The maximum number of items under this restriction that can be equipped (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemUpdateLevel" Priority="0" ImageType="Method">
    <Signature>newItemLevel = GetItemUpdateLevel()</Signature>
    <Description>Returns an item's item level once it's been upgraded.. This function can currently only be called when at the upgrade merchant.</Description>
    <ReturnList Name="newItemLevel">
      <Description>The item level after successfully upgrading (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemUpgradeItemInfo" Priority="0" ImageType="Method">
    <Signature>icon, name, quality, bound, numCurrUpgrades, numMaxUpgrades, cost, currencyType = GetItemUpgradeItemInfo()</Signature>
    <Description>Returns information on the item that is currently being upgraded.. This function can currently only be called when at the upgrade merchant.</Description>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) level of the item. (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="bound">
      <Description>localized binding type (e.g. 'Soulbound') (string) </Description>
    </ReturnList>
    <ReturnList Name="numCurrUpgrades">
      <Description>How often an item has been upgraded already (number) </Description>
    </ReturnList>
    <ReturnList Name="numMaxUpgrades">
      <Description>How often an item may be upgraded (number) </Description>
    </ReturnList>
    <ReturnList Name="cost">
      <Description>Amount of points required to upgrade the item (number) </Description>
    </ReturnList>
    <ReturnList Name="currencyType">
      <Description>type of currency that is required for an upgrade (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetItemUpgradeStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFDChoiceCollapseState" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFDChoiceEnabledState" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFDChoiceLockedState" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFDChoiceOrder" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFDLockInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFDLockPlayerCount" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGBootProposal" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGCategoryForID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGCompletionReward" Priority="0" ImageType="Method">
    <Signature>name, typeID, textureFilename, moneyBase, moneyVar, experienceBase, experienceVar, numStrangers, numRewards = GetLFGCompletionReward()</Signature>
    <Description>Returns the various rewards for a completed LFG dungeon</Description>
    <ReturnList Name="name">
      <Description>Name of the instance (string) </Description>
    </ReturnList>
    <ReturnList Name="typeID">
      <Description>Type of the dungeon (TYPEIDDUNGEON, TYPEIDHEROICDIFFICULTY, TYPEIDRANDOM_DUNGEON) (number) </Description>
    </ReturnList>
    <ReturnList Name="textureFilename">
      <Description>Filename of the instance icon (to be used with 'Interface/LFGFrame/LFGIcon-' (string) </Description>
    </ReturnList>
    <ReturnList Name="moneyBase">
      <Description>Base amount of money (moneyAmount = moneyBase + moneyVar * numStrangers) (number) </Description>
    </ReturnList>
    <ReturnList Name="moneyVar">
      <Description>Money reward coefficient (number) </Description>
    </ReturnList>
    <ReturnList Name="experienceBase">
      <Description>Base amount of experience (experienceGained = experienceBase + experienceVar * numStrangers) (number) </Description>
    </ReturnList>
    <ReturnList Name="experienceVar">
      <Description>Experience reward coefficient (number) </Description>
    </ReturnList>
    <ReturnList Name="numStrangers">
      <Description>Amount of pickups in the group (number) </Description>
    </ReturnList>
    <ReturnList Name="numRewards">
      <Description>Amount of actual dungeon rewards (currency or item) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGCompletionRewardItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDeserterExpiration" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonEncounterInfo" Priority="0" ImageType="Method">
    <Signature>bossName, texture, isKilled, result4 = GetLFGDungeonEncounterInfo(dungeonId, encounterIndex)</Signature>
    <Description>Returns whether an LFR encounter was already killed.. Does only give usable results for the encounters in the LFR part specified by the id</Description>
    <ArgumentList Name="dungeonId">
      <Description>dungeon id, same argument as to GetLFGDungeonNumEncounters() (number) </Description>
    </ArgumentList>
    <ArgumentList Name="encounterIndex">
      <Description>index, between 1 and GetLFGDungeonNumEncounters() (number) </Description>
    </ArgumentList>
    <ReturnList Name="bossName">
      <Description>Name of the encounter. (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Probably a texture associated to the encounter, but always nil. (nil) </Description>
    </ReturnList>
    <ReturnList Name="isKilled">
      <Description>Whether the encounter was killed this week. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="result4">
      <Description>unknown, unused in FrameXML, always false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGDungeonInfo" Priority="0" ImageType="Method">
    <Signature>dungeonName, typeId, minLvl, maxLvl, recLvl, minRecLvl, maxRecLvl, expansionId, groupId, textureName, difficulty, maxPlayers, dungeonDesc, isHoliday = GetLFGDungeonInfo(id)</Signature>
    <Description>Retrieves specific LFD information, not limited by player level and all dungeons can be looked up.</Description>
    <ArgumentList Name="id">
      <Description>Dungeon id, this refers to a integer found in LFGDungeons.dbc. At the moment in build 16016 the id range is 1-576 (integer) </Description>
    </ArgumentList>
    <ReturnList Name="dungeonName">
      <Description>The name of the dungeon/event (string) </Description>
    </ReturnList>
    <ReturnList Name="typeId">
      <Description>1=instance or LFR, 2=raid instance, 4=outdoor area, 6=random instance (integer) </Description>
    </ReturnList>
    <ReturnList Name="minLvl">
      <Description>Earliest level you can enter this dungeon (using the portal, not LFD) (integer) </Description>
    </ReturnList>
    <ReturnList Name="maxLvl">
      <Description>Highest level you can enter this dungeon (using the portal, not LFD) (integer) </Description>
    </ReturnList>
    <ReturnList Name="recLvl">
      <Description>Recommended level to queue up for this dungeon (integer) </Description>
    </ReturnList>
    <ReturnList Name="minRecLvl">
      <Description>Earliest level you can queue up for the dungeon (integer) </Description>
    </ReturnList>
    <ReturnList Name="maxRecLvl">
      <Description>Highest level you can queue up for the dungeon (integer) </Description>
    </ReturnList>
    <ReturnList Name="expansionId">
      <Description>Referring to GetAccountExpansionLevel() values (integer) </Description>
    </ReturnList>
    <ReturnList Name="groupId">
      <Description>Unknown (integer) </Description>
    </ReturnList>
    <ReturnList Name="textureName">
      <Description>For example "Interface\LFDFRAME\LFGIcon-%s.blp" where %s is the textureName value (string) </Description>
    </ReturnList>
    <ReturnList Name="difficulty">
      <Description>0 for Normal and 1 for Heroic (integer) </Description>
    </ReturnList>
    <ReturnList Name="maxPlayers">
      <Description>Number of players required (integer) </Description>
    </ReturnList>
    <ReturnList Name="dungeonDesc">
      <Description>Description, usually empty for most dungeons but events contain descriptions of the event, like Love is in the Air daily or Brewfest, e.g. (string) </Description>
    </ReturnList>
    <ReturnList Name="isHoliday">
      <Description>If true then this is indeed a holiday event (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGDungeonNumEncounters" Priority="0" ImageType="Method">
    <Signature>totalEncounters, encountersCompleted = GetLFGDungeonNumEncounters(dungeonId)</Signature>
    <Description>Returns the number of encounters.</Description>
    <ArgumentList Name="dungeonId">
      <Description>Some ID for a dungeon, returned by GetRFDungeonInfo() (number) </Description>
    </ArgumentList>
    <ReturnList Name="totalEncounters">
      <Description>total number of encounters in the whole raid (number) </Description>
    </ReturnList>
    <ReturnList Name="encountersCompleted">
      <Description>number of encounters completed in this raid finder (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGDungeonRewardCapBarInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonRewardCapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonRewardInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonRewardLink" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonRewards" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonShortageRewardInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGDungeonShortageRewardLink" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGInfoServer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGMode" Priority="0" ImageType="Method">
    <Signature>mode, submode = GetLFGMode()</Signature>
    <Description>Provides information about the LFG status of the player.</Description>
    <ReturnList Name="mode">
      <Description>Current LFG status (string)
abandonedInDungeon - The party disbanded and player is still in the dungeon.
lfgparty - LFG dungeon is in-progress.
nil - Player is not in LFG
proposal - LFG party formed, notifying matched players dungeon is ready.
queued - Player is in LFG queue.
rolecheck - Querying groupmates to select their LFG roles before queuing.</Description>
    </ReturnList>
    <ReturnList Name="submode">
      <Description>Your LFG sub-status. Used to indicate priority for filling party slots. (string)
empowered - Indicates that your party has lost a player and is set to higher priority for finding a replacement
nil - Not looking for more party members
unempowered - Default priority in the LFG system.</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGProposal" Priority="0" ImageType="Method">
    <Signature>GetLFGProposal()</Signature>
    <Description>Returns info about the currently pending LFD operation</Description>
  </WowApi>
  <WowApi Name="GetLFGProposalEncounter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGProposalMember" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGQueueStats" Priority="0" ImageType="Method">
    <Signature>hasData, leaderNeeds, tankNeeds, healerNeeds, dpsNeeds, totalTanks, totalHealers, totalDPS, instanceType, instanceSubType, instanceName, averageWait, tankWait, healerWait, dpsWait, myWait, queuedTime = GetLFGQueueStats()</Signature>
    <Description>Returns information about a LFD queue when you are in the queue</Description>
    <ReturnList Name="hasData">
      <Description>true or false if you are active in the queue. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="leaderNeeds">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="tankNeeds">
      <Description>1 if tank is needed, 0 if tank is found (number) </Description>
    </ReturnList>
    <ReturnList Name="healerNeeds">
      <Description>1 if healer is needed, 0 if healer is found (number) </Description>
    </ReturnList>
    <ReturnList Name="dpsNeeds">
      <Description>1 if dps is needed, 0 if dps is found (number) </Description>
    </ReturnList>
    <ReturnList Name="totalTanks">
      <Description>The number of tanks needed for this queue (number) </Description>
    </ReturnList>
    <ReturnList Name="totalHealers">
      <Description>The number of healers needed for this queue (number) </Description>
    </ReturnList>
    <ReturnList Name="totalDPS">
      <Description>The number of DPS needed for this queue (number) </Description>
    </ReturnList>
    <ReturnList Name="instanceType">
      <Description>The type of instance for this queue (number) </Description>
    </ReturnList>
    <ReturnList Name="instanceSubType">
      <Description>The instance subtype for this queue (number) </Description>
    </ReturnList>
    <ReturnList Name="instanceName">
      <Description>What you are queueing up for (string) </Description>
    </ReturnList>
    <ReturnList Name="averageWait">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="tankWait">
      <Description>Tank's estimated queue times in seconds. (number) </Description>
    </ReturnList>
    <ReturnList Name="healerWait">
      <Description>Healer's estimated queue times in seconds. (indef. time returns -1) (number) </Description>
    </ReturnList>
    <ReturnList Name="dpsWait">
      <Description>DPS's estimated queue times in seconds. (indef. time returns -1) (number) </Description>
    </ReturnList>
    <ReturnList Name="myWait">
      <Description>Your estimated queue time in seconds. (indef. time returns -1) (number) </Description>
    </ReturnList>
    <ReturnList Name="queuedTime">
      <Description>Time when you queued, compare with GetTime() (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGQueuedList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGRandomCooldownExpiration" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGRandomDungeonInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGRoleShortageRewards" Priority="0" ImageType="Method">
    <Signature>eligible, forTank, forHealer, forDamage, itemCount, money, xp = GetLFGRoleShortageRewards(dungeonID, shortageIndex)</Signature>
    <Description>Return information concerning the LFG Call to Arms rewards</Description>
    <ArgumentList Name="dungeonID">
      <Description>The dungeon index to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="shortageIndex">
      <Description>The shortage severity to query (number)
LFG_ROLE_SHORTAGE_PLENTIFUL
LFG_ROLE_SHORTAGE_RARE
LFG_ROLE_SHORTAGE_UNCOMMON</Description>
    </ArgumentList>
    <ReturnList Name="eligible">
      <Description>Whether or not the player is eligible for rewards (boolean) </Description>
    </ReturnList>
    <ReturnList Name="forTank">
      <Description>Whether or not there is a shortage of tanks (boolean) </Description>
    </ReturnList>
    <ReturnList Name="forHealer">
      <Description>Whether or not there is a shortage of healers (boolean) </Description>
    </ReturnList>
    <ReturnList Name="forDamage">
      <Description>Whether or not there is a shortage of damage dealers (boolean) </Description>
    </ReturnList>
    <ReturnList Name="itemCount">
      <Description>The number of item rewards available (number) </Description>
    </ReturnList>
    <ReturnList Name="money">
      <Description>The monetary rewards (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="xp">
      <Description>The amount of experience as a reward (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFGRoleUpdate" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGRoleUpdateMember" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGRoleUpdateSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGRoles" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLFGTypes" Priority="0" ImageType="Method">
    <Signature>... = GetLFGTypes()</Signature>
    <Description>Returns a list of LFG query types</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of an LFG type (Dungeon, Raid, Zone, etc.) (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLFRChoiceOrder" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLanguageByIndex" Priority="0" ImageType="Method">
    <Signature>languageName, languageIndex = GetLanguageByIndex(index)</Signature>
    <Description>Returns the localized name of a player character language</Description>
    <ArgumentList Name="index">
      <Description>Index of a player character language (between 1 and GetNumLanguages() (number) </Description>
    </ArgumentList>
    <ReturnList Name="languageName">
      <Description>Localized name of the language (e.g. "Common" or "Gnomish") (string) </Description>
    </ReturnList>
    <ReturnList Name="languageIndex">
      <Description>Numeric index of the language. Used to identify the language across locales. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLatestCompletedAchievements" Priority="0" ImageType="Method">
    <Signature>... = GetLatestCompletedAchievements(isGuild)</Signature>
    <Description>Returns a list of the player's/player guild's most recently earned achievements</Description>
    <ArgumentList Name="isGuild">
      <Description>If this argument is true, a list of the latest achievements of the player's guild is returned instead. (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of up to five numeric IDs of recently earned achievements, ordered from newest to oldest (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLatestCompletedComparisonAchievements" Priority="0" ImageType="Method">
    <Signature>... = GetLatestCompletedComparisonAchievements()</Signature>
    <Description>Returns a list of the comparison unit's most recently earned achievements</Description>
    <ReturnList Name="...">
      <Description>A list of up to five numeric IDs of recently earned achievements, ordered from newest to oldest (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLatestThreeSenders" Priority="0" ImageType="Method">
    <Signature>sender1, sender2, sender3 = GetLatestThreeSenders()</Signature>
    <Description>Returns the names of the last three senders of new mail. Returns sender names for new messages which the player has not yet seen in the mailbox; returns nothing if the player's inbox only contains unread messages which have been seen in the mailbox listing but not yet opened.</Description>
    <ReturnList Name="sender1">
      <Description>Name of a recent message's sender (string) </Description>
    </ReturnList>
    <ReturnList Name="sender2">
      <Description>Name of a recent message's sender (string) </Description>
    </ReturnList>
    <ReturnList Name="sender3">
      <Description>Name of a recent message's sender (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLatestUpdatedComparisonStats" Priority="0" ImageType="Method">
    <Signature>... = GetLatestUpdatedComparisonStats()</Signature>
    <Description>Returns a list of the comparison unit's latest updated statistics.

Currently always returns a list of invalid statistic IDs -- the "latest updated statistics" feature is no longer a part of the Achievements UI.
 </Description>
    <ReturnList Name="...">
      <Description>A list of up to five numeric IDs of recently updated statistics for the comparison unit, ordered from newest to oldest (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLatestUpdatedStats" Priority="0" ImageType="Method">
    <Signature>... = GetLatestUpdatedStats()</Signature>
    <Description>Returns a list of the player's latest updated statistics.
Currently always returns a list of invalid statistic IDs -- the "latest updated statistics" feature is no longer a part of the Achievements UI.</Description>
    <ReturnList Name="...">
      <Description>A list of up to five numeric IDs of recently updated statistics for the player, ordered from newest to oldest (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLevelUpInstances" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLocale" Priority="0" ImageType="Method">
    <Signature>locale = GetLocale()</Signature>
    <Description>Returns a code indicating the localization currently in use by the client</Description>
    <ReturnList Name="locale">
      <Description>A four character locale code indicating the localization currently in use by the client (string)
deDE - German
enGB - British English
enUS - American English
esES - Spanish (European)
esMX - Spanish (Latin American)
frFR - French
koKR - Korean
ruRU - Russian
zhCN - Chinese (simplified; mainland China)
zhTW - Chinese (traditional; Taiwan)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLookingForGuildComment" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLookingForGuildSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLootMethod" Priority="0" ImageType="Method">
    <Signature>method, partyMaster, raidMaster = GetLootMethod()</Signature>
    <Description>Returns information about the current loot method in a party or raid. Only returns useful information if the player is in a party or raid.</Description>
    <ReturnList Name="method">
      <Description>Current loot method (string)
freeforall - Free for All - any group member can take any loot at any time
group - Group Loot - like Round Robin, but items above a quality threshold are rolled on
master - Master Looter - like Round Robin, but items above a quality threshold are left for a designated loot master to
needbeforegreed - Need before Greed - like Group Loot, but members automatically pass on items
roundrobin - Round Robin - group members take turns being able to loot</Description>
    </ReturnList>
    <ReturnList Name="partyMaster">
      <Description>Numeric portion of the party unitID of the loot master (e.g. if 2, the loot master's unitID is party2); nil if not using the Master Looter method or if the player is in a raid whose loot master is not in the player's subgroup. If the player is the master looter, this value will return 0. (number) </Description>
    </ReturnList>
    <ReturnList Name="raidMaster">
      <Description>Numeric portion of the raid unitID of the loot master (e.g. if 17, the loot master's unitID is raid17); nil if not using the Master Looter method or not in a raid group (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootRollItemInfo" Priority="0" ImageType="Method">
    <Signature>texture, name, count, quality, bindOnPickUp = GetLootRollItemInfo(id)</Signature>
    <Description>Returns information about an item currently up for loot rolling</Description>
    <ArgumentList Name="id">
      <Description>Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>Number of stacked items (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) of the item. (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="bindOnPickUp">
      <Description>1 if the item is bind on pickup; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootRollItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetLootRollItemLink(id)</Signature>
    <Description>Returns a hyperlink for an item currently up for loot rolling</Description>
    <ArgumentList Name="id">
      <Description>Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the loot roll item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootRollTimeLeft" Priority="0" ImageType="Method">
    <Signature>timeLeft = GetLootRollTimeLeft(id)</Signature>
    <Description>Returns the amount of time remaining before loot rolling for an item expires. When the time expires, all group members who have not yet chosen to roll Need or Greed automatically pass, random roll results are produced for those who chose to roll, and the server declares a winner and awards the item.</Description>
    <ArgumentList Name="id">
      <Description>Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number) </Description>
    </ArgumentList>
    <ReturnList Name="timeLeft">
      <Description>Amount of time remaining before loot rolling for the item expires (in milliseconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootSlotInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetLootSlotLink" Priority="0" ImageType="Method">
    <Signature>link = GetLootSlotLink(slot)</Signature>
    <Description>Returns a hyperlink for an item available as loot. Returns nil if the loot slot is empty or contains money.</Description>
    <ArgumentList Name="slot">
      <Description>Index of a loot slot (between 1 and GetNumLootItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootSlotType" Priority="0" ImageType="Method">
    <Signature>loottype = GetLootSlotType(slot)</Signature>
    <Description>Returns the type of a given loot slot</Description>
    <ArgumentList Name="slot">
      <Description>Index of a loot slot (between 1 and GetNumLootItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="loottype">
      <Description>1 for items, 2 for money, 3 for archeology(and other currencies?) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootSourceInfo" Priority="0" ImageType="Method">
    <Signature>corpseGUID1, count1, corpseGUID2, count2, ... = GetLootSourceInfo(index)</Signature>
    <Description>Retreives information about a loot from multiple corpses (loot window must be opened)</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the loot window (between 1 and GetNumLootItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="corpseGUID1">
      <Description>Unit corpse GUID (string, guid) </Description>
    </ReturnList>
    <ReturnList Name="count1">
      <Description>Count of items in the specified corpse (number) </Description>
    </ReturnList>
    <ReturnList Name="corpseGUID2">
      <Description>Unit corpse GUID (string, guid) </Description>
    </ReturnList>
    <ReturnList Name="count2">
      <Description>Count of items in the specified corpse (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>and so on, for each item source </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetLootThreshold" Priority="0" ImageType="Method">
    <Signature>threshold = GetLootThreshold()</Signature>
    <Description>Returns the threshold used for Master Looter, Group Loot, and Need Before Greed loot methods. Items above the threshold quality will trigger the special behavior of the current loot method: for Group Loot and Need Before Greed, rolling will automatically begin once a group member loots the corpse or object holding the item; for Master Loot, the item will be invisible to all but the loot master tasked with assigning the loot.</Description>
    <ReturnList Name="threshold">
      <Description>Minimum item quality to trigger the loot method (number, itemQuality) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroBody" Priority="0" ImageType="Method">
    <Signature>body = GetMacroBody(index) or GetMacroBody("name")</Signature>
    <Description>Returns the body text of a macro</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ReturnList Name="body">
      <Description>Body text / commands of the macro (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroIcons" Priority="0" ImageType="Method">
    <Signature>icons = GetMacroIcons(tbl)</Signature>
    <Description>Returns a list of the available spell icon filenames for use in macros. The entries in this table are in 'array' form, beginning at index 1, so you can take the length of the list to get the number of available icons. In order to load item icons, you must also use GetMacroItemIcons, passing it the same table. These filenames are not usable directly, they must be prefixed with "INTERFACE\\ICONS\\" in order to be used.</Description>
    <ArgumentList Name="tbl">
      <Description>A table to be filled with the list of icon filenames. If nil, then a new table is returned. (table) </Description>
    </ArgumentList>
    <ReturnList Name="icons">
      <Description>A table containing a list of icon filenames, with the players spells listed first, followed by the other available icons. (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroIndexByName" Priority="0" ImageType="Method">
    <Signature>index = GetMacroIndexByName("name")</Signature>
    <Description>Returns the index of a macro specified by name</Description>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of the named macro, or 0 if no macro by that name exists (number, macroID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, body = GetMacroInfo(index) or GetMacroInfo("name")</Signature>
    <Description>Returns information about a macro</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the macro (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the macro (string) </Description>
    </ReturnList>
    <ReturnList Name="body">
      <Description>Body text / commands of the macro (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroItem" Priority="0" ImageType="Method">
    <Signature>name, link = GetMacroItem(index) or GetMacroItem("name")</Signature>
    <Description>Returns information about the item used by a macro. If a macro contains conditional, random, or sequence commands, this function returns the item which would currently be used if the macro were run.</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroItemIcons" Priority="0" ImageType="Method">
    <Signature>icons = GetMacroItemIcons(tbl)</Signature>
    <Description>Returns a list of the available item icon filenames for use in macros. The entries in this table are in 'array' form, beginning at index 1, so you can take the length of the list to get the number of available icons. In order to load item icons, you must also use GetMacroIcons, passing it the same table. These filenames are not usable directly, they must be prefixed with "INTERFACE\\ICONS\\" in order to be used.</Description>
    <ArgumentList Name="tbl">
      <Description>A table to be filled with the list of icon filenames. If nil, then a new table is returned. (table) </Description>
    </ArgumentList>
    <ReturnList Name="icons">
      <Description>A table containing a list of icon filenames, with the players spells listed first, followed by the other available icons. (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMacroSpell" Priority="0" ImageType="Method">
    <Signature>name, rank, spellID = GetMacroSpell(index) or GetMacroSpell("name")</Signature>
    <Description>Returns information about the spell cast by a macro. If a macro contains conditional, random, or sequence commands, this function returns the spell which would currently be cast if the macro were run.</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Secondary text associated with the spell (e.g. "Rank 4", "Racial") (string) </Description>
    </ReturnList>
    <ReturnList Name="spellID">
      <Description>The spellID of the spell (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetManaRegen" Priority="0" ImageType="Method">
    <Signature>base, casting = GetManaRegen()</Signature>
    <Description>Returns information about the player's mana regeneration rate</Description>
    <ReturnList Name="base">
      <Description>Amount of mana regenerated per second while not casting (number) </Description>
    </ReturnList>
    <ReturnList Name="casting">
      <Description>Amount of mana regenerated per second while casting (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMapContinents" Priority="0" ImageType="Method">
    <Signature>... = GetMapContinents()</Signature>
    <Description>Returns a list of map continents names</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of a map continent (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMapDebugObjectInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMapInfo" Priority="0" ImageType="Method">
    <Signature>mapFileName, textureHeight, textureWidth, isMicroDungeon, microDungeonMapName = GetMapInfo()</Signature>
    <Description>Returns information about the current world map texture. World map images are broken into several tiles; the full texture paths follow the format "Interface\\WorldMap\\"..mapFileName.."\\"..mapFileName..i, where i is a number between 1 and 12 (or in a zone with multiple area images, "Interface\\WorldMap\\"..mapFileName.."\\"..mapFileName..dungeonLevel.."_"..i, where dungeonLevel is a number between 1 and GetNumDungeonMapLevels()).
World map images are 4 tiles wide and 3 tiles high.</Description>
    <ReturnList Name="mapFileName">
      <Description>Unique part of the path to the world map textures. (string) </Description>
    </ReturnList>
    <ReturnList Name="textureHeight">
      <Description>Height of the combined map texture tiles. (number) </Description>
    </ReturnList>
    <ReturnList Name="textureWidth">
      <Description>Width of the combined map texture tiles. (string) </Description>
    </ReturnList>
    <ReturnList Name="isMicroDungeon">
      <Description>Whether or not the current map area is a Micro Dungeon. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="microDungeonMapName">
      <Description>Unique part of the path to the world map textures. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMapLandmarkInfo" Priority="0" ImageType="Method">
    <Signature>name, description, textureIndex, x, y, mapLinkID, showInBattleMap = GetMapLandmarkInfo(index)</Signature>
    <Description>Returns information about a map landmark. Possible landmarks include PvP objectives (both in battlegrounds and in world PvP areas), town and city markers on continent maps, and special markers such as those used during the Scourge Invasion world event. Some landmarks (such as those for towns on a zone map) exist but are not visible in the default UI.</Description>
    <ArgumentList Name="index">
      <Description>The index of a map landmark, from 1 to GetNumMapLandmarks() (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the landmark (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Secondary text associated with the landmark; often used to denote current status of PvP objectives (e.g. "Alliance Controlled") (string) </Description>
    </ReturnList>
    <ReturnList Name="textureIndex">
      <Description>The index of the texture to be used for the landmark. These indices map to segments of the Interface/MinimapPOI/Icons.blp graphic; the function WorldMap_GetPOITextureCoords(), defined in FrameXML/WorldMap.lua, can be used to resolve this index to a set of texture coordinates for displaying that segment. (number) </Description>
    </ReturnList>
    <ReturnList Name="x">
      <Description>Horizontal position of the landmark relative to the current world map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="y">
      <Description>Vertical position of the landmark relative to the current world map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
    <ReturnList Name="mapLinkID">
      <Description>A hyperlink ID allowing the game engine to take an action when the landmark is clicked (currently unused) (number) </Description>
    </ReturnList>
    <ReturnList Name="showInBattleMap">
      <Description>True if the landmark should be shown in the Battle Map (aka Zone Map) UI; false for landmarks which should only be shown on the World Map (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMapNameByID" Priority="0" ImageType="Method">
    <Signature>mapname = GetMapNameByID(id)</Signature>
    <Description>Returns the localized name of a given map. Map IDs can be obtained using GetCurrentMapAreaID().
Note that you cannot obtain names of multiple floors of a map using this function. Oddly enough, these are stored in global variables, as follows:
 local floorName = _G["DUNGEON_FLOOR_" .. strupper(GetMapInfo() or "") .. floorNum]</Description>
    <ArgumentList Name="id">
      <Description>The unique numeric map ID (number, mapId) </Description>
    </ArgumentList>
    <ReturnList Name="mapname">
      <Description>Localized map name. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMapOverlayInfo" Priority="0" ImageType="Method">
    <Signature>textureName, textureWidth, textureHeight, offsetX, offsetY, mapPointX, mapPointY = GetMapOverlayInfo(index)</Signature>
    <Description>Returns information about a world map overlay. Map overlays correspond to areas which are "discovered" when entered by the player, "filling in" the blank areas of the world map.</Description>
    <ArgumentList Name="index">
      <Description>Index of a map overlay (between 1 and GetNumMapOverlays()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="textureName">
      <Description>Path to the overlay texture (string) </Description>
    </ReturnList>
    <ReturnList Name="textureWidth">
      <Description>Width of the texture (in pixels) (number) </Description>
    </ReturnList>
    <ReturnList Name="textureHeight">
      <Description>Height of the texture (in pixels) (number) </Description>
    </ReturnList>
    <ReturnList Name="offsetX">
      <Description>Horizontal position of the overlay's top left corner relative to the zone map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="offsetY">
      <Description>Vertical position of the overlay's top left corner relative to the zone map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
    <ReturnList Name="mapPointX">
      <Description>Unused (number) </Description>
    </ReturnList>
    <ReturnList Name="mapPointY">
      <Description>Unused (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMapZones" Priority="0" ImageType="Method">
    <Signature>... = GetMapZones(continentIndex)</Signature>
    <Description>Returns the map zones for a given continent</Description>
    <ArgumentList Name="continentIndex">
      <Description>Index of a continent (in the list returned by GetMapContinents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of a zone within the continent (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMasterLootCandidate" Priority="0" ImageType="Method">
    <Signature>candidate = GetMasterLootCandidate(index)</Signature>
    <Description>Returns information about a given loot candidate. Used in the default UI to build the popup menu used in master loot assignment. Only valid if the player is the master looter.
Not all party/raid members may be eligible for a given corpse's (or object's) loot: e.g. a member is ineligible for loot from a creature killed while that member was not in the immediate area. By repeatedly calling this function (with index incrementing from 1 to the total number of party/raid members, including the player), one can build a list of the names of members eligible for the current loot.
The index is cast in stone at the time the mob was killed. If you move raid members around prior to distributing loot, their original positions will be returned by this function. The expression ceil(index/5) will yield the group number (in a raid) and the expression index % 5 will yield the group position number for an eligible raider.</Description>
    <ArgumentList Name="index">
      <Description>Index of a member of the party or raid (not equivalent to the numeric part of a party or raid unitID) (number) </Description>
    </ArgumentList>
    <ReturnList Name="candidate">
      <Description>Name of the candidate (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMastery" Priority="0" ImageType="Method">
    <Signature>GetMastery()</Signature>
    <Description>Returns the mastery value of your character</Description>
  </WowApi>
  <WowApi Name="GetMasteryEffect" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMaxAnimFramerate" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMaxArenaCurrency" Priority="0" ImageType="Method">
    <Signature>amount = GetMaxArenaCurrency()</Signature>
    <Description>Returns the maximum amount of arena points the player can accrue</Description>
    <ReturnList Name="amount">
      <Description>The maximum amount of arena points the player can accrue (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMaxBattlefieldID" Priority="0" ImageType="Method">
    <Signature>numBattlefields = GetMaxBattlefieldID()</Signature>
    <Description>Returns the number of battlefields the player is associated with.. GetBattlefieldStatus(index) can be used to retrieve detailed information about a battlefield.</Description>
    <ReturnList Name="numBattlefields">
      <Description>The number of battlefields the player is currently associated with (either queued for or actively participating in). (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMaxCombatRatingBonus" Priority="0" ImageType="Method">
    <Signature>max = GetMaxCombatRatingBonus(ratingIndex)</Signature>
    <Description>Returns the maximum possible percentage bonus for a given combat rating.
While this function can be applied to all combat ratings, it is currently only used in the default UI to account for the cap on (incoming) critical strike damage and mana drains provided by Resilience rating -- specifically, in generating the tooltip where Resilience rating is shown in the Character window (PaperDollFrame).</Description>
    <ArgumentList Name="ratingIndex">
      <Description>Which rating to query; the following global constants can be used for standard values: (number)
CR_BLOCK - Block skill
CR_CRIT_MELEE - Melee critical strike chance
CR_CRIT_RANGED - Ranged critical strike chance
CR_CRIT_SPELL - Spell critical strike chance
CR_CRIT_TAKEN_MELEE - Resilience (as applied to melee attacks)
CR_CRIT_TAKEN_RANGED - Resilience (as applied to ranged attacks)
CR_CRIT_TAKEN_SPELL - Resilience (as applied to spell effects
CR_DEFENSE_SKILL - Defense skill
CR_DODGE - Dodge skill
CR_HASTE_MELEE - Melee haste
CR_HASTE_RANGED - Ranged haste
CR_HASTE_SPELL - Spell haste
CR_HIT_MELEE - Melee chance to hit
CR_HIT_RANGED - Ranged chance to hit
CR_HIT_SPELL - Spell chance to hit
CR_HIT_TAKEN_MELEE - Unused
CR_HIT_TAKEN_RANGED - Unused
CR_HIT_TAKEN_SPELL - Unused
CR_PARRY - Parry skill
CR_WEAPON_SKILL - Weapon skill
CR_WEAPON_SKILL_MAINHAND - Main-hand weapon skill
CR_WEAPON_SKILL_OFFHAND - Offhand weapon skill
CR_WEAPON_SKILL_RANGED - Ranged weapon skill</Description>
    </ArgumentList>
    <ReturnList Name="max">
      <Description>The maximum possible percentage bonus for the given rating (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMaxMultisampleFormatOnCvar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMaxNumCUFProfiles" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMaxPlayerLevel" Priority="0" ImageType="Method">
    <Signature>maxLevel = GetMaxPlayerLevel()</Signature>
    <Description>Returns the maximum level attainable by a player</Description>
    <ReturnList Name="maxLevel">
      <Description>The maximum level attainable by a player (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMaxSpellStartRecoveryOffset" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMaxTalentTier" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMeleeHaste" Priority="0" ImageType="Method">
    <Signature>haste = GetMeleeHaste()</Signature>
    <Description>Returns information about the player's melee haste</Description>
    <ReturnList Name="haste">
      <Description>The player's melee haste. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMerchantCurrencies" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMerchantFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMerchantItemCostInfo" Priority="0" ImageType="Method">
    <Signature>currencyCount = GetMerchantItemCostInfo(index)</Signature>
    <Description>Returns information about alternate currencies required to purchase an item from a vendor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="currencyCount">
      <Description>Number of different currencies required to purchase the item (see GetMerchantItemCostItem() for amount of each item currency required) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMerchantItemCostItem" Priority="0" ImageType="Method">
    <Signature>texture, value, link, name = GetMerchantItemCostItem(index, currency)</Signature>
    <Description>Returns information about currency items required to purchase an item from a vendor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="currency">
      <Description>Index of one of the item currencies required to purchase the item (between 1 and GetMerchantItemCostInfo(index)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the currency item (string) </Description>
    </ReturnList>
    <ReturnList Name="value">
      <Description>Amount of the currency required for purchase (number) </Description>
    </ReturnList>
    <ReturnList Name="link">
      <Description>A hyperlink for the currency item (string, hyperlink) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The localized name of the currency (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMerchantItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, price, quantity, numAvailable, isUsable, extendedCost = GetMerchantItemInfo(index)</Signature>
    <Description>Returns information about an item available for purchase from a vendor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="price">
      <Description>Current cost to purchase the item from this vendor (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="quantity">
      <Description>Number of stacked items per purchase (number) </Description>
    </ReturnList>
    <ReturnList Name="numAvailable">
      <Description>Number of items available for purchase, if the vendor has a limited stock of the item; -1 if the vendor has an unlimited supply of the item (number) </Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="extendedCost">
      <Description>1 if the item's price uses one or more alternate currencies (for which details can be found via GetMerchantItemCostInfo(index)); otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMerchantItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetMerchantItemLink(index)</Signature>
    <Description>Returns a hyperlink for an item available for purchase from a vendor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMerchantItemMaxStack" Priority="0" ImageType="Method">
    <Signature>maxStack = GetMerchantItemMaxStack(index)</Signature>
    <Description>Returns the maximum number of an item allowed in a single purchase. Determines the largest value usable for the second argument (quantity) of BuyMerchantItem() when purchasing the item. For most items, this is the same as the maximum stack size of the item.</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="maxStack">
      <Description>Largest number of items allowed in a single purchase (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMerchantNumItems" Priority="0" ImageType="Method">
    <Signature>numMerchantItems = GetMerchantNumItems()</Signature>
    <Description>Returns the number of different items available for purchase from a vendor</Description>
    <ReturnList Name="numMerchantItems">
      <Description>Number of different items available for purchase (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMinigameState" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMinigameType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMinimapZoneText" Priority="0" ImageType="Method">
    <Signature>zoneText = GetMinimapZoneText()</Signature>
    <Description>Returns the name of the current area (as displayed in the Minimap). Matches GetSubZoneText(), GetRealZoneText() or GetZoneText().</Description>
    <ReturnList Name="zoneText">
      <Description>Name of the area containing the player's current location (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMirrorTimerInfo" Priority="0" ImageType="Method">
    <Signature>timer, value, maxvalue, scale, paused, label = GetMirrorTimerInfo(index)</Signature>
    <Description>Returns information about special countdown timers</Description>
    <ArgumentList Name="index">
      <Description>Index of an available timer (between 1 and MIRRORTIMER_NUMTIMERS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="timer">
      <Description>Non-localized token identifying the type of timer (string)
BREATH - Used for the Breath timer when swimming underwater
DEATH - Currently unused
EXHAUSTION - Used for the Fatigue timer when swimming far from shore
FEIGNDEATH - Used for the Hunter Feign Death ability</Description>
    </ReturnList>
    <ReturnList Name="value">
      <Description>Number of seconds remaining before the timer expires (number) </Description>
    </ReturnList>
    <ReturnList Name="maxvalue">
      <Description>Maximum value of the timer (number) </Description>
    </ReturnList>
    <ReturnList Name="scale">
      <Description>Rate at which the timer bar should move (e.g. -1 for a slowly "emptying" bar, 10 for a quickly "filling" bar); unused in the default UI (number) </Description>
    </ReturnList>
    <ReturnList Name="paused">
      <Description>1 if the timer is currently paused; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="label">
      <Description>Localized text to be displayed for the timer (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMirrorTimerProgress" Priority="0" ImageType="Method">
    <Signature>progress = GetMirrorTimerProgress("timer")</Signature>
    <Description>Returns a high-resolution value for a special countdown timer</Description>
    <ArgumentList Name="timer">
      <Description>Non-localized token identifying the type of timer (string)
BREATH - Used for the Breath timer when swimming underwater
DEATH - Currently unused
EXHAUSTION - Used for the Fatigue timer when swimming far from shore
FEIGNDEATH - Used for the Hunter Feign Death ability</Description>
    </ArgumentList>
    <ReturnList Name="progress">
      <Description>Number of milliseconds remaining before the timer expires (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMissingLootItemInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMissingLootItemLink" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetModResilienceDamageReduction" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetModifiedClick" Priority="0" ImageType="Method">
    <Signature>binding = GetModifiedClick("name")</Signature>
    <Description>Returns the keys/buttons bound for a modified click action</Description>
    <ArgumentList Name="name">
      <Description>Token identifying a modified click action (string) </Description>
    </ArgumentList>
    <ReturnList Name="binding">
      <Description>The set of modifiers (and mouse button, if applicable) registered for the action (string, binding) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetModifiedClickAction" Priority="0" ImageType="Method">
    <Signature>action = GetModifiedClickAction(index)</Signature>
    <Description>Returns the token identifying a modified click action</Description>
    <ArgumentList Name="index">
      <Description>Index of a modified click action (between 1 and GetNumModifiedClickActions()) (number) </Description>
    </ArgumentList>
    <ReturnList />
  </WowApi>
  <WowApi Name="GetMoney" Priority="0" ImageType="Method">
    <Signature>money = GetMoney()</Signature>
    <Description>Returns the total amount of money currently in the player's possession</Description>
    <ReturnList Name="money">
      <Description>Amount of money currently in the player's possession (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMonitorAspectRatio" Priority="0" ImageType="Method">
    <Signature>ratio = GetMonitorAspectRatio(monitorIndex)</Signature>
    <Description>Query a monitor's aspect ratio</Description>
    <ArgumentList Name="monitorIndex">
      <Description>Number of the monitor to query; nil = current (number) </Description>
    </ArgumentList>
    <ReturnList Name="ratio">
      <Description>Horizontal-to-vertical aspect ratio of the queried monitor (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMonitorCount" Priority="0" ImageType="Method">
    <Signature>count = GetMonitorCount()</Signature>
    <Description>Returns the number of monitors connected</Description>
    <ReturnList Name="count">
      <Description>Number of monitors connected (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMonitorName" Priority="0" ImageType="Method">
    <Signature>name = GetMonitorName(monitorIndex)</Signature>
    <Description>Returns the system name of a selected monitor</Description>
    <ArgumentList Name="monitorIndex">
      <Description>Number of the monitor to query; nil = current (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>System name of the queried monitor (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMouseButtonClicked" Priority="0" ImageType="Method">
    <Signature>button = GetMouseButtonClicked()</Signature>
    <Description>Returns which mouse button triggered the current script. If called in a line of execution that started with a click handler (OnMouseDown, OnMouseUp, OnClick, OnDoubleClick, PreClick, or PostClick), returns a string identifying which mouse button triggered the handler. Otherwise, returns nil.</Description>
    <ReturnList Name="button">
      <Description>Name of the mouse button that triggered the current script (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMouseButtonName" Priority="0" ImageType="Method">
    <Signature>buttonName = GetMouseButtonName(buttonNumber)</Signature>
    <Description>Returns the name for a mouse button specified by number</Description>
    <ArgumentList Name="buttonNumber">
      <Description>A mouse button number (1-5) (number) </Description>
    </ArgumentList>
    <ReturnList Name="buttonName">
      <Description>The name of the given mouse button (string)
Button4
Button5
LeftButton
MiddleButton
RightButton</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMouseFocus" Priority="0" ImageType="Method">
    <Signature>frame = GetMouseFocus()</Signature>
    <Description>Returns the frame that is currently under the mouse, and has mouse input enabled.</Description>
    <ReturnList Name="frame">
      <Description>The frame that currently has the mouse focus (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMovieDownloadProgress" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMultiCastBarIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMultiCastTotemSpells" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetMultisampleFormats" Priority="0" ImageType="Method">
    <Signature>color, depth, multisample, ... = GetMultisampleFormats()</Signature>
    <Description>Returns a list of available multisample settings. Used in the default UI to provide descriptions of multisample settings (e.g. "24-bit color 24-bit depth 6x multisample").
Indices used by GetCurrentMultisampleFormat() and SetMultisampleFormat() refer to the groups of color, depth and multisample values returned by this function; e.g. index 1 refers to values 1 through 3, index 2 to values 4 through 6, etc.</Description>
    <ReturnList Name="color">
      <Description>Color depth (in bits) (number) </Description>
    </ReturnList>
    <ReturnList Name="depth">
      <Description>Video depth (in bits) (number) </Description>
    </ReturnList>
    <ReturnList Name="multisample">
      <Description>Number of samples per pixel (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional sets of color, depth and multisample values, one for each multisample setting (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMuteName" Priority="0" ImageType="Method">
    <Signature>name = GetMuteName(index)</Signature>
    <Description>Returns the name of a character on the mute list</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the mute listing (between 1 and GetNumMutes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the muted character (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetMuteStatus" Priority="0" ImageType="Method">
    <Signature>muteStatus = GetMuteStatus("unit" [, "channel"]) or GetMuteStatus("name" [, "channel"])</Signature>
    <Description>Returns whether a character is muted or silenced. If the channel argument is specified, this function checks the given character's voice/silence status on the channel as well as for whether the character is on the player's Muted list.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a character to query (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>Name of a voice channel (string) </Description>
    </ArgumentList>
    <ReturnList Name="muteStatus">
      <Description>1 if the character is muted; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNamePlateMotionType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNetIpTypes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNetStats" Priority="0" ImageType="Method">
    <Signature>bandwidthIn, bandwidthOut, latencyHome, latencyWorld = GetNetStats()</Signature>
    <Description>Returns information about current network connection performance</Description>
    <ReturnList Name="bandwidthIn">
      <Description>Current incomming bandwidth (download) usage, measured in KB/s (number) </Description>
    </ReturnList>
    <ReturnList Name="bandwidthOut">
      <Description>Current outgoing bandwidth (upload) usage, measured in KB/s (number) </Description>
    </ReturnList>
    <ReturnList Name="latencyHome">
      <Description>Average roundtrip latency to the home realm server (only updated every 30 seconds) (number) </Description>
    </ReturnList>
    <ReturnList Name="latencyWorld">
      <Description>Average roundtrip latency to the current world server (only updated every 30 seconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNewSocketInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, matches = GetNewSocketInfo(index)</Signature>
    <Description>Returns information about a gem added to a socket. If the given socket contains a new gem (one that has been placed in the UI, but not yet confirmed for permanently socketing into the item), returns information for that gem. If the socket is empty or has a permanently socketed gem but no new gem, returns nil.
Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a gem socket (between 1 and GetNumSockets()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetNewSocketLink" Priority="0" ImageType="Method">
    <Signature>link = GetNewSocketLink(index)</Signature>
    <Description>Returns a hyperlink for a gem added to a socket. If the given socket contains a new gem (one that has been placed in the UI, but not yet confirmed for permanently socketing into the item), returns an item link for that gem. If the socket is empty or has a permanently socketed gem but no new gem, returns nil.
Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a gem socket (between 1 and GetNumSockets()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the gem added to the socket (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNextAchievement" Priority="0" ImageType="Method">
    <Signature>nextID, completed = GetNextAchievement(id)</Signature>
    <Description>Returns the next achievement for an achievement which is part of a series</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ReturnList Name="nextID">
      <Description>If the given achievement is part of a series and not the last in its series, the ID of the next achievement in the series; otherwise nil (number) </Description>
    </ReturnList>
    <ReturnList Name="completed">
      <Description>True if the next achievement has been completed; otherwise nil (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNextCompleatedTutorial" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNextGuildPerkIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumActiveQuests" Priority="0" ImageType="Method">
    <Signature>numActiveQuests = GetNumActiveQuests()</Signature>
    <Description>Returns the number of quests which can be turned in to the current Quest NPC. Only returns valid information after a QUEST_GREETING event.
Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.</Description>
    <ReturnList Name="numActiveQuests">
      <Description>Number of quests which can be turned in to the current Quest NPC (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumAddOns" Priority="0" ImageType="Method">
    <Signature>numAddons = GetNumAddOns()</Signature>
    <Description>Returns the number of addons in the addon listing</Description>
    <ReturnList Name="numAddons">
      <Description>The number of addons in the addon listing (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumArchaeologyRaces" Priority="0" ImageType="Method">
    <Signature>numRaces = GetNumArchaeologyRaces()</Signature>
    <Description>Return the amount of different races (branches) in Archeology. As of 4.0, always 10.
Only 9 races are known, in order: 1. Dwarf 2. Draenei 3. Fossil 4. Night Elf 5. Nerubian 6. Orc 7. Tol'vir 8. Troll 9. Vrykul</Description>
    <ReturnList Name="numRaces">
      <Description>The number of Archaeology races in the game (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumArenaOpponentSpecs" Priority="0" ImageType="Method">
    <Signature>numOpps = GetNumArenaOpponentSpecs()</Signature>
    <Description>Returns the number of enemy players which specialization data are available in an arena match</Description>
    <ReturnList Name="numOpps">
      <Description>Returns the number of enemy players which specialization data are available in an arena match (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumArenaOpponents" Priority="0" ImageType="Method">
    <Signature>numOpponents = GetNumArenaOpponents()</Signature>
    <Description>Returns the number of enemy players in an arena match</Description>
    <ReturnList Name="numOpponents">
      <Description>Number of enemy players in an arena match (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumArenaTeamMembers" Priority="0" ImageType="Method">
    <Signature>numMembers = GetNumArenaTeamMembers(teamindex, showOffline)</Signature>
    <Description>Returns the number of members in an arena team</Description>
    <ArgumentList Name="teamindex">
      <Description>The index of the arena team, based on the order they are displayed in the PvP tab. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="showOffline">
      <Description>True to include currently offline members in the count; otherwise false (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="numMembers">
      <Description>Number of characters on the team (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumArtifactsByRace" Priority="0" ImageType="Method">
    <Signature>numProjects = GetNumArtifactsByRace(branchID)</Signature>
    <Description>Return the amount of artifacts the player has acquired from the provided race. Opening the Archaeology window populates the values. The value returned is the number of completed artifacts for that race plus one for the in progress artifact. If the player hasn't collected the race's fragments yet, the value will be 0. Artifacts are only counted once so no matter how many times an artifact has been repeated it counts as one.</Description>
    <ArgumentList Name="branchID">
      <Description>Index of the branch (race) to be selected (number) </Description>
    </ArgumentList>
    <ReturnList Name="numProjects">
      <Description>Number of projects (artifacts) for that race (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumAuctionItems" Priority="0" ImageType="Method">
    <Signature>numBatchAuctions, totalAuctions = GetNumAuctionItems("list")</Signature>
    <Description>Returns the number of auction items in a listing</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ReturnList Name="numBatchAuctions">
      <Description>Number of auctions in the current page of the listing (number) </Description>
    </ReturnList>
    <ReturnList Name="totalAuctions">
      <Description>Total number of auctions available for the listing (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumAutoQuestPopUps" Priority="0" ImageType="Method">
    <Signature>numPopups = GetNumAutoQuestPopUps()</Signature>
    <Description>Returns number of AutoQuestPopup(s)</Description>
    <ReturnList Name="numPopups">
      <Description>Total amount of existing AutoQuestPopup(s) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumAvailableQuests" Priority="0" ImageType="Method">
    <Signature>numAvailableQuests = GetNumAvailableQuests()</Signature>
    <Description>Returns the number quests available from the current Quest NPC. Only returns valid information after a QUEST_GREETING event.
Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.</Description>
    <ReturnList Name="numAvailableQuests">
      <Description>Number of quests available from the current Quest NPC (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBankSlots" Priority="0" ImageType="Method">
    <Signature>numSlots, isFull = GetNumBankSlots()</Signature>
    <Description>Returns information about purchased bank bag slots</Description>
    <ReturnList Name="numSlots">
      <Description>Number of bank bag slots the player has purchased (number) </Description>
    </ReturnList>
    <ReturnList />
  </WowApi>
  <WowApi Name="GetNumBattlefieldFlagPositions" Priority="0" ImageType="Method">
    <Signature>numFlags = GetNumBattlefieldFlagPositions()</Signature>
    <Description>Returns the number of battleground flags for which map position information is available</Description>
    <ReturnList Name="numFlags">
      <Description>Number of battleground flags for which map position information is available (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBattlefieldScores" Priority="0" ImageType="Method">
    <Signature>numScores = GetNumBattlefieldScores()</Signature>
    <Description>Returns the number of participant scores available in the current battleground</Description>
    <ReturnList Name="numScores">
      <Description>Number of participant scores available in the current battleground; 0 if not in a battleground (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBattlefieldStats" Priority="0" ImageType="Method">
    <Signature>numStats = GetNumBattlefieldStats()</Signature>
    <Description>Returns the number of battleground-specific statistics on the current battleground's scoreboard. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc. For the name and icon associated with each statistic, see GetBattlefieldStatInfo().</Description>
    <ReturnList Name="numStats">
      <Description>Number of battleground-specific scoreboard columns (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBattlefieldVehicles" Priority="0" ImageType="Method">
    <Signature>numVehicles = GetNumBattlefieldVehicles()</Signature>
    <Description>Returns the number of special vehicles in the current zone. Used only for certain vehicles in certain zones: includes the airships in Icecrown as well as vehicles used in Ulduar, Wintergrasp, and Strand of the Ancients.</Description>
    <ReturnList Name="numVehicles">
      <Description>Number of special vehicles (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBattlegroundTypes" Priority="0" ImageType="Method">
    <Signature>numBattlegrounds = GetNumBattlegroundTypes()</Signature>
    <Description>Returns the number of different battlegrounds available. Refers to distinct battlegrounds, not battleground instances. Does not indicate the number of battlegrounds the player can enter: for that, see GetBattlegroundInfo.
As of WoW 3.2, should always return 6: for Alterac Valley, Warsong Gulch, Arathi Basin, Eye of the Storm, Strand of the Ancients, and Isle of Conquest. If a future patch adds a new battleground, this function will reflect that.</Description>
    <ReturnList Name="numBattlegrounds">
      <Description>Number of different battlegrounds available (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBindings" Priority="0" ImageType="Method">
    <Signature>numBindings = GetNumBindings()</Signature>
    <Description>Returns the number of entries in the key bindings list</Description>
    <ReturnList Name="numBindings">
      <Description>Number of binding actions (and headers) in the key bindings list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumBuybackItems" Priority="0" ImageType="Method">
    <Signature>numBuybackItems = GetNumBuybackItems()</Signature>
    <Description>Returns the number of items recently sold to a vendor and available to be repurchased</Description>
    <ReturnList Name="numBuybackItems">
      <Description>Number of items available to be repurchased (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumChallengeMapRewards" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumChallengeModeLeaders" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumChannelMembers" Priority="0" ImageType="Method">
    <Signature>numMembers = GetNumChannelMembers(id)</Signature>
    <Description>Returns the number of members in a chat channel</Description>
    <ArgumentList Name="id">
      <Description>Numeric identifier of a chat channel (number) </Description>
    </ArgumentList>
    <ReturnList Name="numMembers">
      <Description>Number of characters in the channel (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumClasses" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumCompanions" Priority="0" ImageType="Method">
    <Signature>count = GetNumCompanions("type")</Signature>
    <Description>Returns the number of mounts or non-combat pets the player can summon</Description>
    <ArgumentList Name="type">
      <Description>The type of companion (string)
CRITTER - Non-combat pets
MOUNT - Mounts</Description>
    </ArgumentList>
    <ReturnList Name="count">
      <Description>The number of available companions (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumComparisonCompletedAchievements" Priority="0" ImageType="Method">
    <Signature>total, completed = GetNumComparisonCompletedAchievements()</Signature>
    <Description>Returns the number of achievements earned by the comparison unit.

Does not include Feats of Strength.
 </Description>
    <ReturnList Name="total">
      <Description>Total number of achievements currently in the game (number) </Description>
    </ReturnList>
    <ReturnList Name="completed">
      <Description>Number of achievements earned by the comparison unit (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumCompletedAchievements" Priority="0" ImageType="Method">
    <Signature>total, completed = GetNumCompletedAchievements()</Signature>
    <Description>Returns the number of achievements earned by the player.
Does not include Feats of Strength.</Description>
    <ReturnList Name="total">
      <Description>Total number of achievements currently in the game (number) </Description>
    </ReturnList>
    <ReturnList Name="completed">
      <Description>Number of achievements earned by the player (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumDeclensionSets" Priority="0" ImageType="Method">
    <Signature>numSets = GetNumDeclensionSets("name", gender)</Signature>
    <Description>Returns the number of suggested declension sets for a name. Used in the Russian localized World of Warcraft client; see DeclineName for further details. Returns 0 in other locales.</Description>
    <ArgumentList Name="name">
      <Description>Nominative form of the player's or pet's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="gender">
      <Description>Gender for names (for declensions of the player's name, should match the player's gender; for the pet's name, should be neuter) (number)
1 or nil - Neuter
2 - Male
3 - Female</Description>
    </ArgumentList>
    <ReturnList Name="numSets">
      <Description>Number of available declension sets usable with DeclineName (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumDisplayChannels" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumDungeonForRandomSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumDungeonMapLevels" Priority="0" ImageType="Method">
    <Signature>numLevels, firstLevel = GetNumDungeonMapLevels()</Signature>
    <Description>Returns the number of map images for the world map's current zone. Used in zones with more than one "floor" or area such as Dalaran and several Wrath of the Lich King dungeons and raids.
The returns vary depending on your current location in the zone. If you're in a "micro dungeon" (see GetMapInfo), you'll get different values. firstFloor is the absolute starting value, while numLevels is the number of steps to go past that.
Can be used to derive the number in the internal floor names list that the "1" floor corresponds to. For example, in Dun Morogh's "Grizzled Den", it returns {1,7} - because we're on the first floor of _G['DUNGEON_FLOOR_DUNMOROGH7']=="Grizzled Den"</Description>
    <ReturnList Name="numLevels">
      <Description>Number of map images (number) </Description>
    </ReturnList>
    <ReturnList Name="firstLevel">
      <Description>The index of the first floor (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumEquipmentSets" Priority="0" ImageType="Method">
    <Signature>numSets = GetNumEquipmentSets()</Signature>
    <Description>Returns the number of saved equipment sets</Description>
    <ReturnList Name="numSets">
      <Description>Number of saved equipment sets (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumFactions" Priority="0" ImageType="Method">
    <Signature>numFactions = GetNumFactions()</Signature>
    <Description>Returns the number of entries in the reputation UI.
Entries in the reputation UI can be major group headers (Classic, Burning Crusade, Wrath of the Lich King, Inactive, etc.), the sub-group headers within them (Alliance Forces, Steamwheedle Cartel, Horde Expedition, Shattrath City, etc.), or individual factions (Darkmoon Faire, Orgrimmar, Honor Hold, Kirin Tor, etc.).
This function returns not the total number of factions (and headers) known, but the number which should currently be visible in the UI according to the expanded/collapsed state of headers.
 </Description>
    <ReturnList Name="numFactions">
      <Description>The number of visible factions and headers (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumFlyouts" Priority="0" ImageType="Method">
    <Signature>numFlyouts = GetNumFlyouts()</Signature>
    <Description>Returns the number of flyout actions in the UI. Examples of flyouts are the mage portal button and the warlock and hunter pet summoning buttons. These flyouts can be placed in action buttons.</Description>
    <ReturnList Name="numFlyouts">
      <Description>Number of flyout UI elements (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumFrames" Priority="0" ImageType="Method">
    <Signature>numFrames = GetNumFrames()</Signature>
    <Description>Returns the number of existing Frame objects (and derivatives). Only counts Frame objects and derivatives thereof (e.g. Button, Minimap, and StatusBar; but not FontString, AnimationGroup, and Texture).</Description>
    <ReturnList Name="numFrames">
      <Description>Number of existing Frame objects (and derivatives) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumFriends" Priority="0" ImageType="Method">
    <Signature>numFriends, numFriendsOnline = GetNumFriends()</Signature>
    <Description>Returns the number of characters and online characters on the player's friends list</Description>
    <ReturnList Name="numFriends">
      <Description>Number of characters currently on the friends list (number) </Description>
    </ReturnList>
    <ReturnList Name="numFriendsOnline">
      <Description>Number of online characters currently on the friends list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGlyphSockets" Priority="0" ImageType="Method">
    <Signature>GetNumGlyphSockets()</Signature>
    <Description>Currently unused. Use the constant NUM_GLYPH_SLOTS instead.</Description>
  </WowApi>
  <WowApi Name="GetNumGlyphs" Priority="0" ImageType="Method">
    <Signature>numGlyphs = GetNumGlyphs()</Signature>
    <Description>Returns the total amount of glyphs for the player's class</Description>
    <ReturnList Name="numGlyphs">
      <Description>Number of glyphs for the player's class (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGossipActiveQuests" Priority="0" ImageType="Method">
    <Signature>num = GetNumGossipActiveQuests()</Signature>
    <Description>Returns the number of quests which can be turned in to the current Gossip NPC. These quests are displayed with a question mark icon in the default UI's GossipFrame.</Description>
    <ReturnList Name="num">
      <Description>Number of quests which can be turned in to the current Gossip NPC (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGossipAvailableQuests" Priority="0" ImageType="Method">
    <Signature>num = GetNumGossipAvailableQuests()</Signature>
    <Description>Returns the number of quests available from the current Gossip NPC. These quests are displayed with an exclamation mark icon in the default UI's GossipFrame.</Description>
    <ReturnList Name="num">
      <Description>Number of quests available from the current Gossip NPC (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGossipOptions" Priority="0" ImageType="Method">
    <Signature>numOptions = GetNumGossipOptions()</Signature>
    <Description>Returns the number of non-quest dialog options for the current Gossip NPC. Used by the default UI to skip greeting gossip for NPCs which provide only a greeting and one gossip option leading to the NPC's main interaction type (e.g. flight masters, merchants).</Description>
    <ReturnList Name="numOptions">
      <Description>Number of options available from the current Gossip NPC (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGroupMembers" Priority="0" ImageType="Method">
    <Signature>playerNumber = GetNumGroupMembers()</Signature>
    <Description>Return number of players in current party/raid.</Description>
    <ReturnList Name="playerNumber">
      <Description>Number of players (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildApplicants" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumGuildBankMoneyTransactions" Priority="0" ImageType="Method">
    <Signature>numTransactions = GetNumGuildBankMoneyTransactions()</Signature>
    <Description>Returns the number of transactions in the guild bank money log</Description>
    <ReturnList Name="numTransactions">
      <Description>Number of transactions in the money log (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildBankTabs" Priority="0" ImageType="Method">
    <Signature>numTabs = GetNumGuildBankTabs()</Signature>
    <Description>Returns the number of purchased tabs in the guild bank. Returns valid information even if the player is not interacting with a guild bank vault.</Description>
    <ReturnList Name="numTabs">
      <Description>Number of active tabs in the guild bank (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildBankTransactions" Priority="0" ImageType="Method">
    <Signature>numTransactions = GetNumGuildBankTransactions(tab)</Signature>
    <Description>Returns the number of entries in a guild bank tab's transaction log. Only returns valid information following the GUILDBANKLOG_UPDATE event which fires after calling QueryGuildBankLog().</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="numTransactions">
      <Description>Number of transactions in the tab's log (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildChallenges" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumGuildEvents" Priority="0" ImageType="Method">
    <Signature>numEvents = GetNumGuildEvents()</Signature>
    <Description>Returns the number of entries in the guild event log. Only returns valid data after calling QueryGuildEventLog() and the following GUILD_EVENT_LOG_UPDATE event has fired.</Description>
    <ReturnList Name="numEvents">
      <Description>Number of entries in the guild event log (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildMembers" Priority="0" ImageType="Method">
    <Signature>numGuildMembers, numOnline, numOnlineAndMobile = GetNumGuildMembers()</Signature>
    <Description>Returns the number of members in the guild roster</Description>
    <ReturnList Name="numGuildMembers">
      <Description>Number of members in the guild roster (number) </Description>
    </ReturnList>
    <ReturnList Name="numOnline">
      <Description>Number of online guild members (number) </Description>
    </ReturnList>
    <ReturnList Name="numOnlineAndMobile">
      <Description>Number of online guild members (includes players online through mobile app) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildMembershipRequests" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumGuildNews" Priority="0" ImageType="Method">
    <Signature>numNews = GetNumGuildNews()</Signature>
    <Description>Returns the total amount of guild news (filtered)</Description>
    <ReturnList Name="numNews">
      <Description>Number of guild news in total (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildPerks" Priority="0" ImageType="Method">
    <Signature>numPerks = GetNumGuildPerks()</Signature>
    <Description>Returns the total amount of guild perks (including unavailable ones)</Description>
    <ReturnList Name="numPerks">
      <Description>Number of guild perks in total (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildRewards" Priority="0" ImageType="Method">
    <Signature>numRewards = GetNumGuildRewards()</Signature>
    <Description>Return the total amount of guild rewards (including unavailable ones)</Description>
    <ReturnList Name="numRewards">
      <Description>Number of guild rewards in total (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumGuildTradeSkill" Priority="0" ImageType="Method">
    <Signature>GetNumGuildTradeSkill()</Signature>
    <Description>Returns the number of people and headers currently visible in the profession view of your guild window. This functions returns the number of people (including the headers that are also counted as one player each) which you can currently see in your guild profession window. If you select "Show offline Members" they will also be counted.
To make things clear a small example: let's assume you have all professions in your guild and the headers are all collapsed then this will return 11 (as of WoW 4.0). If you have 7 alchemists, 4 of them are online and you have not checked "Show Offline Members" then this will return 15. If you check the box to show all members then this will return 18.</Description>
  </WowApi>
  <WowApi Name="GetNumIgnores" Priority="0" ImageType="Method">
    <Signature>numIgnores = GetNumIgnores()</Signature>
    <Description>Returns the number of characters on the player's ignore list</Description>
    <ReturnList Name="numIgnores">
      <Description>Number of characters currently on the ignore list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumLanguages" Priority="0" ImageType="Method">
    <Signature>languages = GetNumLanguages()</Signature>
    <Description>Returns the number of languages the player character can speak</Description>
    <ReturnList Name="languages">
      <Description>Number of in-game languages known to the player character (generally 2 for most races, 1 for Orcs or Humans) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumLootItems" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumMacros" Priority="0" ImageType="Method">
    <Signature>numAccountMacros, numCharacterMacros = GetNumMacros()</Signature>
    <Description>Returns the number of macros the player has stored</Description>
    <ReturnList Name="numAccountMacros">
      <Description>Number of account-wide macros (number) </Description>
    </ReturnList>
    <ReturnList Name="numCharacterMacros">
      <Description>Number of character-specific macros (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumMapDebugObjects" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumMapLandmarks" Priority="0" ImageType="Method">
    <Signature>numLandmarks = GetNumMapLandmarks()</Signature>
    <Description>Returns the number of landmarks on the world map. Possible landmarks include PvP objectives (both in battlegrounds and in world PvP areas), town and city markers on continent maps, and special markers such as those used during the Scourge Invasion world event. Some landmarks (such as those for towns on a zone map) exist but are not visible in the default UI.</Description>
    <ReturnList Name="numLandmarks">
      <Description>The number of landmarks on the current world map (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumMapOverlays" Priority="0" ImageType="Method">
    <Signature>numOverlays = GetNumMapOverlays()</Signature>
    <Description>Returns the number of overlays for the current world map zone. Map overlays correspond to areas which are "discovered" when entered by the player, "filling in" the blank areas of the world map.</Description>
    <ReturnList Name="numOverlays">
      <Description>Number of overlays for the current world map zone (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumMembersInRank" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumMissingLootItems" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumModifiedClickActions" Priority="0" ImageType="Method">
    <Signature>num = GetNumModifiedClickActions()</Signature>
    <Description>Returns the number of modified click actions registered. May return an invalid result if called when no modified click actions have been registered (i.e. early in the UI loading process).</Description>
    <ReturnList Name="num">
      <Description>Number of modifed click actions registered (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumMutes" Priority="0" ImageType="Method">
    <Signature>numMuted = GetNumMutes()</Signature>
    <Description>Returns the number of characters on the player's mute list</Description>
    <ReturnList Name="numMuted">
      <Description>The number of characters on the player's mute list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumNamePlateMotionTypes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumPackages" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumPetitionNames" Priority="0" ImageType="Method">
    <Signature>numNames = GetNumPetitionNames()</Signature>
    <Description>Returns the number of people who have signed the open petition</Description>
    <ReturnList Name="numNames">
      <Description>Number of characters that have signed the petition (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestChoices" Priority="0" ImageType="Method">
    <Signature>numQuestChoices = GetNumQuestChoices()</Signature>
    <Description>Returns the number of available quest rewards from which the player must choose one upon completing the quest presented by a questgiver. Only valid during the accept/decline or completion stages of a quest dialog (following the QUEST_DETAIL or QUEST_COMPLETE events); otherwise may return 0 or a value from the most recently displayed quest.</Description>
    <ReturnList Name="numQuestChoices">
      <Description>Number of available quest rewards from which the player must choose one upon completing the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestCurrencies" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumQuestItemDrops" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumQuestItems" Priority="0" ImageType="Method">
    <Signature>numRequiredItems = GetNumQuestItems()</Signature>
    <Description>Returns the number of different items required to complete the quest presented by a questgiver. Usable following the QUEST_PROGRESS event in which it is determined whether the player can complete the quest.</Description>
    <ReturnList Name="numRequiredItems">
      <Description>Number of different items required to complete the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestLeaderBoards" Priority="0" ImageType="Method">
    <Signature>numObjectives = GetNumQuestLeaderBoards([questIndex])</Signature>
    <Description>Returns the number of quest objectives for a quest in the player's quest log</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()); if omitted, defaults to the selected quest (number) </Description>
    </ArgumentList>
    <ReturnList Name="numObjectives">
      <Description>Number of trackable objectives for the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestLogChoices" Priority="0" ImageType="Method">
    <Signature>numChoices = GetNumQuestLogChoices()</Signature>
    <Description>Returns the number of available item reward choices for the selected quest in the quest log. This function refers to quest rewards for which the player is allowed to choose one item from among several; for items always awarded upon quest completion, see GetNumQuestLogRewards.</Description>
    <ReturnList Name="numChoices">
      <Description>Number of items among which a reward can be chosen for completing the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestLogEntries" Priority="0" ImageType="Method">
    <Signature>numEntries, numQuests = GetNumQuestLogEntries()</Signature>
    <Description>Returns the number of quests and headers in the quest log</Description>
    <ReturnList Name="numEntries">
      <Description>Total number of entries (quests and headers) (number) </Description>
    </ReturnList>
    <ReturnList Name="numQuests">
      <Description>Number of quests only (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestLogRewardCurrencies" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumQuestLogRewardFactions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumQuestLogRewards" Priority="0" ImageType="Method">
    <Signature>numRewards = GetNumQuestLogRewards()</Signature>
    <Description>Returns the number of item rewards for the selected quest in the quest log. This function refers to items always awarded upon quest completion; for quest rewards for which the player is allowed to choose one item from among several, see GetNumQuestLogChoices.</Description>
    <ReturnList Name="numRewards">
      <Description>Number of rewards for completing the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestPOIWorldEffects" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumQuestRewards" Priority="0" ImageType="Method">
    <Signature>numQuestRewards = GetNumQuestRewards()</Signature>
    <Description>Returns the number of different items always awarded upon completing the quest presented by a questgiver. Only valid during the accept/decline or completion stages of a quest dialog (following the QUEST_DETAIL or QUEST_COMPLETE events); otherwise may return 0 or a value from the most recently displayed quest.</Description>
    <ReturnList Name="numQuestRewards">
      <Description>Number of different items always awarded upon completing the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumQuestWatches" Priority="0" ImageType="Method">
    <Signature>numWatches = GetNumQuestWatches()</Signature>
    <Description>Returns the number of quests included in the objectives tracker</Description>
    <ReturnList Name="numWatches">
      <Description>Number of quests from the quest log currently marked for watching (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumRFDungeons" Priority="0" ImageType="Method">
    <Signature>numberOfRFDungeons = GetNumRFDungeons()</Signature>
    <Description>Returns the number of raid finder instances.</Description>
    <ReturnList Name="numberOfRFDungeons">
      <Description>number of raid finder instances (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumRaidProfiles" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumRandomDungeons" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumRandomScenarios" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumRecruitingGuilds" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumReforgeOptions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumRewardCurrencies" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumRoutes" Priority="0" ImageType="Method">
    <Signature>numHops = GetNumRoutes(index)</Signature>
    <Description>Returns the number of hops from the current location to another taxi node. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="numHops">
      <Description>Number of hops from the current location to the given node (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumSavedInstances" Priority="0" ImageType="Method">
    <Signature>savedInstances = GetNumSavedInstances()</Signature>
    <Description>Returns the number of instances to which the player is saved</Description>
    <ReturnList Name="savedInstances">
      <Description>Number of instances to which the player is saved (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumScenarios" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumShapeshiftForms" Priority="0" ImageType="Method">
    <Signature>numForms = GetNumShapeshiftForms()</Signature>
    <Description>Returns the number of abilities to be presented on the stance/shapeshift bar</Description>
    <ReturnList Name="numForms">
      <Description>Number of abilities to be presented on the stance/shapeshift bar (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumSoRRemaining" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumSockets" Priority="0" ImageType="Method">
    <Signature>numSockets = GetNumSockets()</Signature>
    <Description>Returns the number of sockets on the item currently being socketed. Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ReturnList Name="numSockets">
      <Description>Number of sockets on the item (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumSpecGroups" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumSpecializations" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumSpecializationsForClassID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumSpellTabs" Priority="0" ImageType="Method">
    <Signature>numTabs = GetNumSpellTabs()</Signature>
    <Description>Returns the number of tabs in the player's spellbook</Description>
    <ReturnList Name="numTabs">
      <Description>Number of spellbook tabs (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumStationeries" Priority="0" ImageType="Method">
    <Signature>numStationeries = GetNumStationeries()</Signature>
    <Description>Returns the number of available stationery types. Always returns 1; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.</Description>
    <ReturnList Name="numStationeries">
      <Description>Number of available stationery types (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumSubgroupMembers" Priority="0" ImageType="Method">
    <Signature>playerNumber = GetNumSubgroupMembers()</Signature>
    <Description>Return number of players in current party/raid group.</Description>
    <ReturnList Name="playerNumber">
      <Description>Number of players (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumTalents" Priority="0" ImageType="Method">
    <Signature>numTalents = GetNumTalents(tabIndex, inspect, pet)</Signature>
    <Description>Returns the number of options in a talent tab</Description>
    <ArgumentList Name="tabIndex">
      <Description>Index of a talent tab (between 1 and GetNumTalentTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="inspect">
      <Description>true to return information for the currently inspected unit; false to return information for the player (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="pet">
      <Description>true to return information for the player's pet; false to return information for the player (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="numTalents">
      <Description>Number of different talent options (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumTitles" Priority="0" ImageType="Method">
    <Signature>numTitles = GetNumTitles()</Signature>
    <Description>Returns the number of available player titles. Includes all titles, not just those earned by the player</Description>
    <ReturnList Name="numTitles">
      <Description>Number of available player titles (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumTrackedAchievements" Priority="0" ImageType="Method">
    <Signature>count = GetNumTrackedAchievements()</Signature>
    <Description>Returns the number of achievements flagged for display in the objectives tracker UI</Description>
    <ReturnList Name="count">
      <Description>Number of achievements flagged for tracking (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumTrackingTypes" Priority="0" ImageType="Method">
    <Signature>count = GetNumTrackingTypes()</Signature>
    <Description>Returns the number of available minimap object/unit tracking abilities</Description>
    <ReturnList Name="count">
      <Description>Number of available tracking types (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumTradeSkills" Priority="0" ImageType="Method">
    <Signature>numSkills = GetNumTradeSkills()</Signature>
    <Description>Returns the number of entries in the trade skill listing. Entries include both group headers and individual trade skill recipes. Reflects the list as it should currently be displayed, not necessarily the complete list -- if headers are collapsed or a filter is enabled, a smaller number will be returned.
Returns 0 if a trade skill is not "open".</Description>
    <ReturnList Name="numSkills">
      <Description>Number of headers and recipes to display in the trade skill list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumTrainerServices" Priority="0" ImageType="Method">
    <Signature>numServices = GetNumTrainerServices()</Signature>
    <Description>Returns the number of entries in the trainer service listing. Entries include both group headers and individual trainer services (i.e spells or recipes to be purchased). Reflects the list as it should currently be displayed, not necessarily the complete list -- if headers are collapsed or a filter is enabled, a smaller number will be returned.
Returns 0 if not interacting with a trainer.</Description>
    <ReturnList Name="numServices">
      <Description>Number of headers and services to display in the trainer service listing (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumUnspentTalents" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumVoiceSessionMembersBySessionID" Priority="0" ImageType="Method">
    <Signature>numMembers = GetNumVoiceSessionMembersBySessionID(sessionId)</Signature>
    <Description>Returns the number of members in a voice channel</Description>
    <ArgumentList Name="sessionId">
      <Description>Index of a voice session (between 1 and GetNumVoiceSessions()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="numMembers">
      <Description>Number of members in the voice channel (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumVoiceSessions" Priority="0" ImageType="Method">
    <Signature>count = GetNumVoiceSessions()</Signature>
    <Description>Returns the number of available voice channels. Returns 0 if voice chat is disabled.</Description>
    <ReturnList Name="count">
      <Description>Number of available voice sessions (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumVoidTransferDeposit" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumVoidTransferWithdrawal" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumWarGameTypes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumWhoResults" Priority="0" ImageType="Method">
    <Signature>numResults, totalCount = GetNumWhoResults()</Signature>
    <Description>Returns the number of results from a Who system query</Description>
    <ReturnList Name="numResults">
      <Description>Number of results returned (number) </Description>
    </ReturnList>
    <ReturnList Name="totalCount">
      <Description>Number of results to display (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumWorldPVPAreas" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetNumWorldStateUI" Priority="0" ImageType="Method">
    <Signature>numUI = GetNumWorldStateUI()</Signature>
    <Description>Returns the number of world state UI elements. World State UI elements include PvP, instance, and quest objective information (displayed at the top center of the screen in the default UI) as well as more specific information for "control point" style PvP objectives. Examples: the Horde/Alliance score in Arathi Basin, the tower status and capture progress bars in Hellfire Peninsula, the progress text in the Black Morass and Violet Hold instances, and the event status text for quests The Light of Dawn and The Battle For The Undercity.</Description>
    <ReturnList Name="numUI">
      <Description>Returns the number of world state elements (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetNumberOfDetailTiles" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetOSLocale" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetObjectiveText" Priority="0" ImageType="Method">
    <Signature>questObjective = GetObjectiveText()</Signature>
    <Description>Returns a summary of objectives for the quest offered by a questgiver. Only valid when the questgiver UI is showing the accept/decline stage of a quest dialog (between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.</Description>
    <ReturnList Name="questObjective">
      <Description>The objective text for the currently displayed quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetOptOutOfLoot" Priority="0" ImageType="Method">
    <Signature>isOptOut = GetOptOutOfLoot()</Signature>
    <Description>Returns whether the player has opted out of loot rolls. When opting out, no prompt will be shown for loot which ordinarily would prompt the player to roll (need/greed) or pass; the loot rolling process will continue for other group members as if the player had chosen to pass on every roll.</Description>
    <ReturnList Name="isOptOut">
      <Description>1 if the has opted out of loot rolls; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetOutdoorPVPWaitTime" Priority="0" ImageType="Method">
    <Signature>waitTime = GetOutdoorPVPWaitTime()</Signature>
    <Description>Returns the world PvP wait time for the currently selected zone, nil otherwise. Authors looking for information regarding specific world PvP zones should consider using GetWorldPVPAreaInfo() instead.</Description>
    <ReturnList Name="waitTime">
      <Description>The number of seconds until the next world PvP battle on the currently selected map starts (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetOverrideAPBySpellPower" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetOverrideBarIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetOverrideBarSkin" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetOverrideSpellPowerByAP" Priority="0" ImageType="Method">
    <Signature>spellPower = GetOverrideSpellPowerByAP()</Signature>
    <Description>Returns how much spell power is returned by attack power (Shaman). Currently valid for Enhancement Shamans only.</Description>
    <ReturnList Name="spellPower">
      <Description>The amount of spell power returned by attack power, or nil (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetOwnerAuctionItems" Priority="0" ImageType="Method">
    <Signature>GetOwnerAuctionItems()</Signature>
    <Description>Requests data from the server for the list of auctions created by the player. The AUCTION_OWNED_LIST_UPDATE event fires if new data is available; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.</Description>
  </WowApi>
  <WowApi Name="GetPOITextureCoords" Priority="0" ImageType="Method">
    <Signature>x1, x2, y1, y2 = GetPOITextureCoords(textureIndex)</Signature>
    <Description>Return texture coordinates of POI icon. Coordinates usable with Interface\Minimap\POIIcons texture.</Description>
    <ArgumentList Name="textureIndex">
      <Description>POI index number (number) </Description>
    </ArgumentList>
    <ReturnList Name="x1">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="x2">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="y1">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="y2">
      <Description>(number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPDesired" Priority="0" ImageType="Method">
    <Signature>isPVPDesired = GetPVPDesired()</Signature>
    <Description>Returns whether the player has manually enabled PvP status. Only indicates whether the player has manually and directly enabled his PvP flag (e.g. by typing "/pvp" or using the default UI's menu when right-clicking the player portrait); returns 0 if the player only became PvP flagged by attacking an enemy player, entering an enemy zone, etc.</Description>
    <ReturnList Name="isPVPDesired">
      <Description>1 if the PVP flag was toggled on by the player manually; otherwise 0 (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPLifetimeStats" Priority="0" ImageType="Method">
    <Signature>hk, highestRank = GetPVPLifetimeStats()</Signature>
    <Description>Returns the player's lifetime total of honorable kills and highest rank achieved. Highest rank achieved applies only to the older PvP rewards system that was abandoned with the WoW 2.0 patch, but is still accurate for players who participated in it.</Description>
    <ReturnList Name="hk">
      <Description>Number of honorable kills the player has scored (number) </Description>
    </ReturnList>
    <ReturnList Name="highestRank">
      <Description>Highest rank the player ever achieved in the pre-2.0 PvP rewards system (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPRankInfo" Priority="0" ImageType="Method">
    <Signature>rankName, rankNumber = GetPVPRankInfo(index [, "unit"])</Signature>
    <Description>Returns information about a given PvP rank index. These ranks are no longer in use, as they were part of the older PvP rewards system that was abandoned with the WoW 2.0 patch.</Description>
    <ArgumentList Name="index">
      <Description>Index of a rank (begins at 1, corresponding to a never-used "Pariah" rank; actual ranks start at 5) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to use as basis for the rank name (i.e. to return Horde rank names for Horde units and Alliance rank names for Alliance units); if omitted, uses the player's faction (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="rankName">
      <Description>Name of the rank (string) </Description>
    </ReturnList>
    <ReturnList Name="rankNumber">
      <Description>Index of the rank relative to unranked status (positive values for ranks earned through honorable kills, negative values for the unused dishonorable ranks) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPRankProgress" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPVPRewards" Priority="0" ImageType="Method">
    <Signature>pointsThisWeek, maxPointsThisWeek, tier2Quantity, tier2Limit, tier1Quantity, tier1Limit = GetPVPRewards()</Signature>
    <Description>Returns information about Conquest Point cap.</Description>
    <ReturnList Name="pointsThisWeek">
      <Description>The sum of Conquest Points gained this week (number) </Description>
    </ReturnList>
    <ReturnList Name="maxPointsThisWeek">
      <Description>The maximum achievable number of Conquest Points this week (number) </Description>
    </ReturnList>
    <ReturnList Name="tier2Quantity">
      <Description>Amount of Conquest Points gained from Rated Battlegrounds this week (number) </Description>
    </ReturnList>
    <ReturnList Name="tier2Limit">
      <Description>The maximum achievable number of Conquest Points from Rated Battlegrounds this week (number) </Description>
    </ReturnList>
    <ReturnList Name="tier1Quantity">
      <Description>Amount of Conquest Points gained from Arena Matches this week (string) </Description>
    </ReturnList>
    <ReturnList Name="tier1Limit">
      <Description>The maximum achievable number of Conquest Points from Arena Matches this week (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPSessionStats" Priority="0" ImageType="Method">
    <Signature>honorKills, honorPoints = GetPVPSessionStats()</Signature>
    <Description>Returns the number of kills and honor points scored by the player since logging in</Description>
    <ReturnList Name="honorKills">
      <Description>Number of honorable kills scored (number) </Description>
    </ReturnList>
    <ReturnList Name="honorPoints">
      <Description>Amount of honor currency earned (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPTimer" Priority="0" ImageType="Method">
    <Signature>timer = GetPVPTimer()</Signature>
    <Description>Returns the amount of time until the player's PVP flag expires. Returns 300000 or higher if the player's PvP flag is manually enabled or if the player is in a PvP or enemy zone.</Description>
    <ReturnList Name="timer">
      <Description>Milliseconds remaining until the player's PvP flag expires (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPVPYesterdayStats" Priority="0" ImageType="Method">
    <Signature>honorKills, honorPoints = GetPVPYesterdayStats()</Signature>
    <Description>Returns the number of kills and honor points scored by the player on the previous day</Description>
    <ReturnList Name="honorKills">
      <Description>Number of honorable kills scored (number) </Description>
    </ReturnList>
    <ReturnList Name="honorPoints">
      <Description>Amount of honor currency earned (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPackageInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetParryChance" Priority="0" ImageType="Method">
    <Signature>chance = GetParryChance()</Signature>
    <Description>Returns the player's parry chance</Description>
    <ReturnList Name="chance">
      <Description>The player's percentage chance to parry melee attacks (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPartyAssignment" Priority="0" ImageType="Method">
    <Signature>isAssigned = GetPartyAssignment("assignment", "unit") or GetPartyAssignment("assignment", "name" [, exactMatch])</Signature>
    <Description>Returns whether a party/raid member is assigned a specific group role</Description>
    <ArgumentList Name="assignment">
      <Description>A group role assignment (string)
MAINASSIST - Return whether the unit is assigned the main assist role
MAINTANK - Return whether the unit is assigned the main tank role</Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit in the player's party or raid (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit in the player's party or raid (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="isAssigned">
      <Description>1 if the unit is assigned the specified role; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPartyLFGBackfillInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPartyLFGID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPersonalRatedArenaInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPersonalRatedBGInfo" Priority="0" ImageType="Method">
    <Signature>personalBGRating, ratedBGreward, pointsThisWeek, maxPointsThisWeek, unknown, unknown, weeklyWins, weeklyPlayed, unknown, unknown = GetPersonalRatedBGInfo()</Signature>
    <Description>Return this this week player Rated Battleground statistics.</Description>
    <ReturnList Name="personalBGRating">
      <Description>Personal Rated Battleground rating (number) </Description>
    </ReturnList>
    <ReturnList Name="ratedBGreward">
      <Description>Number of Conquest Points that will be gained by next Rated Battleground win (number) </Description>
    </ReturnList>
    <ReturnList Name="pointsThisWeek">
      <Description>Number of Conquest Points gained on Rated Battlegrounds this week (number) </Description>
    </ReturnList>
    <ReturnList Name="maxPointsThisWeek">
      <Description>Rated Battleground Conquest Points cap for this week (number) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(unknown) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(unknown) </Description>
    </ReturnList>
    <ReturnList Name="weeklyWins">
      <Description>Number of won Rated Battlegrounds this week (number) </Description>
    </ReturnList>
    <ReturnList Name="weeklyPlayed">
      <Description>Number of played Rated Battlegrounds this week (number) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(unknown) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>(unknown) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetActionCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetPetActionCooldown(index)</Signature>
    <Description>Returns cooldown information about a given pet action slot</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the action is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the action is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the action is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetActionInfo" Priority="0" ImageType="Method">
    <Signature>name, subtext, texture, isToken, isActive, autoCastAllowed, autoCastEnabled = GetPetActionInfo(index)</Signature>
    <Description>Returns information about a pet action</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Localized name of the action, or a token which can be used to get the localized name of a standard action (string) </Description>
    </ReturnList>
    <ReturnList Name="subtext">
      <Description>Secondary text for the action (generally a spell rank; e.g. "Rank 8") (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the action, or a token which can be used to get the texture path of a standard action (string) </Description>
    </ReturnList>
    <ReturnList Name="isToken">
      <Description>1 if the returned name and texture are tokens for standard actions, which should be used to look up actual values (e.g. PET_ACTION_ATTACK, PET_ATTACK_TEXTURE); nil if name and texture can be displayed as-is (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isActive">
      <Description>1 if the action is currently active; otherwise nil. (Indicates which state is chosen for the follow/stay and aggressive/defensive/passive switches.) (1nil) </Description>
    </ReturnList>
    <ReturnList Name="autoCastAllowed">
      <Description>1 if automatic casting is allowed for the action; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="autoCastEnabled">
      <Description>1 if automatic casting is currently turned on for the action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetActionSlotUsable" Priority="0" ImageType="Method">
    <Signature>usable = GetPetActionSlotUsable(index)</Signature>
    <Description>Returns whether a pet action can be used. Used in the default UI to show pet actions as grayed out when the pet cannot be commanded to perform them (e.g. when the player or pet is stunned).</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="usable">
      <Description>1 if the pet action is currently available; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetActionsUsable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPetExperience" Priority="0" ImageType="Method">
    <Signature>currXP, nextXP = GetPetExperience()</Signature>
    <Description>Returns information about experience points for the player's pet</Description>
    <ReturnList Name="currXP">
      <Description>The pet's current amount of experience points (number) </Description>
    </ReturnList>
    <ReturnList Name="nextXP">
      <Description>Total amount of experience points required for the pet to gain a level (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetFoodTypes" Priority="0" ImageType="Method">
    <Signature>... = GetPetFoodTypes()</Signature>
    <Description>Returns a list of the food types the player's pet will eat</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of a food type the pet will eat (list)
Bread - Baked goods
Cheese - Cheese products
Fish - Raw and cooked fish
Fruit - Fruits
Fungus - Mushrooms, lichens, and similar
Meat - Raw and cooked meat</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetIcon" Priority="0" ImageType="Method">
    <Signature>texture = GetPetIcon()</Signature>
    <Description>Returns an icon representing the current pet. Used in the default Pet Stables and Talent UIs for hunter pets; returns nil for other pets.</Description>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the pet (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetMeleeHaste" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPetSpellBonusDamage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPetTalentTree" Priority="0" ImageType="Method">
    <Signature>talent = GetPetTalentTree()</Signature>
    <Description>Returns the name of the talent tree used by the player's current pet. Hunter pets use one of three different talent trees according to pet type. Returns nil if the player does not have a pet or the player's current pet does not use talents (i.e. warlock pets, quest pets, etc.)</Description>
    <ReturnList Name="talent">
      <Description>Localized name of the pet's talent tree (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetTimeRemaining" Priority="0" ImageType="Method">
    <Signature>petTimeRemaining = GetPetTimeRemaining()</Signature>
    <Description>Returns the time remaining before a temporary pet is automatically dismissed. Temporary pets include priests' Shadowfriend, mages' Water Elemental, and various quest-related pets.</Description>
    <ReturnList Name="petTimeRemaining">
      <Description>Amount of time remaining until the temporary pet is automatically dismissed (in seconds), or nil if the player does not have a temporary pet (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetitionInfo" Priority="0" ImageType="Method">
    <Signature>petitionType, title, bodyText, maxSignatures, originatorName, isOriginator, minSignatures = GetPetitionInfo()</Signature>
    <Description>Returns information about the currently open petition</Description>
    <ReturnList Name="petitionType">
      <Description>Type of the petition (string)
arena - An arena team charter
guild - A guild charter</Description>
    </ReturnList>
    <ReturnList Name="title">
      <Description>Title of the petition (string) </Description>
    </ReturnList>
    <ReturnList Name="bodyText">
      <Description>Body text of the petition (string) </Description>
    </ReturnList>
    <ReturnList Name="maxSignatures">
      <Description>Maximum number of signatures allowed (number) </Description>
    </ReturnList>
    <ReturnList Name="originatorName">
      <Description>Name of the character who initially purchased the charter (string) </Description>
    </ReturnList>
    <ReturnList Name="isOriginator">
      <Description>1 if the player is the petition's originator; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="minSignatures">
      <Description>Minimum number of signatures required to establish the charter (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPetitionNameInfo" Priority="0" ImageType="Method">
    <Signature>name = GetPetitionNameInfo(index)</Signature>
    <Description>Returns the name of a character who has signed the currently offered petition</Description>
    <ArgumentList Name="index">
      <Description>Index of a signature slot on the petition (between 1 and minSignatures, where minSignatures = select(7,GetPetitionInfo())) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the signatory character, or nil if the slot has not yet been signed (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPlayerFacing" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPlayerInfoByGUID" Priority="0" ImageType="Method">
    <Signature>class, classFilename, race, raceFilename, sex, name, realm = GetPlayerInfoByGUID("guid")</Signature>
    <Description>Returns information about a player character identified by globally unique identifier. Returns nil if given the GUID of a non-player unit. The leading 0x may be omitted.</Description>
    <ArgumentList Name="guid">
      <Description>Globally unique identifier of a player unit (string, guid) </Description>
    </ArgumentList>
    <ReturnList Name="class">
      <Description>Localized name of the unit's class (string) </Description>
    </ReturnList>
    <ReturnList Name="classFilename">
      <Description>Non-localized token identifying the unit's class (string) </Description>
    </ReturnList>
    <ReturnList Name="race">
      <Description>Localized name of the unit's race (string) </Description>
    </ReturnList>
    <ReturnList Name="raceFilename">
      <Description>Non-localized token identifying the unit's race (string) </Description>
    </ReturnList>
    <ReturnList Name="sex">
      <Description>Number identifying the unit's gender (number)
1 - Neuter / Unknown
2 - Male
3 - Female</Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Unit's name (string) </Description>
    </ReturnList>
    <ReturnList Name="realm">
      <Description>Unit's realm (empty string if from the same realm) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPlayerMapPosition" Priority="0" ImageType="Method">
    <Signature>unitX, unitY = GetPlayerMapPosition("unit")</Signature>
    <Description>Returns the position of a unit in the player's party or raid on the world map. Returns 0,0 if the unit's location is not visible on the current world map.</Description>
    <ArgumentList Name="unit">
      <Description>A unit in the player's party or raid (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="unitX">
      <Description>Horizontal position of the unit relative to the zone map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="unitY">
      <Description>Vertical position of the unit relative to the zone map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPlayerTradeCurrency" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPlayerTradeMoney" Priority="0" ImageType="Method">
    <Signature>amount = GetPlayerTradeMoney()</Signature>
    <Description>Returns the amount of money offered for trade by the player</Description>
    <ReturnList Name="amount">
      <Description>Amount of money offered for trade by the player (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPossessInfo" Priority="0" ImageType="Method">
    <Signature>texture, name = GetPossessInfo(index)</Signature>
    <Description>Returns information about special actions available while the player possesses another unit. Used in the default UI to show additional special actions (e.g. canceling possession) while the player possesses another unit through an ability such as Eyes of the Beast or Mind Control.
Does not apply to actions (spells) belonging to the possessed unit; those are regular actions (see GetActionInfo()) whose actionIDs begin at ((NUM_ACTIONBAR_PAGES - 1 + GetBonusBarOffset()) * NUM_ACTIONBAR_BUTTONS + 1).</Description>
    <ArgumentList Name="index">
      <Description>Index of a possession bar action (between 1 and NUM_POSSESS_SLOTS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the action (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the spell in the queried possess bar slot. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPowerRegen" Priority="0" ImageType="Method">
    <Signature>inactiveRegen, activeRegen = GetPowerRegen()</Signature>
    <Description>Returns information about the player's mana/energy/etc regeneration rate. Contexts for inactiveRegen and activeRegen vary by power type.
If the player (currently) uses mana, activeRegen refers to mana regeneration while casting (within five seconds of casting a spell) and inactiveRegen refers to mana regeneration while not casting (more than five seconds after casting a spell). For other power types, activeRegen refers to regeneration while in combat and inactiveRegen to regeneration outside of combat.
Note that values returned can be negative: e.g. for rage and runic power users, inactiveRegen describes the rate of power decay while not in combat.</Description>
    <ReturnList Name="inactiveRegen">
      <Description>Power change per second while inactive (number) </Description>
    </ReturnList>
    <ReturnList Name="activeRegen">
      <Description>Power change per second while active (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPrevCompleatedTutorial" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPreviousAchievement" Priority="0" ImageType="Method">
    <Signature>previousID = GetPreviousAchievement(id)</Signature>
    <Description>Returns the previous achievement for an achievement which is part of a series</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ReturnList Name="previousID">
      <Description>If the given achievement is part of a series and not the first in its series, the ID of the previous achievement in the series; otherwise nil (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPreviousArenaSeason" Priority="0" ImageType="Method">
    <Signature>season = GetPreviousArenaSeason()</Signature>
    <Description>Returns a number identifying the previous arena season. New arena seasons begin every few months, resetting team rankings and providing new rewards.</Description>
    <ReturnList Name="season">
      <Description>Number identifying the previous arena season (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetProfessionInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, rank, maxRank, numSpells, spelloffset, skillLine, rankModifier, specializationIndex, specializationOffset = GetProfessionInfo(index)</Signature>
    <Description>Returns details on a profession from its index including name, icon, and skill level</Description>
    <ArgumentList Name="index">
      <Description>The index of the profession (can be found with GetProfessions()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Localized name of the skill (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to the icon texture of the skill (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>The current skill level. This does not change when rankModifier is greater than 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="maxRank">
      <Description>The current skill cap (number) </Description>
    </ReturnList>
    <ReturnList Name="numSpells">
      <Description>The number of abilities/icons listed. These are the icons you put on your action bars (number) </Description>
    </ReturnList>
    <ReturnList Name="spelloffset">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="skillLine">
      <Description>The constant value of the skill (e.g. Archeology is 794, Cooking is 185). These constants can be found in the enum that includes other constants, such as talent spec, race, language, pet type, and mount type (number) </Description>
    </ReturnList>
    <ReturnList Name="rankModifier">
      <Description>Additional modifiers to your profession levels (e.g. Lures for Fishing). (number) </Description>
    </ReturnList>
    <ReturnList Name="specializationIndex">
      <Description>Index for specialization (e.g. Gnomish Engineering) (number) </Description>
    </ReturnList>
    <ReturnList Name="specializationOffset">
      <Description>Offset for specialization (e.g. Gnomish Engineering) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetProfessions" Priority="0" ImageType="Method">
    <Signature>prof1, prof2, archaeology, fishing, cooking, firstAid = GetProfessions()</Signature>
    <Description>Returns indices of all of the current character's professions. The indices returned can be passed into the GetProfessionInfo() function. The indices are not fixed and can change when a character learns or unlearns a profession. If you do not have one of the skills the value returned will be nil.</Description>
    <ReturnList Name="prof1">
      <Description>The index of the first profession; nil if first profession is missing (number) </Description>
    </ReturnList>
    <ReturnList Name="prof2">
      <Description>The index of the second profession; nil if second profession is missing (number) </Description>
    </ReturnList>
    <ReturnList Name="archaeology">
      <Description>The index of Archeology; nil if Archeology is missing (number) </Description>
    </ReturnList>
    <ReturnList Name="fishing">
      <Description>The index of Fishing; nil if Fishing is missing (number) </Description>
    </ReturnList>
    <ReturnList Name="cooking">
      <Description>The index of Cooking; nil if Cooking is missing (number) </Description>
    </ReturnList>
    <ReturnList Name="firstAid">
      <Description>The index of First Aid; nil if First Aid is missing (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetProgressText" Priority="0" ImageType="Method">
    <Signature>text = GetProgressText()</Signature>
    <Description>Returns the quest progress text presented by a questgiver. Only valid when the questgiver UI is showing the progress stage of a quest dialog (between the QUEST_PROGRESS and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.</Description>
    <ReturnList Name="text">
      <Description>Progress text for the quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetPromotionRank" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPvpPowerDamage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetPvpPowerHealing" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestBackgroundMaterial" Priority="0" ImageType="Method">
    <Signature>material = GetQuestBackgroundMaterial()</Signature>
    <Description>Returns background display style information for a questgiver dialog. The value returned can be used to look up background textures and text colors for display:
Background textures displayed in the default UI can be found by prepending "Interface\\ItemTextFrame\\ItemText-" and appending "-TopLeft", "-TopRight", "-BotLeft", "-BotRight" to the material string (e.g. "Interface\\ItemTextFrame\\ItemText-Stone-TopLeft").
Colors for body and title text can be found by calling GetMaterialTextColors(material) (a Lua function implemented in the Blizzard UI).
In cases where this function returns nil, the default UI uses the colors and textures for "Parchment".</Description>
    <ReturnList Name="material">
      <Description>String identifying a display style for the questgiver dialog, or nil for the default style (string)
Bronze - Colored metallic background
Marble - Light stone background
Parchment - Yellowed parchment background (default)
Silver - Gray metallic background
Stone - Dark stone background</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestCurrencyInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, amount = GetQuestCurrencyInfo("type", index)</Signature>
    <Description>Returns information about currency rewarded/required for quest completion</Description>
    <ArgumentList Name="type">
      <Description>Quest currency type (string)
required - Currency required for quest completion
reward - Currency rewarded for quest completion</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an entry in the quest currency list (between 1 and GetNumQuestCurrencies() or GetNumRewardCurrencies()) (integer) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Localized string name of the currency (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Texture file name of the currency (string) </Description>
    </ReturnList>
    <ReturnList Name="amount">
      <Description>Amount of currency (integer) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestDifficultyColor" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestGreenRange" Priority="0" ImageType="Method">
    <Signature>range = GetQuestGreenRange()</Signature>
    <Description>Returns the level range in which a quest below the player's level still rewards XP. If a quest's level is up to range levels below the player's level, the quest is considered easy but still rewards experience points upon completion; these quests are colored green in the default UI's quest log. (Quests more than range levels below the player's are colored gray in the default UI and reward no XP.)</Description>
    <ReturnList Name="range">
      <Description>Maximum difference between player level and a lower quest level for a quest to reward experience (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestID" Priority="0" ImageType="Method">
    <Signature>questID = GetQuestID()</Signature>
    <Description>Returns the internal ID of a quest featured in the currently active NPC dialogue (available after a QUEST_DETAIL event). Returns 0 if no quest dialogue happened in the current session yet.
Warning: returns the last offered quest ID - it will keep returning the last value even out of any QUEST_DETAIL dialogue context, until a new quest is mentioned.</Description>
    <ReturnList Name="questID">
      <Description>Internal ID of the offered quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestIndexForTimer" Priority="0" ImageType="Method">
    <Signature>questIndex = GetQuestIndexForTimer(index)</Signature>
    <Description>Returns the quest log index of a timed quest's timer</Description>
    <ArgumentList Name="index">
      <Description>Index of a timer (in the list returned by GetQuestTimers()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="questIndex">
      <Description>Index of the quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestIndexForWatch" Priority="0" ImageType="Method">
    <Signature>questIndex = GetQuestIndexForWatch(index)</Signature>
    <Description>Returns the quest log index of a quest in the objectives tracker</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest in the list of quests on the objectives tracker (between 1 and GetNumQuestWatches()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="questIndex">
      <Description>Index of the quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, numItems, quality, isUsable = GetQuestItemInfo("type", index)</Signature>
    <Description>Returns information about items in a questgiver dialog. Only valid when the questgiver UI is showing the accept/decline, progress, or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED, QUEST_PROGRESS and QUEST_FINISHED, or QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return empty values or those from the most recently displayed quest.</Description>
    <ArgumentList Name="type">
      <Description>Which of the possible sets of items to query (string)
choice - Items from which the player may choose a reward
required - Items required to complete the quest
reward - Items given as reward for the quest</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Which item to query (from 1 to GetNumQuestChoices(), GetNumQuestItems(), or GetNumQuestRewards(), depending on the value of the itemType argument) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>The name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to a texture for the item's icon (string) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of the item required or rewarded (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>The quality of the item (number)
0 - Poor
1 - Common
2 - Uncommon
3 - Rare
4 - Epic
5 - Legendary
6 - Artifact</Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player can currently use/equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetQuestItemLink("itemType", index)</Signature>
    <Description>Returns a hyperlink for an item in a questgiver dialog. Only valid when the questgiver UI is showing the accept/decline, progress, or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED, QUEST_PROGRESS and QUEST_FINISHED, or QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.</Description>
    <ArgumentList Name="itemType">
      <Description>Token identifying one of the possible sets of items (string)
choice - Items from which the player may choose a reward
required - Items required to complete the quest
reward - Items given as reward for the quest</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an item in the set (between 1 and GetNumQuestChoices(), GetNumQuestItems(), or GetNumQuestRewards(), according to itemType) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLink" Priority="0" ImageType="Method">
    <Signature>link = GetQuestLink(questIndex)</Signature>
    <Description>Returns a hyperlink for an entry in the player's quest log</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the quest (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogChoiceInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, numItems, quality, isUsable = GetQuestLogChoiceInfo(index)</Signature>
    <Description>Returns information about available item rewards for the selected quest in the quest log. This function refers to quest rewards for which the player is allowed to choose one item from among several; for items always awarded upon quest completion, see GetQuestLogRewardInfo.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest reward choice (between 1 and GetNumQuestLogChoices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of items in the stack (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogCompletionText" Priority="0" ImageType="Method">
    <Signature>completionText = GetQuestLogCompletionText()</Signature>
    <Description>Returns the completion text for the selected quest in the quest log. Completion text usually includes instructions on to whom and where to hand in the quest once it has been completed. Example: "Return to William Pestle at Goldshire in Elwynn Forest."</Description>
    <ReturnList Name="completionText">
      <Description>Completion instructions for the quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogCriteriaSpell" Priority="0" ImageType="Method">
    <Signature>spellID, iconTexture, isLearned = GetQuestLogCriteriaSpell([index])</Signature>
    <Description>Returns the spell required by a quest, if any. It is currently known to return values for the learn spell quests.</Description>
    <ArgumentList Name="index">
      <Description>The index of the quest in the quest log. The currently selected quest if omitted. (number) </Description>
    </ArgumentList>
    <ReturnList Name="spellID">
      <Description>spellID of the spell criteria. (number, spellID) </Description>
    </ReturnList>
    <ReturnList Name="iconTexture">
      <Description>The path to the icon texture of the spell. (string) </Description>
    </ReturnList>
    <ReturnList Name="isLearned">
      <Description>Whether or not the spell has been learned. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogGroupNum" Priority="0" ImageType="Method">
    <Signature>suggestedGroup = GetQuestLogGroupNum()</Signature>
    <Description>Returns the suggested group size for the selected quest in the quest log</Description>
    <ReturnList Name="suggestedGroup">
      <Description>Recommended number of players in a group attempting the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogIndexByID" Priority="0" ImageType="Method">
    <Signature>index = GetQuestLogIndexByID(id)</Signature>
    <Description>Returns the index at which a particular quest ID can be found in the log.</Description>
    <ArgumentList Name="id">
      <Description>A quest's internal ID number (number) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of the quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogIsAutoComplete" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestLogItemDrop" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestLogItemLink" Priority="0" ImageType="Method">
    <Signature>GetQuestLogItemLink("itemType", index)</Signature>
    <Description>Returns a hyperlink for an item related to the selected quest in the quest log</Description>
    <ArgumentList Name="itemType">
      <Description>Token identifying one of the possible sets of items (string)
choice - Items from which the player may choose a reward
reward - Items always given as reward for the quest</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an item in the set (between 1 and GetNumQuestLogChoices() or GetNumQuestLogRewards(), according to itemType) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetQuestLogLeaderBoard" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestLogPortraitGiver" Priority="0" ImageType="Method">
    <Signature>questPortrait, questPortraitText, questPortraitName = GetQuestLogPortraitGiver()</Signature>
    <Description>Returns quest-related NPC info for portrait display. Queries the currently selected quest in the quest log.</Description>
    <ReturnList Name="questPortrait">
      <Description>Portrait ID of the quest-related NPC, as used by PlayerModel:SetDisplayInfo(questPortrait) (number) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitText">
      <Description>NPC description (string) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitName">
      <Description>NPC name (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogPortraitTurnIn" Priority="0" ImageType="Method">
    <Signature>questPortrait, questPortraitText, questPortraitName = GetQuestLogPortraitTurnIn()</Signature>
    <Description>Returns quest-related NPC info for portrait display</Description>
    <ReturnList Name="questPortrait">
      <Description>Portrait ID of the quest-related NPC, as used by PlayerModel:SetDisplayInfo(questPortrait) (number) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitText">
      <Description>NPC description (string) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitName">
      <Description>NPC name (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogPushable" Priority="0" ImageType="Method">
    <Signature>shareable = GetQuestLogPushable()</Signature>
    <Description>Return whether the selected quest in the quest log can be shared to party members</Description>
    <ReturnList Name="shareable">
      <Description>1 if the quest is shareable; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogQuestText" Priority="0" ImageType="Method">
    <Signature>questDescription, questObjectives = GetQuestLogQuestText()</Signature>
    <Description>Returns the description and objective text for the selected quest in the quest log</Description>
    <ReturnList Name="questDescription">
      <Description>Full description of the quest (as seen in the NPC dialog when accepting the quest) (string) </Description>
    </ReturnList>
    <ReturnList Name="questObjectives">
      <Description>A (generally) brief summary of quest objectives (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogQuestType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestLogRequiredMoney" Priority="0" ImageType="Method">
    <Signature>money = GetQuestLogRequiredMoney()</Signature>
    <Description>Returns the amount of money required for the selected quest in the quest log</Description>
    <ReturnList Name="money">
      <Description>The amount of money required to complete the quest (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardCurrencyInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestLogRewardFactionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestLogRewardInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, numItems, quality, isUsable = GetQuestLogRewardInfo(index)</Signature>
    <Description>Returns information about item rewards for the selected quest in the quest log. This function refers to items always awarded upon quest completion; for quest rewards for which the player is allowed to choose one item from among several, see GetQuestLogChoiceInfo.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest reward (between 1 and GetNumQuestLogRewards()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of items in the stack (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardMoney" Priority="0" ImageType="Method">
    <Signature>money = GetQuestLogRewardMoney()</Signature>
    <Description>Returns the money reward for the selected quest in the quest log</Description>
    <ReturnList Name="money">
      <Description>Amount of money rewarded for completing the quest (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardSkillPoints" Priority="0" ImageType="Method">
    <Signature>skillName, icon, points = GetQuestLogRewardSkillPoints()</Signature>
    <Description>Returns skill point reward info for the selected quest in the quest log</Description>
    <ReturnList Name="skillName">
      <Description>Localized name of the skill that will receive the points (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to the icon of the skill (string) </Description>
    </ReturnList>
    <ReturnList Name="points">
      <Description>Amount of skill points that will be rewarded (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardSpell" Priority="0" ImageType="Method">
    <Signature>texture, name, isTradeskillSpell, isSpellLearned = GetQuestLogRewardSpell()</Signature>
    <Description>Returns information about the spell reward for the selected quest in the quest log. If both isTradeskillSpell and isSpellLearned are nil, the reward is a spell cast upon the player.</Description>
    <ReturnList Name="texture">
      <Description>Path to the spell's icon texture (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="isTradeskillSpell">
      <Description>1 if the spell is a tradeskill recipe; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isSpellLearned">
      <Description>1 if the reward teaches the player a new spell; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardTalents" Priority="0" ImageType="Method">
    <Signature>talents = GetQuestLogRewardTalents()</Signature>
    <Description>Returns the talent point reward for the selected quest in the quest log. Returns 0 for quests which do not award talent points.
(Very few quests award talent points; currently this functionality is only used within the Death Knight starting experience.)</Description>
    <ReturnList Name="talents">
      <Description>Number of talent points to be awarded upon completing the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardTitle" Priority="0" ImageType="Method">
    <Signature>title = GetQuestLogRewardTitle()</Signature>
    <Description>Returns the title reward for the selected quest in the quest log. Returns nil if no title is awarded or if no quest is selected.</Description>
    <ReturnList Name="title">
      <Description>Title to be awarded to the player upon completing the quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogRewardXP" Priority="0" ImageType="Method">
    <Signature>experience = GetQuestLogRewardXP()</Signature>
    <Description>Returns the experience reward at the player's level for the selected quest in the quest log</Description>
    <ReturnList Name="experience">
      <Description>Amount of experience rewarded for completing the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogSelection" Priority="0" ImageType="Method">
    <Signature>questIndex = GetQuestLogSelection()</Signature>
    <Description>Returns the index of the selected quest in the quest log</Description>
    <ReturnList Name="questIndex">
      <Description>Index of the selected quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogSpecialItemCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetQuestLogSpecialItemCooldown(questIndex)</Signature>
    <Description>Returns cooldown information about an item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the item is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the item is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogSpecialItemInfo" Priority="0" ImageType="Method">
    <Signature>link, icon, charges = GetQuestLogSpecialItemInfo(questIndex)</Signature>
    <Description>Returns information about a usable item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="GetQuestLogSpellLink" Priority="0" ImageType="Method">
    <Signature>link = GetQuestLogSpellLink()</Signature>
    <Description>Returns a hyperlink for a spell in the selected quest in the quest log</Description>
    <ReturnList Name="link">
      <Description>A hyperlink for the spell or tradeskill recipe (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogTimeLeft" Priority="0" ImageType="Method">
    <Signature>questTimer = GetQuestLogTimeLeft()</Signature>
    <Description>Returns time remaining for the selected quest in the quest log. If the selected quest is not timed, returns nil.</Description>
    <ReturnList Name="questTimer">
      <Description>The amount of time left to complete the quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestLogTitle" Priority="0" ImageType="Method">
    <Signature>title, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete, isDaily, questID, startEvent, displayQuestID = GetQuestLogTitle(questIndex)</Signature>
    <Description>Returns information about an entry in the player's quest log</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="title">
      <Description>Title of the quest (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Recommended character level for attempting the quest (number) </Description>
    </ReturnList>
    <ReturnList Name="questTag">
      <Description>Localized tag describing the type of quest (string)
Dungeon - Dungeon or instance quest
Elite - Elite quest
Group - Group quest
Heroic - Heroic quest
PVP - PVP specific quest
Raid - Raid quest
nil - Standard quest</Description>
    </ReturnList>
    <ReturnList Name="suggestedGroup">
      <Description>For some group quests, the recommended number of group members for attempting the quest (number) </Description>
    </ReturnList>
    <ReturnList Name="isHeader">
      <Description>1 if the entry is a group header; nil if the entry is a quest (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isCollapsed">
      <Description>1 if the entry is a collapsed header; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isComplete">
      <Description>Whether the quest is complete (number)
-1 - The quest was failed
1 - The quest was completed
nil - The quest has yet to reach a conclusion</Description>
    </ReturnList>
    <ReturnList Name="isDaily">
      <Description>1 if the quest is a daily quest; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="questID">
      <Description>The quest's questID. (number) </Description>
    </ReturnList>
    <ReturnList Name="startEvent">
      <Description>1 if the quest starts a event (not completed, even if it says it is); otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="displayQuestID">
      <Description>weather to display the questID before title or not (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestMoneyToGet" Priority="0" ImageType="Method">
    <Signature>money = GetQuestMoneyToGet()</Signature>
    <Description>Returns the amount of money required to complete the quest presented by a questgiver. Usable following the QUEST_PROGRESS event in which it is determined whether the player can complete the quest.</Description>
    <ReturnList Name="money">
      <Description>Amount of money required to complete the quest (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestPOILeaderBoard" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestPOIWorldEffectInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestPortraitGiver" Priority="0" ImageType="Method">
    <Signature>questPortrait, questPortraitText, questPortraitName = GetQuestPortraitGiver()</Signature>
    <Description>Returns quest-related NPC info for portrait display. Queries the quest currently being accepted.</Description>
    <ReturnList Name="questPortrait">
      <Description>Portrait ID of the quest-related NPC, as used by PlayerModel:SetDisplayInfo(questPortrait) (number) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitText">
      <Description>NPC description (string) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitName">
      <Description>NPC name (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestPortraitTurnIn" Priority="0" ImageType="Method">
    <Signature>questPortrait, questPortraitText, questPortraitName = GetQuestPortraitTurnIn()</Signature>
    <Description>Returns quest-related NPC info for portrait display. Queries the quest currently being turned in.</Description>
    <ReturnList Name="questPortrait">
      <Description>Portrait ID of the quest-related NPC, as used by PlayerModel:SetDisplayInfo(questPortrait) (number) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitText">
      <Description>NPC description (string) </Description>
    </ReturnList>
    <ReturnList Name="questPortraitName">
      <Description>NPC name (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestResetTime" Priority="0" ImageType="Method">
    <Signature>time = GetQuestResetTime()</Signature>
    <Description>Returns the amount of time remaining until the daily quest period resets</Description>
    <ReturnList Name="time">
      <Description>Amount of time remaining until the daily quest period resets (in seconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestReward" Priority="0" ImageType="Method">
    <Signature>GetQuestReward(choice)</Signature>
    <Description>Finishes turning in a quest to a questgiver, selecting an item reward if applicable. Usable following the QUEST_COMPLETE event in which the questgiver presents the player with rewards.</Description>
    <ArgumentList Name="choice">
      <Description>Index of a quest reward choice (between 1 and GetNumQuestChoices()), or nil if the quest does not offer a choice of item rewards (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetQuestSortIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetQuestSpellLink" Priority="0" ImageType="Method">
    <Signature>link = GetQuestSpellLink()</Signature>
    <Description>Returns a hyperlink for a spell in a questgiver dialog. Only valid when the questgiver UI is showing the accept/decline, progress, or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED, QUEST_PROGRESS and QUEST_FINISHED, or QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return empty values or those from the most recently displayed quest.</Description>
    <ReturnList Name="link">
      <Description>A hyperlink for the spell or tradeskill recipe (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestText" Priority="0" ImageType="Method">
    <Signature>text = GetQuestText()</Signature>
    <Description>Returns the text for the quest offered by a questgiver. Only valid when the questgiver UI is showing the accept/decline stage of a quest dialog (between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.</Description>
    <ReturnList Name="text">
      <Description>The text for the currently displayed quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestTimers" Priority="0" ImageType="Method">
    <Signature>... = GetQuestTimers()</Signature>
    <Description>Returns a list of the times remaining for any active timed quests</Description>
    <ReturnList Name="...">
      <Description>A list of numbers, each the amount of time (in seconds) remaining for a timed quest (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestWatchIndex" Priority="0" ImageType="Method">
    <Signature>questWatchIndex = GetQuestWatchIndex(questLogIndex)</Signature>
    <Description>Returns the quest watch (objective tracker) index of a quest in the quest log</Description>
    <ArgumentList Name="questLogIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="questWatchIndex">
      <Description>Index of a quest in the list of quests on the objectives tracker (between 1 and GetNumQuestWatches()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestWorldMapAreaID" Priority="0" ImageType="Method">
    <Signature>mapID, floorNumber = GetQuestWorldMapAreaID(questID)</Signature>
    <Description>Returns the map and floor for a given quest. The argument is the questID, not an index. To convert an index in the quest log use GetQuestLogTile.</Description>
    <ArgumentList Name="questID">
      <Description>The quest index to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="mapID">
      <Description>The map area id for the given quest (number) </Description>
    </ReturnList>
    <ReturnList Name="floorNumber">
      <Description>The floor for the given map (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetQuestsCompleted" Priority="0" ImageType="Method">
    <Signature>completedQuests = GetQuestsCompleted(questTbl)</Signature>
    <Description>Gets a table containing the quests the player has completed. This function will only return data after QueryQuestsCompleted() has been called and the QUEST_QUERY_COMPLETE event has fired. The keys in the returned table are the numeric questIds, with a value of true for each set key.</Description>
    <ArgumentList Name="questTbl">
      <Description>A table that will be wiped and filled with the quest data (table) </Description>
    </ArgumentList>
    <ReturnList Name="completedQuests">
      <Description>A hash table containing a list of the questIds the player has completed. (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRFDungeonInfo" Priority="0" ImageType="Method">
    <Signature>id, name, typeID, subtype, minLevel, maxLevel, level3, level4, level5, result09, result10, result11, name2, result13, raidSize, description, result16, result17, result18 = GetRFDungeonInfo(index)</Signature>
    <Description>Returns information about the raidfinder instances available.. Note that the four level parameters have the same value for all existing raids. (Either 85 or 90). The purpose of number three and four is unknown.
This has similar results as GetLFGDungeonInfo which takes id as the argument.</Description>
    <ArgumentList Name="index">
      <Description>an index, between 1 and GetNumRFDungeons() </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>some id, distinct for different parts of the same raid (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>name of the raid finder, as displayed in the dropdown (string) </Description>
    </ReturnList>
    <ReturnList Name="typeID">
      <Description>unknown purpose, unused in FrameXML (number) </Description>
    </ReturnList>
    <ReturnList Name="subtype">
      <Description>unknown purpose, unused in FrameXML (number) </Description>
    </ReturnList>
    <ReturnList Name="minLevel">
      <Description>minimum level to queue for this lfr (number) </Description>
    </ReturnList>
    <ReturnList Name="maxLevel">
      <Description>maximum level to queue for this lfr (number) </Description>
    </ReturnList>
    <ReturnList Name="level3">
      <Description>unknown purpose, unused in FrameXML, always 1 (number) </Description>
    </ReturnList>
    <ReturnList Name="level4">
      <Description>unknown purpose, unused in FrameXML, always 3 (number) </Description>
    </ReturnList>
    <ReturnList Name="level5">
      <Description>unknown purpose, unused in FrameXML, always 3 (number) </Description>
    </ReturnList>
    <ReturnList Name="result09">
      <Description>unknown purpose, unused in FrameXML (number) </Description>
    </ReturnList>
    <ReturnList Name="result10">
      <Description>unknown purpose, unused in FrameXML (number) </Description>
    </ReturnList>
    <ReturnList Name="result11">
      <Description>unknown purpose, unused in FrameXML, always 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="name2">
      <Description>unique string id, probably not localized (string) </Description>
    </ReturnList>
    <ReturnList Name="result13">
      <Description>unknown purpose, unused in FrameXML, always 7 (number) </Description>
    </ReturnList>
    <ReturnList Name="raidSize">
      <Description>unused in FrameXML, always 25 (number) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>description of the lfr, probably localized, however not used in FrameXML (string) </Description>
    </ReturnList>
    <ReturnList Name="result16">
      <Description>unknown purpose, unused in FrameXML, always false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="result17">
      <Description>unknown purpose, unused in FrameXML, always 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="result18">
      <Description>unknown purpose, unused in FrameXML, always false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRaidBuffInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRaidBuffTrayAuraInfo" Priority="0" ImageType="Method">
    <Signature>name, rank, texture, duration, expiration, spellId, slot = GetRaidBuffTrayAuraInfo()</Signature>
    <Description>Returns the active buff for a given raid buff category. As of 5.0, the default BuffFrames aggregate standard raid buffs. GetRaidBuffTrayAuraInfo is used to determine which buff category is active. Current raid buff categories are:
 RAID_BUFF_1 Stats
 RAID_BUFF_2 Stamina
 RAID_BUFF_3 Attack Power
 RAID_BUFF_4 Attack Speed
 RAID_BUFF_5 Spell Power
 RAID_BUFF_6 Spell Haste
 RAID_BUFF_7 Critical Strike
 RAID_BUFF_8 Mastery
The highest raid buff category number is indicated by NUM_LE_RAID_BUFF_TYPES.</Description>
    <ArgumentList Name="nil">
      <Description>The id of the aura slot (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>The name of the active aura (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>The rank of the active aura (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>The texture path of the active aura (string) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The duration of the active aura (number) </Description>
    </ReturnList>
    <ReturnList Name="expiration">
      <Description>The expiration time of the active aura (number) </Description>
    </ReturnList>
    <ReturnList Name="spellId">
      <Description>The spell ID of the active aura (number) </Description>
    </ReturnList>
    <ReturnList Name="slot">
      <Description>The buff slot of the active aura (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRaidDifficulty" Priority="0" ImageType="Method">
    <Signature>difficulty = GetRaidDifficulty()</Signature>
    <Description>Returns the selected raid difficulty. deprecated; use GetRaidDifficultyID() instead</Description>
    <ReturnList Name="difficulty">
      <Description>The current raid difficulty (number)
1 - 10 Player
2 - 25 Player
3 - 10 Player (Heroic)
4 - 25 Player (Heroic)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRaidProfileFlattenedOptions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRaidProfileName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRaidProfileOption" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRaidProfileSavedPosition" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRaidRosterInfo" Priority="0" ImageType="Method">
    <Signature>name, rank, subgroup, level, class, fileName, zone, online, isDead, role, isML = GetRaidRosterInfo(index)</Signature>
    <Description>Returns information about a member of the player's raid</Description>
    <ArgumentList Name="index">
      <Description>Index of the raid member (between 1 and GetNumGroupMembers()); matches the numeric part of the unit's raid unitID, e.g. 21 for raid21 (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the raid member (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Rank of the member in the raid (number)
0 - Raid member
1 - Raid Assistant
2 - Raid Leader</Description>
    </ReturnList>
    <ReturnList Name="subgroup">
      <Description>Index of the raid subgroup to which the member belongs (between 1 and MAX_RAID_GROUPS) (number) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Character level of the member (number) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Localized name of the member's class (string) </Description>
    </ReturnList>
    <ReturnList Name="fileName">
      <Description>A non-localized token representing the member's class (string) </Description>
    </ReturnList>
    <ReturnList Name="zone">
      <Description>Name of the zone in which the member is currently located (string) </Description>
    </ReturnList>
    <ReturnList Name="online">
      <Description>1 if the member is currently online; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isDead">
      <Description>1 if the member is currently dead; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="role">
      <Description>Group role assigned to the member (string)
MAINASSIST
MAINTANK</Description>
    </ReturnList>
    <ReturnList Name="isML">
      <Description>1 if the member is the master looter; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRaidTargetIndex" Priority="0" ImageType="Method">
    <Signature>index = GetRaidTargetIndex("unit") or GetRaidTargetIndex("name")</Signature>
    <Description>Returns the index of the raid target marker on a unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of a target marker (number)
1 - Star
2 - Circle
3 - Diamond
4 - Triangle
5 - Moon
6 - Square
7 - Cross
8 - Skull
nil - No marker</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRandomBGHonorCurrencyBonuses" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRandomDungeonBestChoice" Priority="0" ImageType="Method">
    <Signature>GetRandomDungeonBestChoice()</Signature>
    <Description>Returns the dungeonID of the random dungeon group that provides the best loot for the player.. The dungeonID that is returned refers to an integer found in LFGDungeons.dbc.

This function is normally used only for initialization of the LFGQueueFrame in FrameXML LFDFrame.lua. You can programatically join the suggested queue for a random dungeon for which your character is eligible.</Description>
  </WowApi>
  <WowApi Name="GetRandomScenarioBestChoice" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRandomScenarioInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRangedCritChance" Priority="0" ImageType="Method">
    <Signature>critChance = GetRangedCritChance()</Signature>
    <Description>Returns the player's ranged critical strike chance</Description>
    <ReturnList Name="critChance">
      <Description>The player's percentage critical strike chance for ranged attacks (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRangedHaste" Priority="0" ImageType="Method">
    <Signature>haste = GetRangedHaste()</Signature>
    <Description>Returns information about the player's ranged haste</Description>
    <ReturnList Name="haste">
      <Description>The player's ranged haste. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRatedBattleGroundInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetReadyCheckStatus" Priority="0" ImageType="Method">
    <Signature>status = GetReadyCheckStatus("unit")</Signature>
    <Description>Returns a unit's status during a ready check. Returns nil for all units unless the player is the party/raid leader or a raid assistant.</Description>
    <ArgumentList Name="unit">
      <Description>A unit in the player's party or raid (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>Ready check status for the unit (string)
"notready" - Unit has responded as not ready
"ready" - Unit has responded as ready
"waiting" - Unit has not yet responded
nil - No ready check is in progress</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetReadyCheckTimeLeft" Priority="0" ImageType="Method">
    <Signature>timeLeft = GetReadyCheckTimeLeft()</Signature>
    <Description>Returns the amount of time left on the current ready check. Returns 0 if no ready check is in progress.</Description>
    <ReturnList Name="timeLeft">
      <Description>Amount of time remaining on the ready check (in seconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRealZoneText" Priority="0" ImageType="Method">
    <Signature>zoneName = GetRealZoneText()</Signature>
    <Description>Returns the "official" name of the zone or instance in which the player is located. This name matches that seen in the Who, Guild, and Friends UIs when reporting character locations. It may differ from those the default UI displays in other locations (GetZoneText() and GetMinimapZoneText()), especially if the player is in an instance: e.g. this function returns "The Stockade" when the others return "Stormwind Stockade".</Description>
    <ReturnList Name="zoneName">
      <Description>Name of the zone or instance (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRealmName" Priority="0" ImageType="Method">
    <Signature>realm = GetRealmName()</Signature>
    <Description>Returns the name of the player's realm (server name)</Description>
    <ReturnList Name="realm">
      <Description>The name of the player's realm (server) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRecruitingGuildInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRecruitingGuildSelection" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRecruitingGuildSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRecruitingGuildTabardInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetReforgeItemInfo" Priority="0" ImageType="Method">
    <Signature>currentReforge, icon, name, quality, bound, cost = GetReforgeItemInfo()</Signature>
    <Description>Returns information about the item currently in the 'reforge' slot.</Description>
    <ReturnList Name="currentReforge">
      <Description>A numeric identifier for the current reforging applied to the item. 0 if no reforging is currently applied. This value can be passed to (GetReforgeOptionInfo) to get a description, and values of the reforging applied. The value is an index into currently available reforging options, and so only makes sense for the item currently being reforged. The API cannot be used until the reforge UI is open with an item selected (number) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture that corresponds to something (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the item currently selected for reforging (e.g. 'True Beacon Shoulderplates') (string) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>An numeric item quality (rarity) value (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="bound">
      <Description>A string containing the item's bound status (e.g. 'Soulbound') (string) </Description>
    </ReturnList>
    <ReturnList Name="cost">
      <Description>The cost (in copper) to reforge the item (e.g. 87873 = 8g78s73c) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetReforgeItemStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetReforgeOptionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRefreshRates" Priority="0" ImageType="Method">
    <Signature>... = GetRefreshRates()</Signature>
    <Description>Returns a list of available screen refresh rates. The current refresh rate can be found in the gxRefresh CVar.</Description>
    <ReturnList Name="...">
      <Description>A list of numbers, each an available screen refresh rates (in hertz, or zycles per second) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRegisteredAddonMessagePrefixes" Priority="0" ImageType="Method">
    <Signature>registeredPrefixes = GetRegisteredAddonMessagePrefixes([prefixTable])</Signature>
    <Description>Returns a table containing all addon message prefixes that have been registered</Description>
    <ArgumentList Name="prefixTable">
      <Description>A table to be filled with the registered addon message prefixes (table) </Description>
    </ArgumentList>
    <ReturnList Name="registeredPrefixes">
      <Description>A table containing a list of the registered addon message prefixes (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetReleaseTimeRemaining" Priority="0" ImageType="Method">
    <Signature>timeleft = GetReleaseTimeRemaining()</Signature>
    <Description>Returns the amount of time remaining until the player's spirit is automatically released when dead. Returns -1 if the player died in a dungeon or raid instance; in such cases, the player's spirit will not be released automatically (see RepopMe() to release manually).</Description>
    <ReturnList Name="timeleft">
      <Description>Amount of time remaining until the player's spirit is automatically released to the nearest graveyard (in seconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRepairAllCost" Priority="0" ImageType="Method">
    <Signature>repairAllCost, canRepair = GetRepairAllCost()</Signature>
    <Description>Returns the cost to repair all of the player's damaged items. Returns 0, nil if none of the player's items are damaged. Only returns valid data while interacting with a vendor which allows repairs (i.e. for whom CanMerchantRepair() returns 1).</Description>
    <ReturnList Name="repairAllCost">
      <Description>Cost to repair all damaged items (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="canRepair">
      <Description>1 if repairs are currently available; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetResSicknessDuration" Priority="0" ImageType="Method">
    <Signature>resSicknessTime = GetResSicknessDuration()</Signature>
    <Description>Returns the duration of resurrection sickness at the player's current level. Returns nil for players under level 10, who are allowed to resurrect at a spirit healer without suffering resurrection sickness.</Description>
    <ReturnList Name="resSicknessTime">
      <Description>Text describing the duration of resurrection sickness were the player to resurrect at a spirit healer (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRestState" Priority="0" ImageType="Method">
    <Signature>state, name, multiplier = GetRestState()</Signature>
    <Description>Returns the player's current rest state</Description>
    <ReturnList Name="state">
      <Description>Number identiying the current rest state (number)
1 - Rested
2 - Normal
3 - Tired - used in locales with account play time limits
4 - Unhealthy - used in locales with account play time limits</Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Localized text describing the player's current rest state (string) </Description>
    </ReturnList>
    <ReturnList Name="multiplier">
      <Description>Multiplier for experience points earned from kills (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRestrictedAccountData" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRewardMoney" Priority="0" ImageType="Method">
    <Signature>money = GetRewardMoney()</Signature>
    <Description>Returns the amount of money awarded when completing a quest.

Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or a value from the most recently displayed quest.
 </Description>
    <ReturnList Name="money">
      <Description>The amount of money to be awarded (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRewardNumSkillUps" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRewardSkillLineID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRewardSkillPoints" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetRewardSpell" Priority="0" ImageType="Method">
    <Signature>texture, name, isTradeskillSpell, isSpellLearned = GetRewardSpell()</Signature>
    <Description>Returns information about a spell awarded when completing a quest. Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or values from the most recently displayed quest.
If both isTradeskillSpell and isSpellLearned are nil, the reward is a spell cast upon the player.</Description>
    <ReturnList Name="texture">
      <Description>Path to the spell's icon texture (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="isTradeskillSpell">
      <Description>1 if the spell is a tradeskill recipe; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isSpellLearned">
      <Description>1 if the reward teaches the player a new spell; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRewardTalents" Priority="0" ImageType="Method">
    <Signature>talents = GetRewardTalents()</Signature>
    <Description>Returns the talent points awarded when completing a quest. Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return zero or a value from the most recently displayed quest.
(Very few quests award talent points; currently this functionality is only used within the Death Knight starting experience.)</Description>
    <ReturnList Name="talents">
      <Description>The talent points to be awarded (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRewardText" Priority="0" ImageType="Method">
    <Signature>text = GetRewardText()</Signature>
    <Description>Returns questgiver dialog to be displayed when completing a quest. Only valid when the questgiver UI is showing the completion stage of a quest dialog (between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return the empty string or a value from the most recently displayed quest.</Description>
    <ReturnList Name="text">
      <Description>Text to be displayed for the quest completion dialog (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRewardTitle" Priority="0" ImageType="Method">
    <Signature>title = GetRewardTitle()</Signature>
    <Description>Returns the title awarded when completing a quest.
Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.</Description>
    <ReturnList Name="title">
      <Description>The title to be awarded, or nil if the quest does not reward a title (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRewardXP" Priority="0" ImageType="Method">
    <Signature>amount = GetRewardXP()</Signature>
    <Description>Returns the experience awarded when completing a quest.
Only valid when the questgiver UI is showing the accept/decline or completion stages of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events, or between the QUEST_COMPLETE and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.</Description>
    <ReturnList Name="amount">
      <Description>The amount of XP to be awarded (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRuneCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, runeReady = GetRuneCooldown(slot)</Signature>
    <Description>Returns cooldown information about one of the player's rune resources. Note the placement of runes 3-4 (normally Unholy) and 5-6 (normally Frost) are reversed in the default UI. Also note the behavior of returned values differs slightly from most other GetXYZCooldown-style functions.</Description>
    <ArgumentList Name="slot">
      <Description>Index of a rune slot, as positioned in the default UI: (number)
1 - Leftmost
2 - Second from left
3 - Fifth from left (second from right)
4 - Sixth from left (rightmost)
5 - Third from left
6 - Fourth from left</Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the rune is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown (regardless of whether the rune is currently cooling down) (number) </Description>
    </ReturnList>
    <ReturnList Name="runeReady">
      <Description>True if the rune can be used; false if the rune is cooling down (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRuneCount" Priority="0" ImageType="Method">
    <Signature>count = GetRuneCount(slot)</Signature>
    <Description>Returns the number of available rune resources in one of the player's rune slots. Returns 1 if a rune is ready and 0 if a rune is on cooldown. </Description>
    <ArgumentList Name="slot">
      <Description>Index of a rune slot, as positioned in the default UI: (number)
1 - Leftmost
2 - Second from left
3 - Fifth from left (second from right)
4 - Sixth from left (rightmost)
5 - Third from left
6 - Fourth from left</Description>
    </ArgumentList>
    <ReturnList Name="count">
      <Description>Number of available runes in the slot (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRuneType" Priority="0" ImageType="Method">
    <Signature>runeType = GetRuneType(slot)</Signature>
    <Description>Returns the type of one of the player's rune resources. Note the placement of runes 3-4 (normally Unholy) and 5-6 (normally Frost) are reversed in the default UI.</Description>
    <ArgumentList Name="slot">
      <Description>Index of a rune slot, as positioned in the default UI: (number)
1 - Leftmost
2 - Second from left
3 - Fifth from left (second from right)
4 - Sixth from left (rightmost)
5 - Third from left
6 - Fourth from left</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetRunningMacro" Priority="0" ImageType="Method">
    <Signature>index = GetRunningMacro()</Signature>
    <Description>Returns the index of the currently running macro.</Description>
    <ReturnList Name="index">
      <Description>Index of the currently running macro, or nil if no macro is running (number, macroID) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetRunningMacroButton" Priority="0" ImageType="Method">
    <Signature>button = GetRunningMacroButton()</Signature>
    <Description>Returns the mouse button that was used to activate the running macro</Description>
    <ReturnList Name="button">
      <Description>Name of the mouse button used to activate the macro; always "LeftButton" if the macro was triggered by a key binding (string)
Button4
Button5
LeftButton
MiddleButton
RightButton</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSavedInstanceChatLink" Priority="0" ImageType="Method">
    <Signature>hyperlink = GetSavedInstanceChatLink(index)</Signature>
    <Description>Returns a hyperlink for a player's raid save</Description>
    <ArgumentList Name="index">
      <Description>Index of a saved instance (between 1 and GetNumSavedInstances()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="hyperlink">
      <Description>Hyperlink of the raid save, suitable for insertion in chat (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSavedInstanceEncounterInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSavedInstanceInfo" Priority="0" ImageType="Method">
    <Signature>instanceName, instanceID, instanceReset, instanceDifficulty, locked, extended, instanceIDMostSig, isRaid, maxPlayers, difficultyName, maxBosses, defeatedBosses = GetSavedInstanceInfo(index)</Signature>
    <Description>Returns information on a specific instance to which the player is saved</Description>
    <ArgumentList Name="index">
      <Description>Index of a saved instance (between 1 and GetNumSavedInstances()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="instanceName">
      <Description>Name of the instance (string) </Description>
    </ReturnList>
    <ReturnList Name="instanceID">
      <Description>Unique identifier of the saved instance (commonly known as a RaidID) (number) </Description>
    </ReturnList>
    <ReturnList Name="instanceReset">
      <Description>Approximate number of seconds remaining until the instance resets (number) </Description>
    </ReturnList>
    <ReturnList Name="instanceDifficulty">
      <Description>Difficulty level of the saved instance (number)
1 - Normal ('10 Player' if instance is a raid)
2 - Heroic ('25 Player' if instance is a raid)
3 - 10 Player Heroic
4 - 25 Player Heroic</Description>
    </ReturnList>
    <ReturnList Name="locked">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="extended">
      <Description>true if the reset time has been extended past its normal time; otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="instanceIDMostSig">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="isRaid">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="maxPlayers">
      <Description>Number of players allowed (number) </Description>
    </ReturnList>
    <ReturnList Name="difficultyName">
      <Description>A string representing the difficulty of the given instance. (string) </Description>
    </ReturnList>
    <ReturnList Name="maxBosses">
      <Description>The number of bosses in the instance (number) </Description>
    </ReturnList>
    <ReturnList Name="defeatedBosses">
      <Description>The number of bosses defeated in the instance (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetScenariosChoiceOrder" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetScreenHeight" Priority="0" ImageType="Method">
    <Signature>height = GetScreenHeight()</Signature>
    <Description>Returns the height of the screen for UI layout purposes. Measurements for layout are affected by the UI Scale setting (i.e. the uiscale CVar) and may not match actual screen pixels.</Description>
    <ReturnList Name="height">
      <Description>Height of the screen in layout pixels (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetScreenResolutions" Priority="0" ImageType="Method">
    <Signature>... = GetScreenResolutions()</Signature>
    <Description>Returns a list of available screen resolutions</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each a description of the dimensions of an available screen resolution (e.g. "800x600", "1024x768") (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetScreenWidth" Priority="0" ImageType="Method">
    <Signature>screenWidth = GetScreenWidth()</Signature>
    <Description>Returns the width of the screen for UI layout purposes. Measurements for layout are affected by the UI Scale setting (i.e. the uiscale CVar) and may not match actual screen pixels.</Description>
    <ReturnList Name="screenWidth">
      <Description>Width of the screen in layout pixels (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetScriptCPUUsage" Priority="0" ImageType="Method">
    <Signature>usage = GetScriptCPUUsage()</Signature>
    <Description>Returns the total CPU time used by the scripting system. Only returns valid data if the scriptProfile CVar is set to 1; returns 0 otherwise.</Description>
    <ReturnList Name="usage">
      <Description>Amount of CPU time used by the scripting system (in milliseconds) since the UI was loaded or ResetCPUUsage() was last called (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSecondsUntilParentalControlsKick" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSelectedArtifactInfo" Priority="0" ImageType="Method">
    <Signature>name, description, rarity, icon, spellDescription, numSockets, bgTexture = GetSelectedArtifactInfo()</Signature>
    <Description>Returns information about the currently selected artifact. Works even if the archeology panel is closed. Artifacts have specific information as well as information specific to the spell casted when creating the artifact. Common artifacts share the same description throughout the same race.</Description>
    <ReturnList Name="name">
      <Description>Name of the artifact (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Description of the artifact (string) </Description>
    </ReturnList>
    <ReturnList Name="rarity">
      <Description>Rarity of the artifact (0 for common, 1 for rare) (number) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to the icon of the spell for the artifact (string) </Description>
    </ReturnList>
    <ReturnList Name="spellDescription">
      <Description>Description of the spell for the artifact (string) </Description>
    </ReturnList>
    <ReturnList Name="numSockets">
      <Description>Number of sockets usable to create the artifact (number) </Description>
    </ReturnList>
    <ReturnList Name="bgTexture">
      <Description>Path to the background texture for the artifact (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedAuctionItem" Priority="0" ImageType="Method">
    <Signature>index = GetSelectedAuctionItem("list")</Signature>
    <Description>Returns the index of the currently selected item in an auction listing. Auction selection is used only for display and internal recordkeeping in the default UI; it has no direct effect on other Auction APIs.</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ReturnList Name="index">
      <Description>Index of the currently selected auction item (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedDisplayChannel" Priority="0" ImageType="Method">
    <Signature>index = GetSelectedDisplayChannel()</Signature>
    <Description>Returns the selected channel in the channel list display</Description>
    <ReturnList Name="index">
      <Description>Index of the selected channel in the display channel list (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedFaction" Priority="0" ImageType="Method">
    <Signature>index = GetSelectedFaction()</Signature>
    <Description>Returns which faction entry is selected in the reputation UI.
Selection has no bearing on other faction-related APIs; this function merely facilitates behaviors of Blizzard's reputation UI.</Description>
    <ReturnList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedFriend" Priority="0" ImageType="Method">
    <Signature>index = GetSelectedFriend()</Signature>
    <Description>Returns the index of the selected character in the player's friends list. Selection in the Friends list is used only for display in the default UI and has no effect on other Friends list APIs.</Description>
    <ReturnList Name="index">
      <Description>Index of the selected character in the Friends list (between 1 and GetNumFriends()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedGlyphSpellIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSelectedIgnore" Priority="0" ImageType="Method">
    <Signature>index = GetSelectedIgnore()</Signature>
    <Description>Returns the index of the selected character in the player's ignore list. Selection in the Ignore list is used only for display in the default UI and has no effect on other Ignore list APIs.</Description>
    <ReturnList Name="index">
      <Description>Index of the selected character in the Ignore list (between 1 and GetNumIgnores()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedMute" Priority="0" ImageType="Method">
    <Signature>selectedMute = GetSelectedMute()</Signature>
    <Description>Returns the index of the selected entry in the Muted list. Mute list selection is only used for display purposes in the default UI and has no effect on other API functions.</Description>
    <ReturnList Name="selectedMute">
      <Description>Index of the selected entry in the mute listing (between 1 and GetNumMutes()), or 0 if no entry is selected (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedStationeryTexture" Priority="0" ImageType="Method">
    <Signature>index = GetSelectedStationeryTexture()</Signature>
    <Description>Returns the currently selected stationery type. Always returns 1; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.</Description>
    <ReturnList Name="index">
      <Description>Index of the selected stationery type (between 1 and GetNumStationeries()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSelectedWarGameType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSendMailCOD" Priority="0" ImageType="Method">
    <Signature>amount = GetSendMailCOD()</Signature>
    <Description>Returns the Cash-On-Delivery cost of the outgoing message. Returns the amount set via SetSendMailCOD(), which in the default UI is only called once its Send button has been clicked (immediately before sending the message). Thus, does not return the COD amount set in the default UI's Send Mail window.</Description>
    <ReturnList Name="amount">
      <Description>COD cost for the items attached to the message (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSendMailItem" Priority="0" ImageType="Method">
    <Signature>itemName, itemTexture, stackCount, quality = GetSendMailItem(slot)</Signature>
    <Description>Returns information for an item attached to the outgoing message</Description>
    <ArgumentList Name="slot">
      <Description>Index of an outgoing attachment slot (between 1 and ATTACHMENTS_MAX_SEND) (number) </Description>
    </ArgumentList>
    <ReturnList Name="itemName">
      <Description>Name of the attachment item (string) </Description>
    </ReturnList>
    <ReturnList Name="itemTexture">
      <Description>Path to an icon texture for the attachment item (string) </Description>
    </ReturnList>
    <ReturnList Name="stackCount">
      <Description>Number of stacked items (string) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) of the attachment item (number, itemQuality) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSendMailItemLink" Priority="0" ImageType="Method">
    <Signature>itemlink = GetSendMailItemLink(slot)</Signature>
    <Description>Returns a hyperlink for an item attached to the outgoing message</Description>
    <ArgumentList Name="slot">
      <Description>Index of an outgoing attachment slot (between 1 and ATTACHMENTS_MAX_SEND) (number) </Description>
    </ArgumentList>
    <ReturnList Name="itemlink">
      <Description>A hyperlink for the attachment item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSendMailMoney" Priority="0" ImageType="Method">
    <Signature>amount = GetSendMailMoney()</Signature>
    <Description>Returns the amount of money to be sent with the outgoing message. Returns the amount set via SetSendMailMoney(), which in the default UI is only called once its Send button has been clicked (immediately before sending the message). Thus, does not return the Send Money amount set in the default UI's Send Mail window.</Description>
    <ReturnList Name="amount">
      <Description>Amount of money to be sent (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSendMailPrice" Priority="0" ImageType="Method">
    <Signature>price = GetSendMailPrice()</Signature>
    <Description>Returns the cost to send the outgoing mail message. The cost of sending a message rises as more items are attached.</Description>
    <ReturnList Name="price">
      <Description>Cost to send the outgoing mail message (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSessionTime" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetShapeshiftForm" Priority="0" ImageType="Method">
    <Signature>index = GetShapeshiftForm()</Signature>
    <Description>Returns the index of the active ability on the stance/shapeshift bar</Description>
    <ReturnList Name="index">
      <Description>Index of the active ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetShapeshiftFormCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetShapeshiftFormCooldown(index)</Signature>
    <Description>Returns cooldown information about an ability on the stance/shapeshift bar</Description>
    <ArgumentList Name="index">
      <Description>Index of an ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the ability is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the ability is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the ability is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetShapeshiftFormID" Priority="0" ImageType="Method">
    <Signature>id = GetShapeshiftFormID()</Signature>
    <Description>Returns the ID of the active shapeshift form. Possible return values are:
Druids:
Bear Form - 5 (BEAR_FORM constant)
Cat Form - 1 (CAT_FORM constant)
Aquatic Form - 4
Travel Form - 3
Moonkin Form - 31 (MOONKIN_FORM constant)
Tree of Life - 2
Flight Form - 27
Warriors:
Battle Stance - 17
Defensive Stance - 18
Berserker Stance - 19
Warlocks:
Metamorphosis - 22 </Description>
    <ReturnList Name="id">
      <Description>ID of the active shapeshift form, or nil (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetShapeshiftFormInfo" Priority="0" ImageType="Method">
    <Signature>texture, name, isActive, isCastable = GetShapeshiftFormInfo(index)</Signature>
    <Description>Returns information about an ability on the stance/shapeshift bar</Description>
    <ArgumentList Name="index">
      <Description>Index of an ability on the stance/shapeshift bar (between 1 and GetNumShapeshiftForms()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the ability (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the ability (string) </Description>
    </ReturnList>
    <ReturnList Name="isActive">
      <Description>1 if the ability is currently active; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isCastable">
      <Description>1 if the ability can currently be used; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSheathState" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetShieldBlock" Priority="0" ImageType="Method">
    <Signature>damage = GetShieldBlock()</Signature>
    <Description>Returns the amount of damage prevented when the player blocks with a shield</Description>
    <ReturnList Name="damage">
      <Description>The amount of damage prevented when the player blocks with a shield (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSocketItemBoundTradeable" Priority="0" ImageType="Method">
    <Signature>tradeable = GetSocketItemBoundTradeable()</Signature>
    <Description>Returns whether the item open for socketing is temporarily tradeable. A Bind on Pickup item looted by the player can be traded to other characters who were originally eligible to loot it, but only within a limited time after looting. This period can be ended prematurely if the player attempts certain actions (such as socketing gems into the item).</Description>
    <ReturnList Name="tradeable">
      <Description>1 if the item can temporarily be traded to other players; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSocketItemInfo" Priority="0" ImageType="Method">
    <Signature>name, icon, quality = GetSocketItemInfo()</Signature>
    <Description>Returns information about the item currently being socketed. Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality level of the item (number, itemQuality) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSocketItemRefundable" Priority="0" ImageType="Method">
    <Signature>refundable = GetSocketItemRefundable()</Signature>
    <Description>Returns whether the item open for socketing is temporarily refundable. Items bought with alternate currency (honor points, arena points, or special items such as Emblems of Heroism and Dalaran Cooking Awards) can be returned to a vendor for a full refund, but only within a limited time after the original purchase. This period can be ended prematurely if the player attempts certain actions (such as socketing gems into the item).</Description>
    <ReturnList Name="refundable">
      <Description>1 if the item can be returned to a vendor for a refund; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSocketTypes" Priority="0" ImageType="Method">
    <Signature>gemColor = GetSocketTypes(index)</Signature>
    <Description>Returns information about the gem types usable in a socket. Only returns valid information when the Item Socketing UI is open (i.e. between the SOCKET_INFO_UPDATE and SOCKET_INFO_CLOSE events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a gem socket (between 1 and GetNumSockets()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="gemColor">
      <Description>Type of the gem socket (string)
Blue - Accepts any gem, but requires a blue, green, purple or prismatic gem to activate the item's socket bonus
Meta - Accepts only meta gems
Red - Accepts any gem, but requires a red, purple, orange or prismatic gem to activate the item's socket bonus
Socket - Accepts any gem
Yellow - Accepts any gem, but requires a yellow, orange, green or prismatic gem to activate the item's socket bonus</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSourceReforgeStats" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpecialization" Priority="0" ImageType="Method">
    <Signature>specID = GetSpecialization()</Signature>
    <Description>Return non-global specialization ID of currently active specialization.</Description>
    <ReturnList Name="specID">
      <Description>Non-global specialization ID number (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpecializationInfo" Priority="0" ImageType="Method">
    <Signature>id, name, description, icon, background, role = GetSpecializationInfo(specID)</Signature>
    <Description>Return additional data about player specializations.</Description>
    <ArgumentList Name="specID">
      <Description>Non-global specialization ID number (number) </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>Global specialization ID number (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Localized specialization name (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Localized specialization description used in talent tab (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to specialization icon used in talent tab (string) </Description>
    </ReturnList>
    <ReturnList Name="background">
      <Description>Name of background texture. Not used in current version of official UI (string) </Description>
    </ReturnList>
    <ReturnList Name="role">
      <Description>Non-localized specialization role token (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpecializationInfoByID" Priority="0" ImageType="Method">
    <Signature>id, name, description, icon, background, role, class = GetSpecializationInfoByID(specID)</Signature>
    <Description>Return additional data about specializations.</Description>
    <ArgumentList Name="specID">
      <Description>Global specialization ID number (number) </Description>
    </ArgumentList>
    <ReturnList Name="id">
      <Description>Global specialization ID number (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Localized specialization name (string) </Description>
    </ReturnList>
    <ReturnList Name="description">
      <Description>Localized specialization description used in talent tab (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to specialization icon used in talent tab (string) </Description>
    </ReturnList>
    <ReturnList Name="background">
      <Description>Name of background texture. Not used in current version of official UI (string) </Description>
    </ReturnList>
    <ReturnList Name="role">
      <Description>Non-localized specialization role token (string) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Non-localized class token (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpecializationInfoForClassID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpecializationMasterySpells" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpecializationRole" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpecializationRoleByID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpecializationSpells" Priority="0" ImageType="Method">
    <Signature>spellID, levelLearned, ... = GetSpecializationSpells(specIndex [, isInspect [, isPet]])</Signature>
    <Description>Returns the spells associated with a specialization.</Description>
    <ArgumentList Name="specIndex">
      <Description>The specialization index to get the spells for. (Usually between 1 and 3) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="isInspect">
      <Description>If true, return the inspected unit's spells instead of the player's. (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="isPet">
      <Description>If true, return the player's current pet's spells instead of the player's. (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="spellID">
      <Description>spellID of the specialization spell. (number, spellID) </Description>
    </ReturnList>
    <ReturnList Name="levelLearned">
      <Description>The level at which the spell is learned. (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional spellID, levelLearned pairs for the other spells of this specialization. (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpecsForSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpellAutocast" Priority="0" ImageType="Method">
    <Signature>autocastAllowed, autocastEnabled = GetSpellAutocast(id, "bookType")</Signature>
    <Description>Returns information about automatic casting for a spell in the spellbook. Generally, only certain pet spells can be autocast.</Description>
    <ArgumentList Name="id">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ReturnList Name="autocastAllowed">
      <Description>1 if automatic casting is allowed for the action; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="autocastEnabled">
      <Description>1 if automatic casting is currently turned on for the action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellAvailableLevel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpellBaseCooldown" Priority="0" ImageType="Method">
    <Signature>cooldown = GetSpellBaseCooldown(id)</Signature>
    <Description>Returns the base cooldown of a spell</Description>
    <ArgumentList Name="id">
      <Description>Numeric ID of a spell (number, spellID) </Description>
    </ArgumentList>
    <ReturnList Name="cooldown">
      <Description>The duration of the cooldown in milliseconds, or nil if the spellID is invalid (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellBonusDamage" Priority="0" ImageType="Method">
    <Signature>minModifier = GetSpellBonusDamage(school)</Signature>
    <Description>Returns the player's spell damage bonus for a spell school</Description>
    <ArgumentList Name="school">
      <Description>Index of a spell school (number)
1 - Physical
2 - Holy
3 - Fire
4 - Nature
5 - Frost
6 - Shadow
7 - Arcane</Description>
    </ArgumentList>
    <ReturnList Name="minModifier">
      <Description>The player's spell damage bonus for the given school (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellBonusHealing" Priority="0" ImageType="Method">
    <Signature>bonusHealing = GetSpellBonusHealing()</Signature>
    <Description>Returns the player's amount of bonus healing</Description>
    <ReturnList Name="bonusHealing">
      <Description>Amount of bonus healing (integer) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellBookItemInfo" Priority="0" ImageType="Method">
    <Signature>skillType, spellId = GetSpellBookItemInfo(index, "bookType") or GetSpellBookItemInfo("spellName")</Signature>
    <Description>Retrieves information about a specific SpellBook item</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="spellName">
      <Description>Name of a spell to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="skillType">
      <Description>The type of the spell (known values: 'SPELL', 'PETACTION', 'FUTURESPELL', 'FLYOUT' (string) </Description>
    </ReturnList>
    <ReturnList Name="spellId">
      <Description>The global spell id (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellBookItemName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpellBookItemTexture" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpellCharges" Priority="0" ImageType="Method">
    <Signature>charges, maxCharges, start, duration = GetSpellCharges("name") or GetSpellCharges(id)</Signature>
    <Description>Returns information on the number of charges on a spell in the spellbook</Description>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ArgumentList Name="id">
      <Description>Numeric ID of a spell (number, spellID) </Description>
    </ArgumentList>
    <ReturnList Name="charges">
      <Description>Current amount of charges left for a spell (number) </Description>
    </ReturnList>
    <ReturnList Name="maxCharges">
      <Description>The total amount of charges given for a spell (number) </Description>
    </ReturnList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began. NB: This value never resets! (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown in seconds (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration, enable = GetSpellCooldown(index, "bookType") or GetSpellCooldown("name") or GetSpellCooldown(id)</Signature>
    <Description>Returns cooldown information about a spell in the spellbook</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ArgumentList Name="id">
      <Description>Numeric ID of a spell (number, spellID) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the spell is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the spell is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="enable">
      <Description>1 if a Cooldown UI element should be used to display the cooldown, otherwise 0. (Does not always correlate with whether the spell is ready.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellCount" Priority="0" ImageType="Method">
    <Signature>numCasts = GetSpellCount(index, "bookType") or GetSpellCount("name")</Signature>
    <Description>Returns the number of times a spell can be cast. Generally used for spells whose casting is limited by the number of item reagents in the player's possession.</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="numCasts">
      <Description>Number of times the spell can be cast, or 0 if unlimited (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellCritChance" Priority="0" ImageType="Method">
    <Signature>minCrit = GetSpellCritChance(school)</Signature>
    <Description>Returns the player's spell critical strike chance for a spell school</Description>
    <ArgumentList Name="school">
      <Description>Index of a spell school (number)
1 - Physical
2 - Holy
3 - Fire
4 - Nature
5 - Frost
6 - Shadow
7 - Arcane</Description>
    </ArgumentList>
    <ReturnList Name="minCrit">
      <Description>The player's percentage critical strike chance for spells from the given school (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellCritChanceFromIntellect" Priority="0" ImageType="Method">
    <Signature>critChance = GetSpellCritChanceFromIntellect(["unit"])</Signature>
    <Description>Returns additional spell critical strike chance provided by Intellect</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player and pet, defaults to player if omitted (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="critChance">
      <Description>Additional percentage chance of spell critical strikes conferred by the unit's Intellect statistic (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellDescription" Priority="0" ImageType="Method">
    <Signature>desc = GetSpellDescription(spellId)</Signature>
    <Description>Returns the description of a spell</Description>
    <ArgumentList Name="spellId">
      <Description>The spell id to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="desc">
      <Description>The description of the spell (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellHitModifier" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpellInfo" Priority="0" ImageType="Method">
    <Signature>name, rank, icon, powerCost, isFunnel, powerType, castingTime, minRange, maxRange = GetSpellInfo(index, "bookType") or GetSpellInfo("name") or GetSpellInfo(id)</Signature>
    <Description>Returns information about a spell. As of 4.1, this function should always return valid data for a spell if the spell is in the player's spellbook (by name or index) or if requested by spell id. When in doubt, if the player does not have the spell in their spellbook, use the numeric id to access its information.</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell, optionally including secondary text (e.g. "Mana Burn" to find the player's highest rank, or "Mana Burn(Rank 2)" -- no space before the parenthesis -- for a specific rank) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="id">
      <Description>Numeric ID of a spell (number, spellID) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Secondary text associated with the spell (e.g."Rank 5", "Racial", etc.) (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="powerCost">
      <Description>Amount of mana, rage, energy, runic power, or focus required to cast the spell (number) </Description>
    </ReturnList>
    <ReturnList Name="isFunnel">
      <Description>True for spells with health funneling effects (like Health Funnel) (boolean) </Description>
    </ReturnList>
    <ReturnList Name="powerType">
      <Description>Power type to cast the spell (number)
-2 - Health
0 - Mana
1 - Rage
2 - Focus
3 - Energy
5 - Runes
6 - Runic Power</Description>
    </ReturnList>
    <ReturnList Name="castingTime">
      <Description>Casting time of the spell in milliseconds (number) </Description>
    </ReturnList>
    <ReturnList Name="minRange">
      <Description>Minimum range from the target required to cast the spell (number) </Description>
    </ReturnList>
    <ReturnList Name="maxRange">
      <Description>Maximum range from the target at which you can cast the spell (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellLevelLearned" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetSpellLink" Priority="0" ImageType="Method">
    <Signature>link, tradeLink = GetSpellLink(index, "bookType") or GetSpellLink("name") or GetSpellLink(id)</Signature>
    <Description>Returns a hyperlink for a spell</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell, optionally including secondary text (e.g. "Mana Burn" to find the player's highest rank, or "Mana Burn(Rank 2)" -- no space before the parenthesis -- for a specific rank) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="id">
      <Description>Numeric ID of a spell (number, spellID) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the spell (string, hyperlink) </Description>
    </ReturnList>
    <ReturnList Name="tradeLink">
      <Description>A hyperlink representing the player's list of trade skill recipes, if the spell is a trade skill (i.e. if "casting" the spell opens a trade skill window) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellPenetration" Priority="0" ImageType="Method">
    <Signature>penetration = GetSpellPenetration()</Signature>
    <Description>Returns the amount of enemy magic resistance ignored due to the player's Spell Penetration Rating</Description>
    <ReturnList Name="penetration">
      <Description>Amount of enemy magic resistance ignored due to the player's Spell Penetration Rating (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellTabInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, offset, numSpells = GetSpellTabInfo(index)</Signature>
    <Description>Returns information about a tab in the spellbook</Description>
    <ArgumentList Name="index">
      <Description>Index of a spellbook tab (between 1 and GetNumSpellTabs()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the spellbook tab (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the spellbook tab (string) </Description>
    </ReturnList>
    <ReturnList Name="offset">
      <Description>spellbookID of the first spell to be listed under the tab (number) </Description>
    </ReturnList>
    <ReturnList Name="numSpells">
      <Description>Number of spells listed under the tab (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSpellTexture" Priority="0" ImageType="Method">
    <Signature>texture = GetSpellTexture(index, "bookType") or GetSpellTexture("name")</Signature>
    <Description>Returns the icon texture path for a spell</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the spell (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetStablePetFoodTypes" Priority="0" ImageType="Method">
    <Signature>... = GetStablePetFoodTypes(index)</Signature>
    <Description>Returns the types of food that a stabled pet will eat</Description>
    <ArgumentList Name="index">
      <Description>Index of a stable slot (number)
0 - Active pet
1 to NUM_PET_STABLE_SLOTS - A stabled pet</Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of a food type the pet will eat (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetStablePetInfo" Priority="0" ImageType="Method">
    <Signature>icon, name, level, family, talent = GetStablePetInfo(index)</Signature>
    <Description>Returns information about a stabled pet</Description>
    <ArgumentList Name="index">
      <Description>Index of a stable slot (number)
0 - Active pet
1 to NUM_PET_STABLE_SLOTS - A stable slot</Description>
    </ArgumentList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the pet (string) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>Name of the pet (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Level of the pet (number) </Description>
    </ReturnList>
    <ReturnList Name="family">
      <Description>Localized name of the pet's creature family (e.g. Cat, Bear, Chimaera) (string) </Description>
    </ReturnList>
    <ReturnList Name="talent">
      <Description>Localized name of the pet's talent tree (e.g. Ferocity, Tenacity, Cunning) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetStationeryInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, cost = GetStationeryInfo(index)</Signature>
    <Description>Returns information about a stationery type. Only returns information for the default stationery type; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.</Description>
    <ArgumentList Name="index">
      <Description>Index of a stationery type (between 1 and GetNumStationeries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the stationery type (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the stationery type (string) </Description>
    </ReturnList>
    <ReturnList Name="cost">
      <Description>Cost to use the stationery when sending a message, in addition to normal postage (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetStatistic" Priority="0" ImageType="Method">
    <Signature>info = GetStatistic(id)</Signature>
    <Description>Returns data for a statistic that can be shown on the statistics tab of the achievements window</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of a statistic (number, blizzid) </Description>
    </ArgumentList>
    <ReturnList Name="info">
      <Description>The data for the statistic, or "--" if none has yet been recorded for it (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetStatisticsCategoryList" Priority="0" ImageType="Method">
    <Signature>categories = GetStatisticsCategoryList()</Signature>
    <Description>Returns a list of all statistic categories</Description>
    <ReturnList Name="categories">
      <Description>A list of statistic category IDs (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSubZoneText" Priority="0" ImageType="Method">
    <Signature>subzoneText = GetSubZoneText()</Signature>
    <Description>Returns the name of the minor area in which the player is located. Subzones are named regions within a larger zone or instance: e.g. the Valley of Trials in Durotar, the Terrace of Light in Shattrath City, or the Njorn Stair in Utgarde Keep.</Description>
    <ReturnList Name="subzoneText">
      <Description>Name of the current subzone (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSuggestedGroupNum" Priority="0" ImageType="Method">
    <Signature>suggestedGroup = GetSuggestedGroupNum()</Signature>
    <Description>Returns the suggested group size for attempting the quest currently offered by a questgiver. Usable following the QUEST_DETAIL event in which the questgiver presents the player with the details of a quest and the option to accept or decline.</Description>
    <ReturnList Name="suggestedGroup">
      <Description>Suggested group size for attempting the quest currently offered by a questgiver (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSummonConfirmAreaName" Priority="0" ImageType="Method">
    <Signature>area = GetSummonConfirmAreaName()</Signature>
    <Description>Returns the destination area of an offered summons. The name returned is generally that of the subzone in which the summoner performed the spell.
Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.</Description>
    <ReturnList Name="area">
      <Description>Name of the location to which the player will be teleported upon accepting the summons (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSummonConfirmSummoner" Priority="0" ImageType="Method">
    <Signature>text = GetSummonConfirmSummoner()</Signature>
    <Description>Returns the name of the unit offering a summons to the player. Usable between when the CONFIRM_SUMMON event fires (due to a summoning spell cast by another player) and when the value returned by GetSummonConfirmTimeLeft() reaches zero.</Description>
    <ReturnList Name="text">
      <Description>Name of the summoning unit (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSummonConfirmTimeLeft" Priority="0" ImageType="Method">
    <Signature>timeleft = GetSummonConfirmTimeLeft()</Signature>
    <Description>Returns the amount of time remaining before an offered summons expires. Returns 0 if no summons is currently available.</Description>
    <ReturnList Name="timeleft">
      <Description>Time remaining until the offered summons can no longer be accepted (in seconds) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSummonFriendCooldown" Priority="0" ImageType="Method">
    <Signature>start, duration = GetSummonFriendCooldown()</Signature>
    <Description>Returns cooldown information about the player's Summon Friend ability</Description>
    <ReturnList Name="start">
      <Description>The value of GetTime() at the moment the cooldown began, or 0 if the ability is ready (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The length of the cooldown, or 0 if the ability is ready (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetSuperTrackedQuestID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTabardCreationCost" Priority="0" ImageType="Method">
    <Signature>cost = GetTabardCreationCost()</Signature>
    <Description>Returns the cost to create a guild tabard. Only returns valid data if the player is interacting with a tabard designer (i.e. between the OPEN_TABARD_FRAME and CLOSE_TABARD_FRAME events).</Description>
    <ReturnList Name="cost">
      <Description>The cost of creating a guild tabard, in copper (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTabardInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTalentClearInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTalentInfo" Priority="0" ImageType="Method">
    <Signature>name, iconTexture, tier, column, rank, maxRank, isExceptional, meetsPrereq, previewRank, meetsPreviewPrereq = GetTalentInfo(tabIndex, talentIndex, inspect, pet, talentGroup)</Signature>
    <Description>Returns information about a talent option</Description>
    <ArgumentList Name="tabIndex">
      <Description>Index of a talent tab (between 1 and GetNumTalentTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="talentIndex">
      <Description>Index of a talent option (between 1 and GetNumTalents()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="inspect">
      <Description>true to return information for the currently inspected unit; false to return information for the player (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="pet">
      <Description>true to return information for the player's pet; false to return information for the player (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="talentGroup">
      <Description>Which set of talents to edit, if the player has Dual Talent Specialization enabled (number)
1 - Primary Talents
2 - Secondary Talents
nil - Currently active talents</Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the talent (string) </Description>
    </ReturnList>
    <ReturnList Name="iconTexture">
      <Description>The icon texture of the talent. (string) </Description>
    </ReturnList>
    <ReturnList Name="tier">
      <Description>Row in which the talent should be displayed (1 = top) (number) </Description>
    </ReturnList>
    <ReturnList Name="column">
      <Description>Column in which the talent should be displayed (1 = left) (number) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Number of points spent in the talent (number) </Description>
    </ReturnList>
    <ReturnList Name="maxRank">
      <Description>Maximum number of points that can be spent in the talent (number) </Description>
    </ReturnList>
    <ReturnList Name="isExceptional">
      <Description>1 if the talent confers a new ability (spell); otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="meetsPrereq">
      <Description>1 if the prerequisites to learning the talent have been met; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="previewRank">
      <Description>Number of points spent in the talent in preview mode (number) </Description>
    </ReturnList>
    <ReturnList Name="meetsPreviewPrereq">
      <Description>1 if the prerequisites to learning the talent have been met in preview mode; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTalentLink" Priority="0" ImageType="Method">
    <Signature>link = GetTalentLink(tabIndex, talentIndex, inspect, pet, talentGroup)</Signature>
    <Description>Returns a hyperlink for a talent</Description>
    <ArgumentList Name="tabIndex">
      <Description>Index of a talent tab (between 1 and GetNumTalentTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="talentIndex">
      <Description>Index of a talent option (between 1 and GetNumTalents()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="inspect">
      <Description>true to return information for the currently inspected unit; false to return information for the player (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="pet">
      <Description>true to return information for the player's pet; false to return information for the player (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="talentGroup">
      <Description>Which set of talents to edit, if the player has Dual Talent Specialization enabled (number)
1 - Primary Talents
2 - Secondary Talents
nil - Currently active talents</Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink representing the talent and the number of points spent in it (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTalentRowSelectionInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTargetTradeCurrency" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTargetTradeMoney" Priority="0" ImageType="Method">
    <Signature>amount = GetTargetTradeMoney()</Signature>
    <Description>Returns the amount of money offered for trade by the target</Description>
    <ReturnList Name="amount">
      <Description>Amount of money offered for trade by the target (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTaxiBenchmarkMode" Priority="0" ImageType="Method">
    <Signature>isBenchmark = GetTaxiBenchmarkMode()</Signature>
    <Description>Returns whether flight path benchmark mode is enabled</Description>
    <ReturnList Name="isBenchmark">
      <Description>1 if taxi benchmark mode is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTempShapeshiftBarIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetText" Priority="0" ImageType="Method">
    <Signature>text = GetText("token" [, gender [, ordinal]])</Signature>
    <Description>Returns a localized string according to given parameters. Applies to any global variable whose name fits a standard format: for example, GetText("foo") returns the value of the global variable foo (if it exists), and GetText("foo", 3) returns the value of foo_FEMALE (or if it does not exist, the value of foo). Causes a Lua error if the given variable does not exists (or is nil).</Description>
    <ArgumentList Name="token">
      <Description>Base name of a localized string token (string) </Description>
    </ArgumentList>
    <ArgumentList Name="gender">
      <Description>Gender of the string's subject (as returned by UnitSex()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="ordinal">
      <Description>Currently unused (number) </Description>
    </ArgumentList>
    <ReturnList Name="text">
      <Description>The localized string according to the given parameters (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetThreatStatusColor" Priority="0" ImageType="Method">
    <Signature>red, green, blue = GetThreatStatusColor(status)</Signature>
    <Description>Returns color values for a given threat status. Color component values are floating point numbers between 0 and 1, with 1 representing full intensity.</Description>
    <ArgumentList Name="status">
      <Description>A threat status category, as returned by UnitThreatSituation or UnitDetailedThreatSituation (number) </Description>
    </ArgumentList>
    <ReturnList Name="red">
      <Description>Red component of the color (number) </Description>
    </ReturnList>
    <ReturnList Name="green">
      <Description>Green component of the color (number) </Description>
    </ReturnList>
    <ReturnList Name="blue">
      <Description>Blue component of the color (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTime" Priority="0" ImageType="Method">
    <Signature>time = GetTime()</Signature>
    <Description>Returns a number representing the current time (with millisecond precision). Unlike with time(), the number returned by this function has no meaning of its own and may not be comparable across clients; however, since it also provides higher resolution it can be compared against itself for high-precision time measurements.
As of patch 4.3 this function's value is cached and will not change until the next OnUpdate fires. See debugprofilestop() for an alternative.</Description>
    <ReturnList Name="time">
      <Description>A number that represents the current time in seconds (with millisecond precision) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTimeToWellRested" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTitleName" Priority="0" ImageType="Method">
    <Signature>titleName = GetTitleName(titleIndex)</Signature>
    <Description>Returns the text of an available player title</Description>
    <ArgumentList Name="titleIndex">
      <Description>Index of a title available to the player (between 1 and GetNumTitles()) (integer) </Description>
    </ArgumentList>
    <ReturnList Name="titleName">
      <Description>The text of the title (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTitleText" Priority="0" ImageType="Method">
    <Signature>text = GetTitleText()</Signature>
    <Description>Returns the title text for the quest presented by a questgiver. Only valid following the QUEST_DETAIL, QUEST_PROGRESS, or QUEST_COMPLETE events; otherwise may return nil or a value from the most recently displayed quest.</Description>
    <ReturnList Name="text">
      <Description>Title text for the quest (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetToolTipInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTotalAchievementPoints" Priority="0" ImageType="Method">
    <Signature>points = GetTotalAchievementPoints(guild)</Signature>
    <Description>Returns the player's total achievement points earned</Description>
    <ArgumentList Name="guild">
      <Description>true if you want guild score. default is false (bool) </Description>
    </ArgumentList>
    <ReturnList Name="points">
      <Description>Total number of achievement points earned by the player (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTotemInfo" Priority="0" ImageType="Method">
    <Signature>haveTotem, name, startTime, duration, icon = GetTotemInfo(slot)</Signature>
    <Description>Returns information on a currently active totem (or ghoul). Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent), and for druids' wild mushrooms.</Description>
    <ArgumentList Name="slot">
      <Description>Which totem to query (number)
1 - Fire / Mushroom #1 / Death Knight's ghoul)
2 - Earth / Mushroom #2
3 - Water / Mushroom #3
4 - Air</Description>
    </ArgumentList>
    <ReturnList Name="haveTotem">
      <Description>True if a totem of the given type is active (boolean) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the totem (string) </Description>
    </ReturnList>
    <ReturnList Name="startTime">
      <Description>The value of GetTime() when the totem was created (number) </Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>The total duration the totem will last (in seconds) (number) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to a texture to use as the totem's icon (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTotemTimeLeft" Priority="0" ImageType="Method">
    <Signature>seconds = GetTotemTimeLeft(slot)</Signature>
    <Description>Returns the time remaining before a totem (or ghoul) automatically disappears.
Using GetTime() and the third and fourth returns (startTime and duration) of GetTotemInfo() instead of this function is recommended if frequent updates are needed.
Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).</Description>
    <ArgumentList Name="slot">
      <Description>Which totem to query (number)
1 - Fire (or Death Knight's ghoul)
2 - Earth
3 - Water
4 - Air</Description>
    </ArgumentList>
    <ReturnList Name="seconds">
      <Description>Time remaining before the totem/ghoul is automatically destroyed (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrackedAchievements" Priority="0" ImageType="Method">
    <Signature>... = GetTrackedAchievements()</Signature>
    <Description>Returns numeric IDs of the achievements flagged for display in the objectives tracker UI</Description>
    <ReturnList Name="...">
      <Description>List of numeric IDs for the achievements being tracked (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrackingInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, active, category = GetTrackingInfo(index)</Signature>
    <Description>Returns information about a given tracking option</Description>
    <ArgumentList Name="index">
      <Description>Index of a tracking ability to query (between 1 and GetNumTrackingTypes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Localized name of the tracking ability (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the tracking ability (string) </Description>
    </ReturnList>
    <ReturnList Name="active">
      <Description>1 if the tracking abilty is active; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="category">
      <Description>Category of the tracking ability; used in the default UI to determine whether to strip the border from the ability's icon texture, and also indicates when the ability can be used: (string)
other - Ability is available to all players and can be used at any time
spell - Ability is a spell from the player's spellbook; using it may be subject to spell casting restrictions</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradePlayerItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, numItems, quality, isUsable, enchantment = GetTradePlayerItemInfo(index)</Signature>
    <Description>Returns information about an item offered for trade by the player</Description>
    <ArgumentList Name="index">
      <Description>Index of an item slot on the player's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of stacked items in the slot (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) level of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player character can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="enchantment">
      <Description>Name of the enchantment being applied to the item through trade; otherwise nil (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradePlayerItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetTradePlayerItemLink(index)</Signature>
    <Description>Returns a hyperlink for an item offered for trade by the player</Description>
    <ArgumentList Name="index">
      <Description>Index of an item offered for trade by the player (between 1 and MAX_TRADE_ITEMS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillCategoryFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTradeSkillCooldown" Priority="0" ImageType="Method">
    <Signature>cooldown = GetTradeSkillCooldown(index)</Signature>
    <Description>Returns the time remaining on a trade skill recipe's cooldown</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="cooldown">
      <Description>Time remaining before the recipe can be performed again (in seconds), or nil if the recipe is currently available or has no cooldown (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillDescription" Priority="0" ImageType="Method">
    <Signature>description = GetTradeSkillDescription(index)</Signature>
    <Description>Returns descriptive text for a tradeskill recipe. Most recipes that create items don't provide descriptive text; it's more often used for enchants and special recipes such as inscription or alchemy research.</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="description">
      <Description>Descriptive text for the tradeskill recipe, or nil if no text is associated with the recipe (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillIcon" Priority="0" ImageType="Method">
    <Signature>texturePath = GetTradeSkillIcon(index)</Signature>
    <Description>Returns the icon for a trade skill recipe. For recipes which create an item, this is generally the icon of the item created; for other recipes (such as enchants and alchemy/inscription research) a generic icon is used.</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="texturePath">
      <Description>Path to an icon texture for the recipe (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillInfo" Priority="0" ImageType="Method">
    <Signature>skillName, skillType, numAvailable, isExpanded, serviceType, numSkillUps = GetTradeSkillInfo(index)</Signature>
    <Description>Returns information about a trade skill header or recipe</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="skillName">
      <Description>Name of the entry (string) </Description>
    </ReturnList>
    <ReturnList Name="skillType">
      <Description>Indicates whether the entry is a header or recipe and difficulty of recipes (string)
easy - Low chance for the player to gain skill by performing the recipe (displayed as green in the default UI
header - This entry is a header and not an actual trade skill recipe
medium - Moderate chance for the player to gain skill by performing the recipe (displayed as yellow in the default UI
optimal - High chance for the player to gain skill by performing the recipe (displayed as orange in the default UI
trivial - No chance for the player to gain skill by performing the recipe (displayed as gray in the default UI</Description>
    </ReturnList>
    <ReturnList Name="numAvailable">
      <Description>Number of times the player can repeat the recipe given available reagents (number) </Description>
    </ReturnList>
    <ReturnList Name="isExpanded">
      <Description>1 if the entry is a header and is expanded; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="serviceType">
      <Description>Indicates what type of service the recipe provides (items, enhancements,...) (string)
Emboss - Applies an emboss (letherworkers)
Embrodier - Applies an embroider (tailors)
Enchant - Applies an enchant (enchanters)
Engrave - Engraves a rune (runeforging)
Inscribe - Puts an inscription (scribers)
Modify - Puts a socket (blacksmiths)
Tinker - Puts a device like webbing or flexweave (engineers)
nil - Produces an item</Description>
    </ReturnList>
    <ReturnList Name="numSkillUps">
      <Description>Returns the number of skill-ups obtained when crafting this recipe. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillInvSlotFilter" Priority="0" ImageType="Method">
    <Signature>enabled = GetTradeSkillInvSlotFilter(index)</Signature>
    <Description>Returns whether the trade skill listing is filtered by a given item equipment slot</Description>
    <ArgumentList Name="index">
      <Description>Index of an item equipment slot (in the list returned by GetTradeSkillInvSlots()), or 0 for the "All" filter (number) </Description>
    </ArgumentList>
    <ReturnList Name="enabled">
      <Description>1 if the filter is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillInvSlots" Priority="0" ImageType="Method">
    <Signature>... = GetTradeSkillInvSlots()</Signature>
    <Description>Returns a list of recipe equipment slots for the current trade skill. These inventory types correspond to those of the items produced (see GetItemInfo() and GetAuctionItemInvTypes()) and can be used to filter the recipe list.</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of an inventory type applicable to the current trade skill listing (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillItemLevelFilter" Priority="0" ImageType="Method">
    <Signature>minLevel, maxLevel = GetTradeSkillItemLevelFilter()</Signature>
    <Description>Returns the current settings for filtering the trade skill listing by required level of items produced</Description>
    <ReturnList Name="minLevel">
      <Description>Lowest required level of items to show in the filtered list (number) </Description>
    </ReturnList>
    <ReturnList Name="maxLevel">
      <Description>Highest required level of items to show in the filtered list (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetTradeSkillItemLink(index)</Signature>
    <Description>Returns a hyperlink for the item created by a tradeskill recipe. The tooltip produced when resolving the link describes only the item created by the recipe. For a link which describes the recipe itself (its reagents and description), see GetTradeSkillRecipeLink().
If the recipe does not create an item, this function returns the same hyperlink as does GetTradeSkillRecipeLink() (though the text of the link may differ).</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item created by the recipe (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillItemNameFilter" Priority="0" ImageType="Method">
    <Signature>text = GetTradeSkillItemNameFilter()</Signature>
    <Description>Returns the current search text for filtering the trade skill listing by name</Description>
    <ReturnList Name="text">
      <Description>Text to search for in recipe names, produced item names or descriptions, or reagents; nil if no search filter is in use (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillLine" Priority="0" ImageType="Method">
    <Signature>tradeskillName, rank, maxLevel = GetTradeSkillLine()</Signature>
    <Description>Returns information about the current trade skill</Description>
    <ReturnList Name="tradeskillName">
      <Description>Name of the trade skill, or "UNKNOWN" if no trade skill window is open (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>The character's current rank in the trade skill (number) </Description>
    </ReturnList>
    <ReturnList Name="maxLevel">
      <Description>The character's current maximum rank in the trade skill (e.g. 300 for a character of Artisan status) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillListLink" Priority="0" ImageType="Method">
    <Signature>link = GetTradeSkillListLink()</Signature>
    <Description>Returns a hyperlink to the player's list of recipes for the current trade skill</Description>
    <ReturnList Name="link">
      <Description>A hyperlink other players can resolve to see the player's full list of tradeskill recipes (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillNumMade" Priority="0" ImageType="Method">
    <Signature>minMade, maxMade = GetTradeSkillNumMade(index)</Signature>
    <Description>Returns the number of items created when performing a tradeskill recipe</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="minMade">
      <Description>Minimum number of items created when performing the recipe (number) </Description>
    </ReturnList>
    <ReturnList Name="maxMade">
      <Description>Maximum number of items created when performing the recipe (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillNumReagents" Priority="0" ImageType="Method">
    <Signature>numReagents = GetTradeSkillNumReagents(index)</Signature>
    <Description>Returns the number of different reagents required for a trade skill recipe</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="numReagents">
      <Description>Number of different reagents required for the recipe (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillReagentInfo" Priority="0" ImageType="Method">
    <Signature>reagentName, reagentTexture, reagentCount, playerReagentCount = GetTradeSkillReagentInfo(skillIndex, reagentIndex)</Signature>
    <Description>Returns information about a reagent in a trade skill recipe</Description>
    <ArgumentList Name="skillIndex">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="reagentIndex">
      <Description>Index of a reagent in the recipe (between 1 and GetTradeSkillNumReagents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="reagentName">
      <Description>Name of the reagent (string) </Description>
    </ReturnList>
    <ReturnList Name="reagentTexture">
      <Description>Path to an icon texture for the reagent (string) </Description>
    </ReturnList>
    <ReturnList Name="reagentCount">
      <Description>Quantity of the reagent required to perform the recipe (number) </Description>
    </ReturnList>
    <ReturnList Name="playerReagentCount">
      <Description>Quantity of the reagent in the player's possession (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillReagentItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetTradeSkillReagentItemLink(skillIndex, reagentIndex)</Signature>
    <Description>Returns a hyperlink for a reagent in a tradeskill recipe</Description>
    <ArgumentList Name="skillIndex">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="reagentIndex">
      <Description>Index of a reagent in the recipe (between 1 and GetTradeSkillNumReagents()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the reagent item (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillRecipeLink" Priority="0" ImageType="Method">
    <Signature>link = GetTradeSkillRecipeLink(index)</Signature>
    <Description>Returns hyperlink for a tradeskill recipe. The tooltip produced when resolving the link describes the recipe itself -- its reagents and (if present) description -- in addition to (if applicable) the item created. For a link which only describes the created item, see GetTradeSkillItemLink().</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the trade skill recipe (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillSelectionIndex" Priority="0" ImageType="Method">
    <Signature>index = GetTradeSkillSelectionIndex()</Signature>
    <Description>Returns the index of the currently selected trade skill recipe. Selection in the recipe list is used only for display in the default UI and has no effect on other Trade Skill APIs.</Description>
    <ReturnList Name="index">
      <Description>Index of the selected recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillSubCategories" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTradeSkillSubClassFilteredSlots" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTradeSkillSubClasses" Priority="0" ImageType="Method">
    <Signature>... = GetTradeSkillSubClasses()</Signature>
    <Description>Returns a list of recipe subclasses for the current trade skill. These subclasses correspond to those of the items produced (see GetItemInfo() and GetAuctionItemSubClasses()) and can be used to filter the recipe list.</Description>
    <ReturnList Name="...">
      <Description>A list of strings, each the localized name of an item or recipe subclass applicable to the current trade skill listing (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeSkillTexture" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTradeSkillTools" Priority="0" ImageType="Method">
    <Signature>toolName, hasTool, ... = GetTradeSkillTools(index)</Signature>
    <Description>Returns a list of required tools for a trade skill recipe. A tool may be an item (e.g. Blacksmith Hammer, Virtuoso Inking Set) the player must possess, or a description of a generic (e.g. near an Anvil, in a Moonwell) or specific (e.g. Netherstorm, Emerald Dragonshrine) location to which the player must travel in order to perform the recipe. The hasTool return is only valid for the former.</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="toolName">
      <Description>Name of the required tool (string) </Description>
    </ReturnList>
    <ReturnList Name="hasTool">
      <Description>1 if the tool is an item in the player's possession; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>An additional toolName, hasTool pair for each tool required (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeTargetItemInfo" Priority="0" ImageType="Method">
    <Signature>name, texture, numItems, quality, isUsable, enchantment = GetTradeTargetItemInfo(index)</Signature>
    <Description>Returns information about an item offered for trade by the target</Description>
    <ArgumentList Name="index">
      <Description>Index of an item slot on the player's side of the trade window (between 1 and MAX_TRADE_ITEMS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the item (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the item (string) </Description>
    </ReturnList>
    <ReturnList Name="numItems">
      <Description>Number of stacked items in the slot (number) </Description>
    </ReturnList>
    <ReturnList Name="quality">
      <Description>Quality (rarity) level of the item (number, itemQuality) </Description>
    </ReturnList>
    <ReturnList Name="isUsable">
      <Description>1 if the player character can use or equip the item; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="enchantment">
      <Description>Name of the enchantment being applied to the item through trade; otherwise nil (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTradeTargetItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetTradeTargetItemLink(index)</Signature>
    <Description>Returns a hyperlink for an item offered for trade by the target</Description>
    <ArgumentList Name="index">
      <Description>Index of an item offered for trade by the target (between 1 and MAX_TRADE_ITEMS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GetTradeskillRepeatCount" Priority="0" ImageType="Method">
    <Signature>repeatCount = GetTradeskillRepeatCount()</Signature>
    <Description>Returns the number of times the trade skill recipe currently being performed will repeat. Returns 1 if a recipe is not being performed; after DoTradeSkill() is called, returns the number of repetitions queued (which decrements as each repetition is finished).</Description>
    <ReturnList Name="repeatCount">
      <Description>Number of times the current recipe will repeat (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerGreetingText" Priority="0" ImageType="Method">
    <Signature>text = GetTrainerGreetingText()</Signature>
    <Description>Returns the current trainer's greeting text. In the default UI, this text is displayed at the top of the trainer window.
May return the empty string or the last used trainer's greeting text if called while not interacting with a trainer.</Description>
    <ReturnList Name="text">
      <Description>Greeting text for the trainer with whom the player is currently interacting (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerSelectionIndex" Priority="0" ImageType="Method">
    <Signature>selectionIndex = GetTrainerSelectionIndex()</Signature>
    <Description>Returns the index of the currently selected trainer service. Selection in the recipe list is used only for display in the default UI and has no effect on other Trade Skill APIs.</Description>
    <ReturnList Name="selectionIndex">
      <Description>Index of the selected entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceAbilityReq" Priority="0" ImageType="Method">
    <Signature>ability, hasReq = GetTrainerServiceAbilityReq(index, abilityIndex)</Signature>
    <Description>Returns information about an ability required for purchasing a trainer service</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="abilityIndex">
      <Description>Index of one of the service's ability requirements (between 1 and GetTrainerServiceNumAbilityReq(index)) (number) </Description>
    </ArgumentList>
    <ReturnList Name="ability">
      <Description>Name of the required ability (string) </Description>
    </ReturnList>
    <ReturnList Name="hasReq">
      <Description>1 if the player has the required ability; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceCost" Priority="0" ImageType="Method">
    <Signature>moneyCost, talentCost, skillCost = GetTrainerServiceCost(index)</Signature>
    <Description>Returns the cost to purchase a trainer service</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="moneyCost">
      <Description>Amount of money required to purchase the service (in copper) (number) </Description>
    </ReturnList>
    <ReturnList Name="talentCost">
      <Description>Number of talent points required to purchase the service (generally unused) (number) </Description>
    </ReturnList>
    <ReturnList Name="skillCost">
      <Description>1 if purchasing the service counts against the player's limit of learnable professions; otherwise 0 (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceDescription" Priority="0" ImageType="Method">
    <Signature>text = GetTrainerServiceDescription(index)</Signature>
    <Description>Returns the description of a trainer service. Generally returns the same description found in the spell's tooltip for spells purchased from a class trainer; returns nil for trade skills and recipes.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="text">
      <Description>Description of the service (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceIcon" Priority="0" ImageType="Method">
    <Signature>icon = GetTrainerServiceIcon(index)</Signature>
    <Description>Returns the icon for a trainer service</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the service (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTrainerServiceItemLink" Priority="0" ImageType="Method">
    <Signature>link = GetTrainerServiceItemLink(index)</Signature>
    <Description>Returns a hyperlink for the item associated with a trainer service. Currently only returns item links for trainer services which teach trade skill recipes which produce items; does not return spell or recipe links.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="link">
      <Description>A hyperlink for the item associated with a trainer service (string, hyperlink) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceLevelReq" Priority="0" ImageType="Method">
    <Signature>reqLevel = GetTrainerServiceLevelReq(index)</Signature>
    <Description>Returns the character level required to purchase a trainer service</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="reqLevel">
      <Description>Level required to purchase the service, or nil if the service has no level requirement (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceNumAbilityReq" Priority="0" ImageType="Method">
    <Signature>numRequirements = GetTrainerServiceNumAbilityReq(index)</Signature>
    <Description>Returns the number of ability requirements for purchasing a trainer service. Ability requirements are often used for ranked class spells purchased from the trainer: e.g. learning Blood Strike (Rank 3) requires having learned Blood Strike (Rank 2). See GetTrainerServiceAbilityReq() for information about specific ability requirements.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="numRequirements">
      <Description>Number of different ability requirements for the trainer service (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceSkillLine" Priority="0" ImageType="Method">
    <Signature>skillLine = GetTrainerServiceSkillLine(index)</Signature>
    <Description>Returns the name of the skill line associated with a trainer service. For trade skill trainers, skill line is the name of the trade skill (e.g. Tailoring, First Aid). For other trainers, skill line is the name of the group header under which the skill appears (e.g. Riding, Frost, Protection, Holy, Defense, Dual Wield).</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="skillLine">
      <Description>Name of the skill line associated with the service (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceSkillReq" Priority="0" ImageType="Method">
    <Signature>skill, rank, hasReq = GetTrainerServiceSkillReq(index)</Signature>
    <Description>Returns information about the skill requirement for a trainer service. Often used for trade skill recipes: e.g. Netherweave Bag requires Tailoring (315).</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="skill">
      <Description>Name of the required skill (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Rank required in the skill (number) </Description>
    </ReturnList>
    <ReturnList Name="hasReq">
      <Description>1 if the player has the required skill and rank; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerServiceStepIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTrainerServiceTypeFilter" Priority="0" ImageType="Method">
    <Signature>isEnabled = GetTrainerServiceTypeFilter("type")</Signature>
    <Description>Returns whether the trainer service listing is filtered by a service status</Description>
    <ArgumentList Name="type">
      <Description>A trainer service status (string)
available - Services the player can use
unavailable - Services the player cannot currently use
used - Services the player has already used</Description>
    </ArgumentList>
    <ReturnList Name="isEnabled">
      <Description>1 if services matching the filter type are shown in the listing; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetTrainerTradeskillRankValues" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTransmogrifyCost" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetTransmogrifySlotInfo" Priority="0" ImageType="Method">
    <Signature>isTransmogrified, canTransmogrify, cannotTransmogrifyReason, hasPending, hasUndo, visibleItemID, textureName = GetTransmogrifySlotInfo(slot)</Signature>
    <Description>Return informations about transmogrified items worn by player.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, slotID) </Description>
    </ArgumentList>
    <ReturnList Name="isTransmogrified">
      <Description>Return true when item is transmogrified. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="canTransmogrify">
      <Description>Return true if item can be transmogrified. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="cannotTransmogrifyReason">
      <Description>If canTransmogrify return false this variable will contain error code. Look for TRANSMOGRIFYINVALIDREASON global inside GlobalStrings.lua for more details. (number) </Description>
    </ReturnList>
    <ReturnList Name="hasPending">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="hasUndo">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="visibleItemID">
      <Description>ItemID of the item used for transmogrification. (itemID) </Description>
    </ReturnList>
    <ReturnList Name="textureName">
      <Description>Texture of item used for transmogrification. (textureName) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetUnitHealthModifier" Priority="0" ImageType="Method">
    <Signature>modifier = GetUnitHealthModifier("unit")</Signature>
    <Description>Returns the health modifier for the player's pet</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="modifier">
      <Description>Factor modifying the unit's health value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetUnitManaRegenRateFromSpirit" Priority="0" ImageType="Method">
    <Signature>regen = GetUnitManaRegenRateFromSpirit("unit")</Signature>
    <Description>Returns the increase in mana regeneration rate provided by Spirit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="regen">
      <Description>Increase in inactive (non-casting) mana regeneration per second provided by Spirit (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetUnitMaxHealthModifier" Priority="0" ImageType="Method">
    <Signature>modifier = GetUnitMaxHealthModifier("unit")</Signature>
    <Description>Returns the maximum health modifier for the player's pet</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="modifier">
      <Description>Factor modifying the unit's maximum health value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetUnitName" Priority="0" ImageType="Method">
    <Signature>nameString = GetUnitName("unit", showServerName)</Signature>
    <Description>Returns a string summarizing a unit's name and server</Description>
    <ArgumentList Name="unit">
      <Description>Unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="showServerName">
      <Description>True to include the server name in the return value if the unit is not from the same server as the player; false to only include a short label in such circumstances (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="nameString">
      <Description>The unit's name, possibly followed by the name of the unit's home server or a label indicating the unit is not from the player's server (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetUnitPitch" Priority="0" ImageType="Method">
    <Signature>pitch = GetUnitPitch("unit")</Signature>
    <Description>Returns the player's current pitch (slope or angle of movement). Only valid for the unitID "player". The slope returned here reflects only the direction of movement for swimming or flying, not the current orientation of the player model or camera. (When on solid ground, GetUnitPitch indicates what the angle of flight would be were the player to start flying.)
The returned value is in radians, with positive values indicating upward slope, negative values indicating downward slope, and 0 indicating perfectly level flight (or swimming).</Description>
    <ArgumentList Name="unit">
      <Description>Unit to query; only valid for player (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="pitch">
      <Description>Unit's slope of movement in radians (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetUnitPowerModifier" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetUnitSpeed" Priority="0" ImageType="Method">
    <Signature>speed, groundSpeed, flightSpeed, swimSpeed = GetUnitSpeed(unit)</Signature>
    <Description>Returns a unit's current speed. Valid for all observable units. Values returned indicate the current movement speed in yards per second. (It's not relative to facing or ground position; i.e. you won't see a smaller value when flying up at an angle or a negative value when backing up.) Does not indicate falling speed or the speed of boats, zeppelins, and some forms of quest-related transportation, but does indicate current speed on taxi flights and when moving due to combat effects such as Disengage, Death Grip, or various knockback abilities.
Examples (actual results will vary based on terrain, pitch, etc.):
Walking: 2.5
Running backwards: 4.5
Normal Running: 7
Ground Mount, 60% speed (Apprentice): 11.2
Ground Mount, 100% speed (Journeyman): 14
Flying Mount, 150% speed (Expert): 17.5
Flying Mount, 280% speed (Artisan): 26.6
Flying Mount, 310% speed (Master): 28.7 </Description>
    <ArgumentList Name="unit">
      <Description>Unit to query (unitid) </Description>
    </ArgumentList>
    <ReturnList Name="speed">
      <Description>Unit's current speed in yards per second (number) </Description>
    </ReturnList>
    <ReturnList Name="groundSpeed">
      <Description>Unit's maximum possible ground speed with current buffs (number) </Description>
    </ReturnList>
    <ReturnList Name="flightSpeed">
      <Description>Unit's maximum possible flight speed with current buffs (number) </Description>
    </ReturnList>
    <ReturnList Name="swimSpeed">
      <Description>Unit's maximum possible swim speed with current buffs (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetVehicleBarIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVehicleUIIndicator" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVehicleUIIndicatorSeat" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVideoCaps" Priority="0" ImageType="Method">
    <Signature>hasAnisotropic, hasPixelShaders, hasVertexShaders, hasTrilinear, hasTripleBufering, maxAnisotropy, hasHardwareCursor = GetVideoCaps()</Signature>
    <Description>Returns information about graphics capabilities of the current system</Description>
    <ReturnList Name="hasAnisotropic">
      <Description>1 if anisotropic filtering is available; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="hasPixelShaders">
      <Description>1 if pixel shaders are available; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="hasVertexShaders">
      <Description>1 if vertex shaders are available; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="hasTrilinear">
      <Description>1 if trilinear filtering is available; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="hasTripleBufering">
      <Description>1 if triple buffering is available; otherwise 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="maxAnisotropy">
      <Description>Number of available settings for anisotropic filtering (corresponds to the "Texture Filtering" slider in the default UI) (number) </Description>
    </ReturnList>
    <ReturnList Name="hasHardwareCursor">
      <Description>1 if hardware cursor support is available; otherwise 0 (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetVideoOptions" Priority="0" ImageType="Method">
    <Signature>name, value, ... = GetVideoOptions(qualityLevel)</Signature>
    <Description>Returns video options for different video quality levels. Values greater than 5 will crash the game client.</Description>
    <ArgumentList Name="qualityLevel">
      <Description>Quality level to query for (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>The name of the video option (string) </Description>
    </ReturnList>
    <ReturnList Name="value">
      <Description>The value of the option for the given quality set (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>List of option names and values (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetVoiceCurrentSessionID" Priority="0" ImageType="Method">
    <Signature>id = GetVoiceCurrentSessionID()</Signature>
    <Description>Returns an identifier for the active voice session</Description>
    <ReturnList Name="id">
      <Description>Index of the active voice session (between 1 and GetNumVoiceSessions()), or nil if no session is active (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetVoiceSessionInfo" Priority="0" ImageType="Method">
    <Signature>name, active = GetVoiceSessionInfo(session)</Signature>
    <Description>Returns information about a voice session</Description>
    <ArgumentList Name="session">
      <Description>Index of a voice session (between 1 and GetNumVoiceSessions()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the voice session (channel) (string) </Description>
    </ReturnList>
    <ReturnList Name="active">
      <Description>1 if the session is the active voice channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetVoiceSessionMemberInfoBySessionID" Priority="0" ImageType="Method">
    <Signature>name, voiceActive, sessionActive, muted, squelched = GetVoiceSessionMemberInfoBySessionID(session, index)</Signature>
    <Description>Returns information about a member of a voice channel</Description>
    <ArgumentList Name="session">
      <Description>Index of a voice session (between 1 and GetNumVoiceSessions()) (number) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="GetVoiceStatus" Priority="0" ImageType="Method">
    <Signature>status = GetVoiceStatus(unit, "channel") or GetVoiceStatus("name", "channel")</Signature>
    <Description>Returns whether a character has voice chat enabled</Description>
    <ArgumentList Name="unit">
      <Description>The unitid to query (unitid) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of the player to query (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>Channel to query for voice status. (string) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>1 if voice is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetVoidItemHyperlinkString" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVoidItemInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVoidTransferCost" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVoidTransferDepositInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVoidTransferWithdrawalInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetVoidUnlockCost" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWarGameQueueStatus" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWarGameTypeInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWatchedFactionInfo" Priority="0" ImageType="Method">
    <Signature>name, standingID, barMin, barMax, barValue = GetWatchedFactionInfo()</Signature>
    <Description>Returns information about the "watched" faction (displayed on the XP bar in the default UI)</Description>
    <ReturnList Name="name">
      <Description>Name of the faction being watched (string) </Description>
    </ReturnList>
    <ReturnList Name="standingID">
      <Description>The player's current standing with the faction (number, standingID)
1 - Hated
2 - Hostile
3 - Unfriendly
4 - Neutral
5 - Friendly
6 - Honored
7 - Revered
8 - Exalted</Description>
    </ReturnList>
    <ReturnList Name="barMin">
      <Description>The minimum value for the faction status bar (number) </Description>
    </ReturnList>
    <ReturnList Name="barMax">
      <Description>The maximum value for the faction status bar (number) </Description>
    </ReturnList>
    <ReturnList Name="barValue">
      <Description>The current value for the faction status bar (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetWeaponEnchantInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWhoInfo" Priority="0" ImageType="Method">
    <Signature>name, guild, level, race, class, zone, classFileName, sex = GetWhoInfo(index)</Signature>
    <Description>Returns information about a character in the Who system query results</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the Who system query results (between 1 and GetNumWhoResults()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the character (string) </Description>
    </ReturnList>
    <ReturnList Name="guild">
      <Description>Name of the character's guild (string) </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>Level of the character (number) </Description>
    </ReturnList>
    <ReturnList Name="race">
      <Description>Localized name of the character's race (string) </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>Localized name of the character's class (string) </Description>
    </ReturnList>
    <ReturnList Name="zone">
      <Description>Name of the zone in which the character was located when the query was performed (string) </Description>
    </ReturnList>
    <ReturnList Name="classFileName">
      <Description>A non-localized token representing the character's class (string) </Description>
    </ReturnList>
    <ReturnList Name="sex">
      <Description>An integer indicating the player's sex (number)
2 - male
3 - female</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetWorldEffectTextureCoords" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWorldElapsedTime" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWorldElapsedTimers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWorldLocFromMapPos" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWorldMapTransformInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWorldMapTransforms" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GetWorldPVPAreaInfo" Priority="0" ImageType="Method">
    <Signature>pvpID, localizedName, isActive, canQueue, waitTime, canEnter = GetWorldPVPAreaInfo(pvpMapID)</Signature>
    <Description>Returns information about a given world PvP zone</Description>
    <ArgumentList Name="pvpMapID">
      <Description>A numeric identifier representing a world PvP zone (number)
1 - Wintergrasp
2 - Tol Barad</Description>
    </ArgumentList>
    <ReturnList Name="pvpID">
      <Description>The PvP queue ID for the specified World PvP area (number) </Description>
    </ReturnList>
    <ReturnList Name="localizedName">
      <Description>The localized name for the specified World PvP area (string) </Description>
    </ReturnList>
    <ReturnList Name="isActive">
      <Description>Whether there is currently a battle in the specified World PvP area (boolean) </Description>
    </ReturnList>
    <ReturnList Name="canQueue">
      <Description>Whether queueing for the specified World PvP area is currently available (15 minutes before the battle starts for WG/TB) (boolean) </Description>
    </ReturnList>
    <ReturnList Name="waitTime">
      <Description>The number of seconds until the next battle in the specified World PvP area starts (number) </Description>
    </ReturnList>
    <ReturnList Name="canEnter">
      <Description>Whether the player has the required level to be eligible for the specified World PvP area [unconfirmed] (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetWorldPVPQueueStatus" Priority="0" ImageType="Method">
    <Signature>status, mapName, queueID = GetWorldPVPQueueStatus(index)</Signature>
    <Description>Returns information on the players queue for a world PvP zone</Description>
    <ArgumentList Name="index">
      <Description>Index of the queue to get data for (between 1 and MAX_WORLD_PVP_QUEUES) (number) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>Returns the status of the players queue (string)
confirm - The player can enter the pvp zone
none - No world pvp queue at this index
queued - The player is queued for this pvp zone</Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="GetWorldStateUIInfo" Priority="0" ImageType="Method">
    <Signature>uiType, state, hidden, text, icon, dynamicIcon, tooltip, dynamicTooltip, extendedUI, extendedUIState1, extendedUIState2, extendedUIState3 = GetWorldStateUIInfo(index)</Signature>
    <Description>Returns information about a world state UI element. World State UI elements include PvP, instance, and quest objective information (displayed at the top center of the screen in the default UI) as well as more specific information for "control point" style PvP objectives. Examples: the Horde/Alliance score in Arathi Basin, the tower status and capture progress bars in Hellfire Peninsula, the progress text in the Black Morass and Violet Hold instances, and the event status text for quests The Light of Dawn and The Battle For The Undercity.</Description>
    <ArgumentList Name="index">
      <Description>Index of a world state UI element (between 1 and GetNumWorldStateUI()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="uiType">
      <Description>1 if the element should be conditionally displayed (based on the state of the "Show World PvP Objectives" setting and the player's location); any other value if the element is always displayed (number) </Description>
    </ReturnList>
    <ReturnList Name="state">
      <Description>State of the element: 0 always indicates the element should be hidden; other possible states vary by context (e.g. in Warsong Gulch, state 2 indicates the team holds the enemy flag) (number) </Description>
    </ReturnList>
    <ReturnList Name="hidden">
      <Description>? (boolean) </Description>
    </ReturnList>
    <ReturnList Name="text">
      <Description>Text to be displayed for the element (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to a texture for the element's main icon (usually describing the element itself: e.g. a Horde or Alliance icon for elements displaying a battleground score) (string) </Description>
    </ReturnList>
    <ReturnList Name="dynamicIcon">
      <Description>Path to a texture for a secondary icon (usually describing transient status: e.g. a flag icon in Warsong Gulch) (string) </Description>
    </ReturnList>
    <ReturnList Name="tooltip">
      <Description>Text to be displayed when mousing over the UI element (string) </Description>
    </ReturnList>
    <ReturnList Name="dynamicTooltip">
      <Description>Text to be displayed when mousing over the element's dynamicIcon (string) </Description>
    </ReturnList>
    <ReturnList Name="extendedUI">
      <Description>Identifies the type of additional UI elements to display if applicable (string)
"" - No additional UI should be displayed
"CAPTUREPOINT" - A capture progress bar should be displayed for the element</Description>
    </ReturnList>
    <ReturnList Name="extendedUIState1">
      <Description>Index of the capture progress bar corresponding to the element (number) </Description>
    </ReturnList>
    <ReturnList Name="extendedUIState2">
      <Description>Position of the capture bar (0 = left/Horde edge, 100 = right/Alliance edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="extendedUIState3">
      <Description>Width of the neutral section of the capture bar: e.g. if 50, the extendedUIState2 values 0-25 correspond to Horde ownership of the objective, values 76-100 to Alliance ownership, and values 26-75 to no ownership (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetXPExhaustion" Priority="0" ImageType="Method">
    <Signature>exhaustionXP = GetXPExhaustion()</Signature>
    <Description>Returns the amount of rested bonus experience available. This value increments as the player spends time resting and depletes as the player earns experience from kills while rested.</Description>
    <ReturnList Name="exhaustionXP">
      <Description>The amount of rested bonus experience available (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetZonePVPInfo" Priority="0" ImageType="Method">
    <Signature>pvpType, isSubZonePVP, factionName = GetZonePVPInfo()</Signature>
    <Description>Returns PVP information about the current area. Information returned may apply to the current subzone, not the entire zone.</Description>
    <ReturnList Name="pvpType">
      <Description>PvP status for the area (string)
arena - Arena or outdoor free-for-all area (e.g. Gurubashi Arena)
combat - Combat zone (e.g. Wintergrasp)
contested - Horde/Alliance PvP is enabled for all players
friendly - Zone is controlled by the player's faction; PvP status is optional for the player but mandatory for enemy players
hostile - Zone is controlled by the enemy's faction; PvP status is optional for the enemy but mandatory for the player
nil - PvP status is not automatically enabled for either faction (used for "contested" zones on Normal servers)
sanctuary - PvP activity is not allowed (e.g. Dalaran)</Description>
    </ReturnList>
    <ReturnList Name="isSubZonePVP">
      <Description>1 if the current area allows free-for-all PVP; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="factionName">
      <Description>Name of the faction that controls the zone (only applies if pvpType is friendly or hostile) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GetZoneText" Priority="0" ImageType="Method">
    <Signature>zone = GetZoneText()</Signature>
    <Description>Returns the name of the zone in which the player is located</Description>
    <ReturnList Name="zone">
      <Description>Name of the current zone (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GiveMasterLoot" Priority="0" ImageType="Method">
    <Signature>GiveMasterLoot(slot, index)</Signature>
    <Description>Awards a loot item to a group member. Has no effect if the player is not the loot master or if no loot or candidate matching the given parameters exists.</Description>
    <ArgumentList Name="slot">
      <Description>Index of a loot slot (between 1 and GetNumLootItems()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a loot candidate (see GetMasterLootCandidate()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GlyphMatchesSocket" Priority="0" ImageType="Method">
    <Signature>match = GlyphMatchesSocket(socket)</Signature>
    <Description>Returns whether a socket is eligible for the glyph currently awaiting a target.
Only valid during glyph application: when the player has activated the glyph item but before she has chosen the glyph slot to put it in (i.e. the glowing hand cursor is showing).</Description>
    <ArgumentList Name="socket">
      <Description>Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex) </Description>
    </ArgumentList>
    <ReturnList Name="match">
      <Description>1 if the glyph awaiting a target fits the given socket; nil if it doesn't fit or if no glyph is awaiting a target (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GrantLevel" Priority="0" ImageType="Method">
    <Signature>GrantLevel("unit")</Signature>
    <Description>Grants a level to the player's Recruit-a-Friend partner. Does not immediately cause the partner character to level up: that player is given a chance to accept or decline the offered level.</Description>
    <ArgumentList Name="unit">
      <Description>Unit to gift a level (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildControlAddRank" Priority="0" ImageType="Method">
    <Signature>GuildControlAddRank("name")</Signature>
    <Description>Adds a new rank to the player's guild. The newly added rank becomes the lowest rank in the guild.</Description>
    <ArgumentList Name="name">
      <Description>Name of the new rank (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildControlDelRank" Priority="0" ImageType="Method">
    <Signature>GuildControlDelRank("name")</Signature>
    <Description>Deletes a guild rank</Description>
    <ArgumentList Name="name">
      <Description>Name of the rank to delete (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildControlGetAllowedShifts" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildControlGetNumRanks" Priority="0" ImageType="Method">
    <Signature>numRanks = GuildControlGetNumRanks()</Signature>
    <Description>Returns the number of ranks in the guild</Description>
    <ReturnList Name="numRanks">
      <Description>Number of guild ranks (including Guild Leader) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GuildControlGetRankFlags" Priority="0" ImageType="Method">
    <Signature>... = GuildControlGetRankFlags()</Signature>
    <Description>Returns the list of privileges for the guild rank being edited. The name of a privilege for an index in this list can be found in the global variable "GUILDCONTROL_OPTION"..index.</Description>
    <ReturnList Name="...">
      <Description>A list of privilege flags (1 = privilege allowed, nil = privilege denied) for the rank being edited (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GuildControlGetRankName" Priority="0" ImageType="Method">
    <Signature>rankName = GuildControlGetRankName(rank)</Signature>
    <Description>Returns the name of a guild rank</Description>
    <ArgumentList Name="rank">
      <Description>Index of a rank to edit (between 1 and GuildControlGetNumRanks()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="rankName">
      <Description>Name of the guild rank (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="GuildControlSaveRank" Priority="0" ImageType="Method">
    <Signature>GuildControlSaveRank("name")</Signature>
    <Description>Saves changes to the guild rank being edited</Description>
    <ArgumentList Name="name">
      <Description>New name for the guild rank (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildControlSetRank" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildControlSetRankFlag" Priority="0" ImageType="Method">
    <Signature>GuildControlSetRankFlag(index, enabled)</Signature>
    <Description>Enables or disables a privilege for the guild rank being edited. Changes are not saved until a call is made to GuildControlSaveRank(). </Description>
    <ArgumentList Name="index">
      <Description>Index of a privilege to change (number)
1 - Guildchat listen
2 - Guildchat speak
3 - Officerchat listen
4 - Officerchat speak
5 - Promote
6 - Demote
7 - Invite Member
8 - Remove Member
9 - Set MOTD
10 - Edit Public Notes
11 - View Officer Note
12 - Edit Officer Note
13 - Modify Guild Info
15 - Use guild funds for repairs
16 - Withdraw gold from the guild bank
17 - Create Guild Event</Description>
    </ArgumentList>
    <ArgumentList Name="enabled">
      <Description>True to allow the privilege; false to deny (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildControlShiftRankDown" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildControlShiftRankUp" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildDemote" Priority="0" ImageType="Method">
    <Signature>GuildDemote("name")</Signature>
    <Description>Reduces a guild member's rank by one. The player can only demote members whose rank is below the player's own, and only if the player has permission to demote (i.e. if CanGuildDemote() returns 1).</Description>
    <ArgumentList Name="name">
      <Description>Name of a guild member to demote (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildDisband" Priority="0" ImageType="Method">
    <Signature>GuildDisband()</Signature>
    <Description>Disbands the player's guild. Only has effect if the player is the guild leader</Description>
  </WowApi>
  <WowApi Name="GuildInfo" Priority="0" ImageType="Method">
    <Signature>GuildInfo()</Signature>
    <Description>Requests guild information from the server. Fires two CHAT_MSG_SYSTEM events, one containing the name of the guild, followed by one containing the date the guild was created and how many players and accounts belong to the guild.</Description>
  </WowApi>
  <WowApi Name="GuildInvite" Priority="0" ImageType="Method">
    <Signature>GuildInvite("name")</Signature>
    <Description>Invites a character to join the player's guild</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to invite (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildLeave" Priority="0" ImageType="Method">
    <Signature>GuildLeave()</Signature>
    <Description>Leaves the player's current guild</Description>
  </WowApi>
  <WowApi Name="GuildMasterAbsent" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildNewsSetSticky" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildNewsSort" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildPromote" Priority="0" ImageType="Method">
    <Signature>GuildPromote("name")</Signature>
    <Description>Increases a guild member's rank by one. The player can only promote members up to the rank immediately below the player's own, and only if the player has permission to promote (i.e. if CanGuildPromote() returns 1).</Description>
    <ArgumentList Name="name">
      <Description>Name of a guild member to promote (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildRoster" Priority="0" ImageType="Method">
    <Signature>GuildRoster()</Signature>
    <Description>Requests guild roster information from the server. Information is not returned immediately; the GUILD_ROSTER_UPDATE event fires when data is available for retrieval via GetGuildRosterInfo() and related functions. Requests are throttled to reduce server load; the server will only respond to a new request approximately 10 seconds after a previous request.</Description>
  </WowApi>
  <WowApi Name="GuildRosterSendSoR" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildRosterSetOfficerNote" Priority="0" ImageType="Method">
    <Signature>GuildRosterSetOfficerNote(index, "note")</Signature>
    <Description>Sets the officer note for a guild member</Description>
    <ArgumentList Name="index">
      <Description>Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ArgumentList>
    <ArgumentList Name="note">
      <Description>Note text to set for the guild member (up to 31 characters) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildRosterSetPublicNote" Priority="0" ImageType="Method">
    <Signature>GuildRosterSetPublicNote(index, "note")</Signature>
    <Description>Sets the public note for a guild member</Description>
    <ArgumentList Name="index">
      <Description>Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ArgumentList>
    <ArgumentList Name="note">
      <Description>Note text to set for the guild member (up to 31 characters) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildSetLeader" Priority="0" ImageType="Method">
    <Signature>GuildSetLeader("name")</Signature>
    <Description>Promotes a member to guild leader. Only works if the player is the guild leader and the named character is in the guild and currently online.</Description>
    <ArgumentList Name="name">
      <Description>Name of a guild member to promote to leader (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildSetMOTD" Priority="0" ImageType="Method">
    <Signature>GuildSetMOTD("message")</Signature>
    <Description>Sets the guild Message of the Day. Guild members see the message of the day upon login and whenever it is changed (and cannot disable its display in the default UI), so keeping the message concise is recommended.</Description>
    <ArgumentList Name="message">
      <Description>New text for the message of the day (up to 128 characters; embedded newlines allowed) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GuildUIEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="GuildUninvite" Priority="0" ImageType="Method">
    <Signature>GuildUninvite("name")</Signature>
    <Description>Removes a character from the player's guild</Description>
    <ArgumentList Name="name">
      <Description>Name of a guild member to remove (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="HasAction" Priority="0" ImageType="Method">
    <Signature>hasAction = HasAction(slot)</Signature>
    <Description>Returns whether an action slot contains an action</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="hasAction">
      <Description>1 if the slot contains an action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasAlternateForm" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasBonusActionBar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasCompletedAnyAchievement" Priority="0" ImageType="Method">
    <Signature>state = HasCompletedAnyAchievement()</Signature>
    <Description>Checks if the player has completed at least 1 achievement. Used to determine whether or not the achievements frame should be loaded, and if the Achievements button on the micro menu should be enabled or not.</Description>
    <ReturnList Name="state">
      <Description>1 if the player has completed at least one achievement, nil otherwise. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasDebugZoneMap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasExtraActionBar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasFullControl" Priority="0" ImageType="Method">
    <Signature>hasControl = HasFullControl()</Signature>
    <Description>Returns whether the player character can be controlled</Description>
    <ReturnList Name="hasControl">
      <Description>1 if the player character can be controlled (i.e. isn't feared, charmed, etc); otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasInspectHonorData" Priority="0" ImageType="Method">
    <Signature>hasData = HasInspectHonorData()</Signature>
    <Description>Returns whether PvP honor and arena data for the currently inspected unit has been downloaded from the server. See RequestInspectHonorData() to request PvP data from the server.</Description>
    <ReturnList Name="hasData">
      <Description>1 if the client has PvP data for the currently inspected player; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasKey" Priority="0" ImageType="Method">
    <Signature>hasKey = HasKey()</Signature>
    <Description>Returns whether the player has any keys stored in the Keyring container. Used in the default UI to show or hide the UI for the Keyring container</Description>
    <ReturnList Name="hasKey">
      <Description>Returns 1 if the player has any keys stored in the Keyring container; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasLFGRestrictions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasLoadedCUFProfiles" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasNewMail" Priority="0" ImageType="Method">
    <Signature>hasMail = HasNewMail()</Signature>
    <Description>Returns whether the player has received new mail since last visiting a mailbox</Description>
    <ReturnList Name="hasMail">
      <Description>1 if the player has received new mail since last visiting a mailbox; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasOverrideActionBar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasPetSpells" Priority="0" ImageType="Method">
    <Signature>hasPetSpells, petType = HasPetSpells()</Signature>
    <Description>Returns whether the player's current pet has a spellbook</Description>
    <ReturnList Name="hasPetSpells">
      <Description>1 if the player currently has an active pet with spells/abilities; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="petType">
      <Description>Non-localized token identifying the type of pet (string)
DEMON - A warlock's demonic minion
PET - A hunter's beast</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasPetUI" Priority="0" ImageType="Method">
    <Signature>hasPetUI, isHunterPet = HasPetUI()</Signature>
    <Description>Returns whether the pet UI should be displayed for the player's pet. Special quest-related pets, vehicles, and possessed units all count as pets but do not use the pet UI or associated functions.</Description>
    <ReturnList Name="hasPetUI">
      <Description>1 if the pet UI should be displayed for the player's pet (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isHunterPet">
      <Description>1 if the player's pet is a hunter pet (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasSoulstone" Priority="0" ImageType="Method">
    <Signature>text = HasSoulstone()</Signature>
    <Description>Returns whether the player can instantly resurrect in place. Only returns valid information while the player is dead and has not yet released his or her spirit to the graveyard.</Description>
    <ReturnList Name="text">
      <Description>If the player can resurrect in place, the text to be displayed on the dialog button for such (e.g. "Use Soulstone", "Reincarnate"); otherwise nil (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HasTempShapeshiftActionBar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasTravelPass" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasVehicleActionBar" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="HasWandEquipped" Priority="0" ImageType="Method">
    <Signature>isEquipped = HasWandEquipped()</Signature>
    <Description>Returns whether the player has a wand equipped</Description>
    <ReturnList Name="isEquipped">
      <Description>1 if a wand is equipped; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="HearthAndResurrectFromArea" Priority="0" ImageType="Method">
    <Signature>HearthAndResurrectFromArea()</Signature>
    <Description>Instantly exits the current world PvP zone, returning to the player's Hearthstone location.
Resets the player's Hearthstone cooldown, and also returns the player to life if dead. Only usable if the player is in a world PvP combat zone (i.e. Wintergrasp).</Description>
  </WowApi>
  <WowApi Name="HideRepairCursor" Priority="0" ImageType="Method">
    <Signature>HideRepairCursor()</Signature>
    <Description>Returns the cursor to normal mode after use of ShowRepairCursor()</Description>
  </WowApi>
  <WowApi Name="InActiveBattlefield" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="InCinematic" Priority="0" ImageType="Method">
    <Signature>inCinematic = InCinematic()</Signature>
    <Description>Returns whether an in-game cinematic is playing. Applies to in-game-engine cinematics (such as when logging into a new character for the first time), not prerecorded movies.</Description>
    <ReturnList Name="inCinematic">
      <Description>1 if an in-game cinematic is playing; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="InCombatLockdown" Priority="0" ImageType="Method">
    <Signature>inLockdown = InCombatLockdown()</Signature>
    <Description>Returns whether the user interface is protected due to combat. Non-Blizzard code is allowed to perform certain UI actions (such as changing secure template attributes or moving/showing/hiding secure frames) only if the player is not in combat; this function can be used to determine whether such actions are currently available.</Description>
    <ReturnList Name="inLockdown">
      <Description>1 if the user interface is protected due to combat; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="InGuildParty" Priority="0" ImageType="Method">
    <Signature>inGroup, numGuildPresent, numGuildRequired, xpMultiplier = InGuildParty()</Signature>
    <Description>Returns whether or not player is in a guild party.</Description>
    <ReturnList Name="inGroup">
      <Description>True if player is in a valid guild group, false if not. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="numGuildPresent">
      <Description>Number of guild members in the group (number) </Description>
    </ReturnList>
    <ReturnList Name="numGuildRequired">
      <Description>Number of guild members needed to count as a guild group (number) </Description>
    </ReturnList>
    <ReturnList Name="xpMultiplier">
      <Description>Amount to multiply guild experience gains by. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="InRepairMode" Priority="0" ImageType="Method">
    <Signature>inRepair = InRepairMode()</Signature>
    <Description>Returns whether the item repair cursor mode is currently active. Repair mode is entered by calling ShowRepairCursor() and exited by calling HideRepairCursor(); while in repair mode, calling PickupContainerItem() or PickupInventoryItem() will attempt to repair the item (and deduct the cost of such from the player's savings) instead of putting it on the cursor.</Description>
    <ReturnList Name="inRepair">
      <Description>1 if repair mode is currently active; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="InboxItemCanDelete" Priority="0" ImageType="Method">
    <Signature>canDelete = InboxItemCanDelete(mailID)</Signature>
    <Description>Returns whether a message in the player's inbox can be deleted</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a message in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="canDelete">
      <Description>1 if the message can be deleted; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="InitWorldMapPing" Priority="0" ImageType="Method">
    <Signature>InitWorldMapPing()</Signature>
    <Description>Initializes the frame used to display the character location "ping" on the World Map</Description>
  </WowApi>
  <WowApi Name="InitiateRolePoll" Priority="0" ImageType="Method">
    <Signature>success = InitiateRolePoll()</Signature>
    <Description>Initiates a raid-wide role check. Every raid member is required to set his own role in a popup role window.</Description>
    <ReturnList Name="success">
      <Description>[Unconfirmed] Whether the role poll initiation was successful. Doesn't check for whether you are raid assistant/leader. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="InitiateTrade" Priority="0" ImageType="Method">
    <Signature>InitiateTrade("unit") or InitiateTrade("name")</Signature>
    <Description>Offers to trade with a given unit. The trade process does not begin immediately; once the server has determined both clients can trade, the TRADE_SHOW event fires.</Description>
    <ArgumentList Name="unit">
      <Description>A unit with which to trade (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit with which to trade; only valid for nearby units in the player's party/raid (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="InteractUnit" Priority="0" ImageType="Method">
    <Signature>InteractUnit(unit)</Signature>
    <Description>Interacts with (as with right-clicking on) a unit</Description>
    <ArgumentList Name="unit">
      <Description>The unit to interact with (unitid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="InterfaceOptionsFrame_OpenToCategory" Priority="0" ImageType="Method">
    <Signature>InterfaceOptionsFrame_OpenToCategory("panelName") or InterfaceOptionsFrame_OpenToCategory(panel)</Signature>
    <Description>Opens the Interface Options window and displays a given panel within it</Description>
    <ArgumentList Name="panelName">
      <Description>The registered name of an options panel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="panel">
      <Description>A Frame object already registered as an options panel (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="InterfaceOptions_AddCategory" Priority="0" ImageType="Method">
    <Signature>InterfaceOptions_AddCategory(panel)</Signature>
    <Description>Registers a panel to be displayed in the Interface Options window. The following members and methods are used by the Interface Options frame to display and organize panels:
panel.name - string (required) - The name of the AddOn or group of configuration options. This is the text that will display in the AddOn options list.
panel.parent - string (optional) - Name of the parent of the AddOn or group of configuration options. This identifies "panel" as the child of another category. If the parent category doesn't exist, "panel" will be displayed as a regular category.
panel.okay - function (optional) - This method will run when the player clicks "okay" in the Interface Options.
panel.cancel - function (optional) - This method will run when the player clicks "cancel" in the Interface Options. Use this to revert their changes.
panel.default - function (optional) - This method will run when the player clicks "defaults". Use this to revert their changes to your defaults.
panel.refresh - function (optional) - This method will run when the Interface Options frame calls its OnShow function and after defaults have been applied via the panel.default method described above. Use this to refresh your panel's UI in case settings were changed without player interaction.</Description>
    <ArgumentList Name="panel">
      <Description>A Frame object (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="InviteUnit" Priority="0" ImageType="Method">
    <Signature>InviteUnit("name")</Signature>
    <Description>Invites a character to the player's party or raid</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to invite (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Is64BitClient" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsAchievementEligible" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsActionInRange" Priority="0" ImageType="Method">
    <Signature>inRange = IsActionInRange(slot [, "unit"])</Signature>
    <Description>Returns whether the player's target is in range of an action</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to target with the action (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inRange">
      <Description>1 if the player's target is in range for the action or 0 if out of range; nil if the action cannot be used on the player's target regardless of range (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsActiveBattlefieldArena" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsActiveQuestLegendary" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsActiveQuestTrivial" Priority="0" ImageType="Method">
    <Signature>trivial = IsActiveQuestTrivial(index)</Signature>
    <Description>Returns whether a quest which can be turned in to the current Quest NPC is trivial at the player's level. Only returns valid information after a QUEST_GREETING event. Used in the default UI to display "(low level)" when listing the quest.
Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="trivial">
      <Description>1 if the quest is trivial at the player's level; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAddOnLoadOnDemand" Priority="0" ImageType="Method">
    <Signature>isLod = IsAddOnLoadOnDemand("name") or IsAddOnLoadOnDemand(index)</Signature>
    <Description>Returns whether an addon can be loaded without restarting the UI</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="isLod">
      <Description>1 if the addon is LoadOnDemand-capable; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAddOnLoaded" Priority="0" ImageType="Method">
    <Signature>loaded = IsAddOnLoaded("name") or IsAddOnLoaded(index)</Signature>
    <Description>Returns whether an addon is currently loaded</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="loaded">
      <Description>1 if the addon is loaded; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAddonMessagePrefixRegistered" Priority="0" ImageType="Method">
    <Signature>isRegistered = IsAddonMessagePrefixRegistered("prefix")</Signature>
    <Description>Returns whether or not the client has registered to receive messages with a given addon prefix </Description>
    <ArgumentList Name="prefix">
      <Description>A string of up to 16 characters used to identify a stream of messages (string) </Description>
    </ArgumentList>
    <ReturnList Name="isRegistered">
      <Description>true if the client is registered to receive messages with the given prefix, otherwise false. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAltKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsAltKeyDown()</Signature>
    <Description>Returns whether an Alt key on the keyboard is held down.</Description>
    <ReturnList Name="isDown">
      <Description>1 if an Alt key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsArenaTeamCaptain" Priority="0" ImageType="Method">
    <Signature>isCaptain = IsArenaTeamCaptain(team)</Signature>
    <Description>Returns whether the player is the captain of an arena team. Also returns 1 if the player is not on a team of the given arenaTeamID.</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="IsArtifactCompletionHistoryAvailable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsAtStableMaster" Priority="0" ImageType="Method">
    <Signature>isAtNPC = IsAtStableMaster()</Signature>
    <Description>Returns whether the player is interacting with a Stable Master NPC. The Pet Stable UI/API can be active without an NPC if the player is using the Call Stabled Pet ability. New stable slots can only be purchased while talking to an NPC -- the default UI uses this function to determine whether to show UI elements related to purchasing slots.</Description>
    <ReturnList Name="isAtNPC">
      <Description>True if the player is interacting with a Stable Master NPC; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAttackAction" Priority="0" ImageType="Method">
    <Signature>isAttack = IsAttackAction(slot)</Signature>
    <Description>Returns whether an action is the standard melee Attack action. Used in the default UI to flash the action button while auto-attack is active. Does not apply to other repeating actions such as Auto Shot (for hunters) and Shoot (for wand users); for those, see IsAutoRepeatAction.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isAttack">
      <Description>1 if the action enables/disables melee auto-attack; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAttackSpell" Priority="0" ImageType="Method">
    <Signature>isAttack = IsAttackSpell(index, "bookType") or IsAttackSpell("name")</Signature>
    <Description>Returns whether a spell is the standard melee Attack spell</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="isAttack">
      <Description>1 if the spell enables/disables melee auto-attack; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAuctionSortReversed" Priority="0" ImageType="Method">
    <Signature>isReversed, isSorted = IsAuctionSortReversed("list", "sort")</Signature>
    <Description>Returns whether a sort criterion is applied in reverse order. No longer used in the default UI; see GetAuctionSort() instead.</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ArgumentList Name="sort">
      <Description>A sort criterion (string) </Description>
    </ArgumentList>
    <ReturnList Name="isReversed">
      <Description>1 if the criterion is applied in reverse order; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isSorted">
      <Description>1 if the criterion is currently used for the given listing; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAutoRepeatAction" Priority="0" ImageType="Method">
    <Signature>isRepeating = IsAutoRepeatAction(slot)</Signature>
    <Description>Returns whether an action is an automatically repeating action. Used in the default UI to flash the action button while the action is repeating. Applies to actions such as Auto Shot (for hunters) and Shoot (for wand and other ranged weapon users) but not to the standard melee Attack action; for it, see IsAttackAction.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isRepeating">
      <Description>1 if the action is an auto-repeat action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsAutoRepeatSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsAvailableQuestTrivial" Priority="0" ImageType="Method">
    <Signature>trivial = IsAvailableQuestTrivial(index)</Signature>
    <Description>Returns whether a quest available from the current Quest NPC is trivial at the player's level. Only returns valid information after a QUEST_GREETING event. Used in the default UI to display "(low level)" when listing the quest.
Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="trivial">
      <Description>1 if the quest is trivial at the player's level; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsBNLogin" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsBarberShopStyleValid" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsBlizzCon" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsCemeterySelectionAvailable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsChatAFK" Priority="0" ImageType="Method">
    <Signature>isAway = IsChatAFK()</Signature>
    <Description>Returns whether the player's status is Away</Description>
    <ReturnList Name="isAway">
      <Description>True if player's status is set to Away; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsChatDND" Priority="0" ImageType="Method">
    <Signature>isBusy = IsChatDND()</Signature>
    <Description>Returns whether the player's status is Busy</Description>
    <ReturnList Name="isBusy">
      <Description>True if player's status is set to Busy; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsConsumableAction" Priority="0" ImageType="Method">
    <Signature>isConsumable = IsConsumableAction(slot)</Signature>
    <Description>Returns whether using an action consumes an item. Applies both to consumable items (such as food and potions) and to spells which use a reagent (e.g. Prayer of Fortitude, Divine Intervention, Water Walking, Portal: Dalaran).</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isConsumable">
      <Description>1 if using the action consumes an item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsConsumableItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsConsumableSpell" Priority="0" ImageType="Method">
    <Signature>isConsumable = IsConsumableSpell(index, "bookType") or IsConsumableSpell("name")</Signature>
    <Description>Returns whether casting a spell consumes a reagent item</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="isConsumable">
      <Description>1 if casting the spell consumes a reagent item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsContainerFiltered" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsControlKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsControlKeyDown()</Signature>
    <Description>Returns whether a Control key on the keyboard is held down</Description>
    <ReturnList Name="isDown">
      <Description>1 if a Control key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsCurrentAction" Priority="0" ImageType="Method">
    <Signature>isCurrent = IsCurrentAction(slot)</Signature>
    <Description>Returns whether an action is currently being used</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isCurrent">
      <Description>1 if the action is currently being cast, is waiting for the user to choose a target, is a repeating action which is currently repeating, or is the open trade skill; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsCurrentItem" Priority="0" ImageType="Method">
    <Signature>isItem = IsCurrentItem(itemID) or IsCurrentItem("itemName") or IsCurrentItem("itemLink")</Signature>
    <Description>Returns whether an item is being used</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isItem">
      <Description>1 if the item's "Use:" action is currently being cast, is waiting for the user to choose a target, or is otherwise in progress; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsCurrentQuestFailed" Priority="0" ImageType="Method">
    <Signature>isFailed = IsCurrentQuestFailed()</Signature>
    <Description>Returns whether the player has failed the selected quest in the quest log</Description>
    <ReturnList Name="isFailed">
      <Description>1 if the player has failed the quest; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsCurrentSpell" Priority="0" ImageType="Method">
    <Signature>isCurrent = IsCurrentSpell(index, "bookType") or IsCurrentSpell("name")</Signature>
    <Description>Returns whether a spell is currently being used</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="IsDebugBuild" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsDesaturateSupported" Priority="0" ImageType="Method">
    <Signature>isSupported = IsDesaturateSupported()</Signature>
    <Description>Returns whether the current hardware supports desaturated textures</Description>
    <ReturnList Name="isSupported">
      <Description>1 if texture desaturation is supported; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsDisplayChannelModerator" Priority="0" ImageType="Method">
    <Signature>isModerator = IsDisplayChannelModerator()</Signature>
    <Description>Returns whether the player is a moderator of the selected channel in the channel list display</Description>
    <ReturnList Name="isModerator">
      <Description>1 if the player is a moderator of the selected channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsDisplayChannelOwner" Priority="0" ImageType="Method">
    <Signature>isOwner = IsDisplayChannelOwner()</Signature>
    <Description>Returns whether the player is the owner of the selected channel in the channel list display</Description>
    <ReturnList Name="isOwner">
      <Description>1 if the player is the owner of the selected channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsDressableItem" Priority="0" ImageType="Method">
    <Signature>isDressable = IsDressableItem(itemID) or IsDressableItem("itemName") or IsDressableItem("itemLink")</Signature>
    <Description>Returns whether an item's appearance can be previewed using the Dressing Room feature</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isDressable">
      <Description>1 if the item's appearance can be previewed using the Dressing Room feature; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsDualWielding" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsEncounterInProgress" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsEquippableItem" Priority="0" ImageType="Method">
    <Signature>isEquippable = IsEquippableItem(itemID) or IsEquippableItem("itemName") or IsEquippableItem("itemLink")</Signature>
    <Description>Returns whether an item can be equipped. Indicates whether an item is capable of being equipped on a character, not necessarily whether the player character is able to wear it.</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isEquippable">
      <Description>1 if the item can be equipped, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsEquippedAction" Priority="0" ImageType="Method">
    <Signature>isEquipped = IsEquippedAction(slot)</Signature>
    <Description>Returns whether an action contains an equipped item. Applies to actions involving equippable items (not to consumables or other items with "Use:" effects) and indicates the effect of performing the action: if an action's item is not equipped, using the action will equip it; if the item is equipped and has a "Use:" effect, using the action will activate said effect.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isEquipped">
      <Description>1 if the action contains an equipped item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsEquippedItem" Priority="0" ImageType="Method">
    <Signature>isEquipped = IsEquippedItem(itemID) or IsEquippedItem("itemName") or IsEquippedItem("itemLink")</Signature>
    <Description>Returns whether an item is currently equipped</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isEquipped">
      <Description>1 if the item is equipped on the player character; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsEquippedItemType" Priority="0" ImageType="Method">
    <Signature>isEquipped = IsEquippedItemType("type")</Signature>
    <Description>Returns whether any items of a given type are currently equipped. Possible arguments include the localized names of item classes (as returned from GetAuctionItemClasses; e.g. "Weapon", "Armor"), subclasses (as returned from GetAuctionItemSubClasses; e.g. "One-handed axes", "Shields", "Cloth"), and the global tokens or localized names for equip locations (as returned from GetAuctionInvTypes; e.g. "INVTYPE_WEAPONMAINHAND", "Off Hand").</Description>
    <ArgumentList Name="type">
      <Description>Name of an item class, subclass, or equip location (string) </Description>
    </ArgumentList>
    <ReturnList Name="isEquipped">
      <Description>1 if the player has equipped any items of the given type; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsEuropeanNumbers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsEveryoneAssistant" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsExpansionTrial" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsFactionInactive" Priority="0" ImageType="Method">
    <Signature>isInactive = IsFactionInactive(index)</Signature>
    <Description>Returns whether a faction is flagged as "inactive". "Inactive" factions behave no differently; the distinction only exists to allow players to hide factions they don't care about from the main display. Factions thus marked are automatically moved to an "Inactive" group at the end of the faction list.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
    <ReturnList Name="isInactive">
      <Description>1 if the faction is currently flagged as "inactive"; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsFalling" Priority="0" ImageType="Method">
    <Signature>falling = IsFalling()</Signature>
    <Description>Returns whether the player is currently falling</Description>
    <ReturnList Name="falling">
      <Description>1 if the player is falling; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsFishingLoot" Priority="0" ImageType="Method">
    <Signature>isFishing = IsFishingLoot()</Signature>
    <Description>Returns whether the currently displayed loot came from fishing. Used in the default UI to play a fishing sound effect and change the appearance of the loot window.</Description>
    <ReturnList Name="isFishing">
      <Description>1 if the currently displayed loot is fishing loot; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsFlyableArea" Priority="0" ImageType="Method">
    <Signature>isFlyable = IsFlyableArea()</Signature>
    <Description>Returns whether flight is allowed on the continent where the player is currently located. Returns 1 for some areas in which flight is disabled -- notably Dalaran (with the exception of the Krasus' Landing subzone) and Wintergrasp.</Description>
    <ReturnList Name="isFlyable">
      <Description>1 if flight is allowed on the continent where the player is currently located; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsFlying" Priority="0" ImageType="Method">
    <Signature>isFlying = IsFlying()</Signature>
    <Description>Returns whether the player is currently flying</Description>
    <ReturnList Name="isFlying">
      <Description>1 if the player is currently flying; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsGMClient" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsGlyphFlagSet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsGuildLeader" Priority="0" ImageType="Method">
    <Signature>isLeader = IsGuildLeader()</Signature>
    <Description>Returns whether or player is leader of his or her guild</Description>
    <ReturnList Name="isLeader">
      <Description>1 if the player is a guild leader; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsGuildRankAssignmentAllowed" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsHarmfulItem" Priority="0" ImageType="Method">
    <Signature>isHarmful = IsHarmfulItem(itemID) or IsHarmfulItem("itemName") or IsHarmfulItem("itemLink")</Signature>
    <Description>Returns whether an item can be used against hostile units. Harmful items include grenades and various quest items ("Use this to zap 30 murlocs!").</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isHarmful">
      <Description>1 if the item can be used against hostile units; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsHarmfulSpell" Priority="0" ImageType="Method">
    <Signature>isHarmful = IsHarmfulSpell(index, "bookType") or IsHarmfulSpell("name")</Signature>
    <Description>Returns whether a spell can be used against hostile units</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="isHarmful">
      <Description>1 if the spell can be used against hostile units; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsHelpfulItem" Priority="0" ImageType="Method">
    <Signature>isHarmful = IsHelpfulItem(itemID) or IsHelpfulItem("itemName") or IsHelpfulItem("itemLink")</Signature>
    <Description>Returns whether an item can be used on the player or friendly units. Helpful items include potions, scrolls, food and drink.</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isHarmful">
      <Description>1 if the item can be used on the player or friendly units; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsHelpfulSpell" Priority="0" ImageType="Method">
    <Signature>isHarmful = IsHelpfulSpell(index, "bookType") or IsHelpfulSpell("name")</Signature>
    <Description>Returns whether an item can be used on the player or friendly units</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="IsIgnored" Priority="0" ImageType="Method">
    <Signature>isIgnored = IsIgnored("unit") or IsIgnored("name")</Signature>
    <Description>Returns whether a unit is on the player's ignore list</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="isIgnored">
      <Description>1 if the unit is on the player's ignore list; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsIgnoredOrMuted" Priority="0" ImageType="Method">
    <Signature>isIgnoredOrMuted = IsIgnoredOrMuted("unit")</Signature>
    <Description>Returns whether a unit can be heard due to ignored/muted status</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isIgnoredOrMuted">
      <Description>1 if the unit is ignored or muted, nil otherwise (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsInActiveWorldPVP" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsInArenaTeam" Priority="0" ImageType="Method">
    <Signature>isInTeam = IsInArenaTeam()</Signature>
    <Description>Returns whether the player is on an arena team</Description>
    <ReturnList Name="isInTeam">
      <Description>True if the player is on any arena teams; false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsInAuthenticatedRank" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsInGroup" Priority="0" ImageType="Method">
    <Signature>inGroup = IsInGroup([groupType])</Signature>
    <Description>Returns whether the player is currently in the specified type of group, or any type of group if not specified.</Description>
    <ArgumentList Name="groupType">
      <Description>Group type to check for (one of the below constants), checks for all types if not specified (number)
LE_PARTY_CATEGORY_HOME - Checks for home-realm parties
LE_PARTY_CATRGORY_INSTANCE - Checks for instance-specific groups</Description>
    </ArgumentList>
    <ReturnList Name="inGroup">
      <Description>True if in the specified type of group (or any if groupType was not specified), false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsInGuild" Priority="0" ImageType="Method">
    <Signature>inGuild = IsInGuild()</Signature>
    <Description>Returns whether the player is in a guild</Description>
    <ReturnList Name="inGuild">
      <Description>1 if the player is in a guild; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsInInstance" Priority="0" ImageType="Method">
    <Signature>isInstance, instanceType = IsInInstance()</Signature>
    <Description>Returns whether the player is in an instance (and its type if applicable)</Description>
    <ReturnList Name="isInstance">
      <Description>1 if the player is in an instance, otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList />
  </WowApi>
  <WowApi Name="IsInLFGDungeon" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsInRaid" Priority="0" ImageType="Method">
    <Signature>inRaid = IsInRaid()</Signature>
    <Description>Returns whether the player is currently in a raid group</Description>
    <ReturnList Name="inRaid">
      <Description>True if in raid, false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsInScenarioGroup" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsIndoors" Priority="0" ImageType="Method">
    <Signature>inside = IsIndoors()</Signature>
    <Description>Returns whether the player is currently indoors</Description>
    <ReturnList Name="inside">
      <Description>1 if the player is currently indoors; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsInventoryItemLocked" Priority="0" ImageType="Method">
    <Signature>isLocked = IsInventoryItemLocked(slot)</Signature>
    <Description>Returns whether an inventory slot is locked. Items become locked while being moved, split, or placed into other UI elements (such as the mail, trade, and auction windows); the item is unlocked once such an action is completed.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
    <ReturnList Name="isLocked">
      <Description>1 if the item in the inventory slot is locked; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsItemAction" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsItemInRange" Priority="0" ImageType="Method">
    <Signature>inRange = IsItemInRange(itemID, "unit") or IsItemInRange("itemName", "unit") or IsItemInRange("itemLink", "unit")</Signature>
    <Description>Returns whether the player is in range to use an item on a unit</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit on which to use the item (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inRange">
      <Description>1 if the player is near enough to use the item on the unit; 0 if not in range; nil if the unit is not a valid target for the item (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsLFGComplete" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsLFGDungeonJoinable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsLeftAltKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsLeftAltKeyDown()</Signature>
    <Description>Returns whether the left Alt key is currently held down. (Note: The Mac WoW client does not distingish between left and right modifier keys, so both Alt keys are reported as Left Alt.)</Description>
    <ReturnList Name="isDown">
      <Description>1 if the left Alt key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsLeftControlKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsLeftControlKeyDown()</Signature>
    <Description>Returns whether the left Control key is held down. (Note: The Mac WoW client does not distingish between left and right modifier keys, so both Control keys are reported as Left Control.)</Description>
    <ReturnList Name="isDown">
      <Description>1 if the left Control key is held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsLeftShiftKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsLeftShiftKeyDown()</Signature>
    <Description>Returns whether the left Shift key on the keyboard is held down. (Note: The Mac WoW client does not distingish between left and right modifier keys, so both Shift keys are reported as Left Shift.)</Description>
    <ReturnList Name="isDown">
      <Description>1 if the left Shift key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsLinuxClient" Priority="0" ImageType="Method">
    <Signature>isLinux = IsLinuxClient()</Signature>
    <Description>Returns whether the player is using the native Linux game client. This function does NOT return true if the player is running a Windows client under Wine or other virtualization software. No native Linux client has been made public at this time.</Description>
    <ReturnList Name="isLinux">
      <Description>1 if running the Linux client; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsLoggedIn" Priority="0" ImageType="Method">
    <Signature>loggedIn = IsLoggedIn()</Signature>
    <Description>Returns whether the login process has completed. The PLAYER_LOGIN event provides similar information; this function presents an alternative that can be used across UI reloads.</Description>
    <ReturnList Name="loggedIn">
      <Description>1 if the login process has completed; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsLoggingOut" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsMacClient" Priority="0" ImageType="Method">
    <Signature>isMac = IsMacClient()</Signature>
    <Description>Returns whether the player is using the Mac OS X game client</Description>
    <ReturnList Name="isMac">
      <Description>1 if running the Mac OS X client; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsMasterLooter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsModifiedClick" Priority="0" ImageType="Method">
    <Signature>modifiedClick = IsModifiedClick("type")</Signature>
    <Description>Determines if the modifiers specified in the click-type had been held down while the button click occurred.. If called from a click handler (OnMouseDown, OnMouseUp, OnClick, OnDoubleClick, PreClick, or PostClick), checks mouse buttons included in the binding; otherwise checks modifiers only (see example).</Description>
    <ArgumentList Name="type">
      <Description>Token identifying a modified click action (string) </Description>
    </ArgumentList>
    <ReturnList Name="modifiedClick">
      <Description>1 if the modifier key set bound to the action is active (i.e. the keys are held down); otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsModifierKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsModifierKeyDown()</Signature>
    <Description>Returns whether a modifier key is held down. Modifier keys include shift, control or alt on either side of the keyboard. WoW does not recognize platform-specific modifier keys (such as fn, meta, Windows, or Command).</Description>
    <ReturnList Name="isDown">
      <Description>1 if any modifier key is held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsMounted" Priority="0" ImageType="Method">
    <Signature>mounted = IsMounted()</Signature>
    <Description>Returns whether the player is mounted</Description>
    <ReturnList Name="mounted">
      <Description>1 if the player character is riding a summoned mount; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsMouseButtonDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsMouseButtonDown([button])</Signature>
    <Description>Returns whether a given mouse button is held down. If no button is specified, returns 1 if any mouse button is held down.</Description>
    <ArgumentList Name="button">
      <Description>Number or name of a mouse button (number,string)
1 or LeftButton - Primary mouse button
2 or RightButton - Secondary mouse button
3 or MiddleButton - Third mouse button (or clickable scroll control)
4 or Button4 - Fourth mouse button
5 or Button5 - Fifth mouse button</Description>
    </ArgumentList>
    <ReturnList Name="isDown">
      <Description>1 if the mouse button is down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsMouselooking" Priority="0" ImageType="Method">
    <Signature>isLooking = IsMouselooking()</Signature>
    <Description>Returns whether mouselook mode is active</Description>
    <ReturnList Name="isLooking">
      <Description>True if mouselook mode is active; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsMovieLocal" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsMoviePlayable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsMuted" Priority="0" ImageType="Method">
    <Signature>muted = IsMuted("unit") or IsMuted("name")</Signature>
    <Description>Returns whether a character has been muted by the player</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="muted">
      <Description>1 if the unit is muted; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsOnTournamentRealm" Priority="0" ImageType="Method">
    <Signature>IsOnTournamentRealm()</Signature>
    <Description>Returns whether the player is on an Arena Tournament realm</Description>
  </WowApi>
  <WowApi Name="IsOutOfBounds" Priority="0" ImageType="Method">
    <Signature>outOfBounds = IsOutOfBounds()</Signature>
    <Description>Returns whether the player is currently outside the bounds of the world. Used in the default UI (in conjunction with IsFalling()) to allow the player to release to a graveyard if the character has encountered a bug and fallen underneath the world geometry.</Description>
    <ReturnList Name="outOfBounds">
      <Description>1 if the player is currently outside the bounds of the world; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsOutdoors" Priority="0" ImageType="Method">
    <Signature>isOutdoors = IsOutdoors()</Signature>
    <Description>Returns whether the player is currently outdoors. "Outdoors" as defined by this function corresponds to the ability to use a mount in that specific location, not necessarily whether there is a roof above the player character's head. For example, returns 1 in Ironforge, Undercity, and the Caverns of Time, but nil in the nominally outdoor areas of instances such as Stratholme, Drak'tharon Keep, and Hellfire Ramparts. (Note that even in "outdoor" areas, standing on top of certain objects may interfere with the player's ability to mount up.)</Description>
    <ReturnList Name="isOutdoors">
      <Description>1 if the player is currently outdoors; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsPVPTimerRunning" Priority="0" ImageType="Method">
    <Signature>isRunning = IsPVPTimerRunning()</Signature>
    <Description>Returns whether the player's PvP flag will expire after a period of time.
If in a zone that flags the player for PvP, or if the player has manually enabled PvP, the flag will not expire. Once not in such a zone, or once the player has manually disabled PvP, or if the player has been flagged by attacking an enemy unit, the timer starts running and the player's PvP flag will expire after some time.</Description>
    <ReturnList Name="isRunning">
      <Description>1 if the player's PvP flag will expire; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsPartyLFG" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsPassiveSpell" Priority="0" ImageType="Method">
    <Signature>isPassive = IsPassiveSpell(index, "bookType") or IsPassiveSpell("name")</Signature>
    <Description>Returns whether a spell is passive (cannot be cast)</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="isPassive">
      <Description>1 if the spell is passive; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsPetActive" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsPetAttackAction" Priority="0" ImageType="Method">
    <Signature>isAttack = IsPetAttackAction(index)</Signature>
    <Description>Returns if the pet action button is the pet attack command</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
    <ReturnList Name="isAttack">
      <Description>True if the action is the pet attack action; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsPetAttackActive" Priority="0" ImageType="Method">
    <Signature>isActive = IsPetAttackActive()</Signature>
    <Description>Returns whether the pet's attack action is currently active</Description>
    <ReturnList Name="isActive">
      <Description>1 if the pet's attack action is currently active; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsPlayerInWorld" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsPlayerNeutral" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsPlayerSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsPossessBarVisible" Priority="0" ImageType="Method">
    <Signature>isVisible = IsPossessBarVisible()</Signature>
    <Description>Returns whether a special action bar should be shown while the player possesses another unit. Used in the default UI to switch between using the ShapeshiftBarFrame or PossessBarFrame to show actions belonging to the possessed unit.</Description>
    <ReturnList Name="isVisible">
      <Description>1 if the possessed unit's actions should be shown on a special action bar (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsQuestCompletable" Priority="0" ImageType="Method">
    <Signature>isCompletable = IsQuestCompletable()</Signature>
    <Description>Returns whether the player can complete the quest presented by a questgiver</Description>
    <ReturnList Name="isCompletable">
      <Description>1 if the player currently meets the requirements (e.g. number of items collected) complete the quest; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsQuestFlaggedCompleted" Priority="0" ImageType="Method">
    <Signature>isCompleted = IsQuestFlaggedCompleted(questID)</Signature>
    <Description>Returns whether a quest is completed by the player or not</Description>
    <ArgumentList Name="questID">
      <Description>The quest ID to be queried (number) </Description>
    </ArgumentList>
    <ReturnList Name="isCompleted">
      <Description>1 if the quest is completed, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsQuestLogSpecialItemInRange" Priority="0" ImageType="Method">
    <Signature>inRange = IsQuestLogSpecialItemInRange(questIndex)</Signature>
    <Description>Returns whether the player's target is in range for using an item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="inRange">
      <Description>1 if the player is close enough to the target to use the item; 0 if the target is out of range; nil if the quest item does not require a target (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsQuestWatched" Priority="0" ImageType="Method">
    <Signature>isWatched = IsQuestWatched(questIndex)</Signature>
    <Description>Returns whether a quest from the quest log is listed in the objectives tracker</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="isWatched">
      <Description>1 if the quest is being watched; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsRaidMarkerActive" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsRangedWeapon" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsRatedBattleground" Priority="0" ImageType="Method">
    <Signature>isRated = IsRatedBattleground()</Signature>
    <Description>Returns whether or not the player is in a rated battleground</Description>
    <ReturnList Name="isRated">
      <Description>True if the player is inside a rate battleground, otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsRatedMap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsReferAFriendLinked" Priority="0" ImageType="Method">
    <Signature>isLinked = IsReferAFriendLinked("unit")</Signature>
    <Description>Returns whether a unit's account is linked to the player's via the Recruit-a-Friend program</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isLinked">
      <Description>1 if the unit's account is linked to the player's (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsResting" Priority="0" ImageType="Method">
    <Signature>resting = IsResting()</Signature>
    <Description>Returns whether the player is currently resting. Rest state is provided in Inns and major cities and allows the player to log out immediately (instead of after a brief delay) and accrue bonus XP to be awarded for kills.</Description>
    <ReturnList Name="resting">
      <Description>1 if the player is resting; otherwise nil (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsRightAltKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsRightAltKeyDown()</Signature>
    <Description>Returns whether the right Alt key is currently held down. (Note: The Mac WoW client does not distingish between left and right modifier keys, so both Alt keys are reported as Left Alt.)</Description>
    <ReturnList Name="isDown">
      <Description>1 if the right Alt key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsRightControlKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsRightControlKeyDown()</Signature>
    <Description>Returns whether the right Control key on the keyboard is held down. (Note: The Mac WoW client does not distingish between left and right modifier keys, so both Control keys are reported as Left Control.)</Description>
    <ReturnList Name="isDown">
      <Description>1 if the right Control key on the keyboard is held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsRightShiftKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsRightShiftKeyDown()</Signature>
    <Description>Returns whether the right shift key on the keyboard is held down. (Note: The Mac WoW client does not distingish between left and right modifier keys, so both Shift keys are reported as Left Shift.)</Description>
    <ReturnList Name="isDown">
      <Description>1 if the right shift key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSelectedSpellBookItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsShiftKeyDown" Priority="0" ImageType="Method">
    <Signature>isDown = IsShiftKeyDown()</Signature>
    <Description>Returns whether a Shift key on the keyboard is held down</Description>
    <ReturnList Name="isDown">
      <Description>1 if a Shift key on the keyboard is currently held down; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSilenced" Priority="0" ImageType="Method">
    <Signature>isSilenced = IsSilenced("name", "channel")</Signature>
    <Description>Returns whether a character is silenced on a chat channel</Description>
    <ArgumentList Name="name">
      <Description>Name of a character (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>Name of a chat channel (string) </Description>
    </ArgumentList>
    <ReturnList Name="isSilenced">
      <Description>1 if the character is silenced on the given channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSpellClassOrSpec" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsSpellInRange" Priority="0" ImageType="Method">
    <Signature>inRange = IsSpellInRange(index, "bookType", "unit") or IsSpellInRange("name", "unit")</Signature>
    <Description>Returns whether the player is in range to cast a spell on a unit</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to target with the spell (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inRange">
      <Description>1 if the player is near enough to cast the spell on the unit; 0 if not in range; nil if the unit is not a valid target for the spell (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSpellKnown" Priority="0" ImageType="Method">
    <Signature>isKnown = IsSpellKnown(spellID [, isPet])</Signature>
    <Description>Returns whether the player (or pet) knows a spell</Description>
    <ArgumentList Name="spellID">
      <Description>Numeric ID of a spell (number, spellID) </Description>
    </ArgumentList>
    <ArgumentList Name="isPet">
      <Description>True to check only spells known to the player's pet; false or omitted to check only spells known to the player (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="isKnown">
      <Description>True if the player (or pet) knows the given spell; false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSpellOverlayed" Priority="0" ImageType="Method">
    <Signature>state = IsSpellOverlayed(spellID)</Signature>
    <Description>Checks if a given spell ID has an active spell overlay. This function continues to return expected results even if the user has spell overlays disabled, and is used internally to check if an action button should display a glow. This function does not work with macro ID's.</Description>
    <ArgumentList Name="spellID">
      <Description>The ID of the spell to check. (integer) </Description>
    </ArgumentList>
    <ReturnList Name="state">
      <Description>1 if the passed spell ID has an associated spell overlay active, nil otherwise. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsStackableAction" Priority="0" ImageType="Method">
    <Signature>isStackable = IsStackableAction(slot)</Signature>
    <Description>Returns whether an action uses stackable items. Applies to consumable items such as potions, wizard oils, food and drink; not used for spells which consume reagents (for those, see IsConsumableAction).</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isStackable">
      <Description>1 if the action uses stackable items; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsStealthed" Priority="0" ImageType="Method">
    <Signature>stealthed = IsStealthed()</Signature>
    <Description>Returns whether the player is currently stealthed</Description>
    <ReturnList Name="stealthed">
      <Description>1 if rogue Stealth, druid cat form Prowl, or a similar ability is active on the player; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsStereoVideoAvailable" Priority="0" ImageType="Method">
    <Signature>isAvailable = IsStereoVideoAvailable()</Signature>
    <Description>Returns whether the current system supports stereoscopic 3D display</Description>
    <ReturnList Name="isAvailable">
      <Description>1 if video options for stereoscopic 3D display should be shown; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSubZonePVPPOI" Priority="0" ImageType="Method">
    <Signature>isPVPPOI = IsSubZonePVPPOI()</Signature>
    <Description>Returns whether the current area has PvP (or other) objectives to be displayed. Used in the default UI when the "Display World PVP Objectives\ setting is set to \Dynamic\, in which case objective information is only shown when the player is near an objective. Examples include the towers in Eastern Plaguelands and Hellfire Peninsula as well as non-PvP objectives such as in the Old Hillsbrad instance, the Death Knight starter quests, and the Battle for Undercity quest event.</Description>
    <ReturnList Name="isPVPPOI">
      <Description>1 if the current subzone has objectives to display (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsSubmerged" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsSwimming" Priority="0" ImageType="Method">
    <Signature>isSwimming = IsSwimming()</Signature>
    <Description>Returns whether the player is currently swimming. "Swimming" as defined by this function corresponds to the ability to use swimming abilities (such as druid Aquatic Form) or inability to use land-restricted abilities (such as eating or summoning a flying mount), not necessarily to whether the player is in water.</Description>
    <ReturnList Name="isSwimming">
      <Description>1 if the player is currently swimming; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsTalentSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsThreatWarningEnabled" Priority="0" ImageType="Method">
    <Signature>enabled = IsThreatWarningEnabled()</Signature>
    <Description>Returns whether the default Aggro Warning UI should currently be shown.
This function (and the threatWarning CVar that affects its behavior) has no effect on other threat APIs; it merely indicates whether Blizzard's threat warning UI should be displayed.</Description>
    <ReturnList Name="enabled">
      <Description>1 if the Aggro Warning UI should be displayed; nil otherwise (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsTitleKnown" Priority="0" ImageType="Method">
    <Signature>isKnown = IsTitleKnown(titleIndex)</Signature>
    <Description>Returns whether the player has earned the ability to display a title</Description>
    <ArgumentList Name="titleIndex">
      <Description>Index of a title available to the player (between 1 and GetNumTitles()) (integer) </Description>
    </ArgumentList>
    <ReturnList Name="isKnown">
      <Description>1 if the player has earned the ability to display the title; otherwise 0 (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsTrackedAchievement" Priority="0" ImageType="Method">
    <Signature>isTracked = IsTrackedAchievement(id)</Signature>
    <Description>Returns whether an achievement is flagged for display in the objectives tracker UI</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
    <ReturnList Name="isTracked">
      <Description>True if the achievement is flagged for tracking; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsTradeSkillGuild" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsTradeSkillLinked" Priority="0" ImageType="Method">
    <Signature>isLinked, name = IsTradeSkillLinked()</Signature>
    <Description>Returns whether the TradeSkill UI is showing another player's skill</Description>
    <ReturnList Name="isLinked">
      <Description>1 if the TradeSkill APIs currently reflect another character's tradeskill; nil if showing the player's tradeskill or if no skill is shown (1nil) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>If showing another character's skill, the name of that character (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsTradeSkillRepeating" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsTradeskillTrainer" Priority="0" ImageType="Method">
    <Signature>isTradeskill = IsTradeskillTrainer()</Signature>
    <Description>Returns whether the player is interacting with a trade skill trainer (as opposed to a class trainer)</Description>
    <ReturnList Name="isTradeskill">
      <Description>1 if interacting with a trade skill trainer; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsTrialAccount" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsTutorialFlagged" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsUnitOnQuest" Priority="0" ImageType="Method">
    <Signature>state = IsUnitOnQuest(index, "unit") or IsUnitOnQuest(index, "name")</Signature>
    <Description>Returns whether a unit is on one of the quests in the player's quest log</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest in the player's quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="state">
      <Description>1 if the unit is on the quest; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsUsableAction" Priority="0" ImageType="Method">
    <Signature>isUsable, notEnoughMana = IsUsableAction(slot)</Signature>
    <Description>Returns whether an action is usable</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ReturnList Name="isUsable">
      <Description>1 if the action is usable; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="notEnoughMana">
      <Description>1 if the player lacks the resources (e.g. mana, energy, runes) to use the action; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsUsableItem" Priority="0" ImageType="Method">
    <Signature>isUsable, notEnoughMana = IsUsableItem(itemID) or IsUsableItem("itemName") or IsUsableItem("itemLink")</Signature>
    <Description>Returns whether an item can currently be used. Does not account for item cooldowns (see GetItemCooldown() -- returns 1 if other conditions allow for using the item (e.g. if the item can only be used while outdoors).</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's link (string) </Description>
    </ArgumentList>
    <ReturnList Name="isUsable">
      <Description>1 if the item is usable; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="notEnoughMana">
      <Description>1 if the player lacks the resources (e.g. mana, energy, runes) to use the item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsUsableSpell" Priority="0" ImageType="Method">
    <Signature>isUsable, notEnoughMana = IsUsableSpell(index, "bookType") or IsUsableSpell("name")</Signature>
    <Description>Returns whether or not a given spell is usable or cannot be used due to lack of mana. Does not account for spell cooldowns (see GetSpellCooldown() -- returns 1 if other conditions allow for casting the spell (e.g. if the spell can only be cast while outdoors).</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="isUsable">
      <Description>1 if the spell is castable; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="notEnoughMana">
      <Description>1 if the player lacks the resources (e.g. mana, energy, runes) to cast the spell; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsUsingVehicleControls" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsVehicleAimAngleAdjustable" Priority="0" ImageType="Method">
    <Signature>hasAngleControl = IsVehicleAimAngleAdjustable()</Signature>
    <Description>Returns whether the player is controlling a vehicle weapon with adjustable aim angle</Description>
    <ReturnList Name="hasAngleControl">
      <Description>1 if the player is controlling a vehicle weapon with adjustable aim angle; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsVehicleAimPowerAdjustable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsVoiceChatAllowed" Priority="0" ImageType="Method">
    <Signature>isAllowed = IsVoiceChatAllowed()</Signature>
    <Description>Returns whether the player is allowed to enable the voice chat feature</Description>
    <ReturnList Name="isAllowed">
      <Description>1 if voice chat is allowed; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsVoiceChatAllowedByServer" Priority="0" ImageType="Method">
    <Signature>IsVoiceChatAllowedByServer()</Signature>
    <Description>Returns whether voice chat is supported by the realm server</Description>
  </WowApi>
  <WowApi Name="IsVoiceChatEnabled" Priority="0" ImageType="Method">
    <Signature>isEnabled = IsVoiceChatEnabled()</Signature>
    <Description>Returns whether the voice chat system is enabled</Description>
    <ReturnList Name="isEnabled">
      <Description>1 if the voice chat system is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsVoidStorageReady" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="IsWindowsClient" Priority="0" ImageType="Method">
    <Signature>isWindows = IsWindowsClient()</Signature>
    <Description>Returns whether the player is using the Windows game client</Description>
    <ReturnList Name="isWindows">
      <Description>1 if running the Windows client; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsXPUserDisabled" Priority="0" ImageType="Method">
    <Signature>isDisabled = IsXPUserDisabled()</Signature>
    <Description>Returns whether experience gain has been disabled for the player</Description>
    <ReturnList Name="isDisabled">
      <Description>True if experience gain has been disabled for the player; false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="IsZoomOutAvailable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ItemAddedToArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ItemHasRange" Priority="0" ImageType="Method">
    <Signature>hasRange = ItemHasRange(itemID) or ItemHasRange("itemName") or ItemHasRange("itemLink")</Signature>
    <Description>Returns whether an item has a range limitation for its use. For example, Mistletoe can only be used on another character within a given range of the player, but a Hearthstone has no target and thus no range restriction. Returns nil for items which have a range restriction but are area-targeted and not unit-targeted (e.g. grenades).</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="hasRange">
      <Description>1 if the item has an effective range; otherwise nil. (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextGetCreator" Priority="0" ImageType="Method">
    <Signature>creator = ItemTextGetCreator()</Signature>
    <Description>Returns the original author of the currently viewed text item. Used for mail messages sent by other players; when the player makes a permanent copy of a letter and reads it from inventory, the default UI uses this function to display a signature (e.g. "From, Leeroy") at the end of the message text.</Description>
    <ReturnList Name="creator">
      <Description>Creator of the text item, or nil if not available (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextGetItem" Priority="0" ImageType="Method">
    <Signature>text = ItemTextGetItem()</Signature>
    <Description>Returns the name of the currently viewed text item. Used for readable world objects (plaques, books on tables, etc) and readable inventory items (looted books/parchments/scrolls/etc, saved copies of mail messages). For saved mail messages the name returned is always "Plain Letter" (or localized equivalent); the message subject is lost when saving a copy.</Description>
    <ReturnList Name="text">
      <Description>Name of the text item (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextGetMaterial" Priority="0" ImageType="Method">
    <Signature>material = ItemTextGetMaterial()</Signature>
    <Description>Returns display style information for the currently viewed text item. The value returned can be used to look up background textures and text colors for display:
Background textures displayed in the default UI can be found by prepending "Interface\\ItemTextFrame\\ItemText-" and appending "-TopLeft", "-TopRight", "-BotLeft", "-BotRight" to the material string (e.g. "Interface\\ItemTextFrame\\ItemText-Stone-TopLeft").
Colors for body and title text can be found by calling GetMaterialTextColors(material) (a Lua function implemented in the Blizzard UI).
In cases where this function returns nil, the default UI uses the colors and textures for "Parchment".</Description>
    <ReturnList Name="material">
      <Description>String identifying a display style for the current text item, or nil for the default style (string)
Bronze - Colored metallic background
Marble - Light stone background
Parchment - Yellowed parchment background (default)
Silver - Gray metallic background
Stone - Dark stone background</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextGetPage" Priority="0" ImageType="Method">
    <Signature>page = ItemTextGetPage()</Signature>
    <Description>Returns the current page number in the currently viewed text item</Description>
    <ReturnList Name="page">
      <Description>Number of the currently displayed page (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextGetText" Priority="0" ImageType="Method">
    <Signature>text = ItemTextGetText()</Signature>
    <Description>Returns the text of the currently viewed text item. Used for readable world objects (plaques, books on tables, etc) and readable inventory items (looted books/parchments/scrolls/etc, saved copies of mail messages). Returns valid data only between the ITEM_TEXT_BEGIN and ITEM_TEXT_CLOSED events, with the ITEM_TEXT_READY event indicating when new text is available (as when changing pages).</Description>
    <ReturnList Name="text">
      <Description>Text to be displayed for the current page of the currently viewed text item (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextHasNextPage" Priority="0" ImageType="Method">
    <Signature>next = ItemTextHasNextPage()</Signature>
    <Description>Returns whether the currently viewed text item has additional pages</Description>
    <ReturnList Name="next">
      <Description>1 if the currently viewed text item has one or more pages beyond the current page; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ItemTextNextPage" Priority="0" ImageType="Method">
    <Signature>ItemTextNextPage()</Signature>
    <Description>Moves to the next page in the currently viewed text item. The ITEM_TEXT_READY event fires when text for the next page becomes available. Does nothing if already viewing the last page of text.</Description>
  </WowApi>
  <WowApi Name="ItemTextPrevPage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="JoinArena" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="JoinBattlefield" Priority="0" ImageType="Method">
    <Signature>JoinBattlefield(index, asGroup)</Signature>
    <Description>Joins the queue for a battleground instance</Description>
    <ArgumentList Name="index">
      <Description>Index in the battleground queue listing (1 for the first available instance, or between 2 and GetNumBattlefields() for other instances) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="asGroup">
      <Description>True to enter the player's entire party/raid in the queue; false to enter the player only (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="JoinChannelByName" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="JoinLFG" Priority="0" ImageType="Method">
    <Signature>JoinLFG()</Signature>
    <Description>Joins the player to the LFG system. This function just signals to the server that the player is joining the LFG system. In order to actually queue for any dungeons, the SetLFGDungeon function must be called for each dungeon the player wishes to queue for.
For the 'random dungeon' queues, these are a single numeric identifier that will queue the player for any of the dungeons in that category. You can obtain this number by opening the LFD frame and running /dump LFDQueueFrame.type.</Description>
  </WowApi>
  <WowApi Name="JoinPermanentChannel" Priority="0" ImageType="Method">
    <Signature>zoneChannel, channelName = JoinPermanentChannel("name" [, "password" [, chatFrameIndex [, enableVoice]]])</Signature>
    <Description>Joins a channel, saving associated chat window settings</Description>
    <ArgumentList Name="name">
      <Description>Name of the channel to join (string) </Description>
    </ArgumentList>
    <ArgumentList Name="password">
      <Description>Password to use when joining (string) </Description>
    </ArgumentList>
    <ArgumentList Name="chatFrameIndex">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) in which to subscribe to the channel (number) </Description>
    </ArgumentList>
    <ArgumentList Name="enableVoice">
      <Description>True to enable voice in the channel; otherwise false (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="zoneChannel">
      <Description>0 for non-zone channels, otherwise a numeric index specific to that channel (number) </Description>
    </ReturnList>
    <ReturnList Name="channelName">
      <Description>Display name of the channel, if the channel was a zone channel (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="JoinRatedBattlefield" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="JoinTemporaryChannel" Priority="0" ImageType="Method">
    <Signature>JoinTemporaryChannel("channel")</Signature>
    <Description>Joins a channel, but does not save associated chat window settings</Description>
    <ArgumentList Name="channel">
      <Description>Name of a channel to join (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="JumpOrAscendStart" Priority="0" ImageType="Method">
    <Signature>JumpOrAscendStart()</Signature>
    <Description>Causes the player character to jump (or begins ascent if swimming or flying). Used by the JUMP binding, which also controls ascent when swimming or flying.</Description>
  </WowApi>
  <WowApi Name="KBArticle_BeginLoading" Priority="0" ImageType="Method">
    <Signature>KBArticle_BeginLoading(articleId, searchType)</Signature>
    <Description>Requests a specific knowledge base article from the server</Description>
    <ArgumentList Name="articleId">
      <Description>The unique articleId to request (number) </Description>
    </ArgumentList>
    <ArgumentList Name="searchType">
      <Description>The search type of the request (number)
1 - Default "top issues" search
2 - Search for specific text</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="KBArticle_GetData" Priority="0" ImageType="Method">
    <Signature>id, subject, subjectAlt, text, keywords, languageId, isHot = KBArticle_GetData()</Signature>
    <Description>Returns information about the last requested knowledge base article. Only available once the KNOWLEDGE_BASE_ARTICLE_LOAD_SUCCESS event has fired following an article request.</Description>
    <ReturnList Name="id">
      <Description>A unique identifier for the article (number) </Description>
    </ReturnList>
    <ReturnList Name="subject">
      <Description>The subject of the article (string) </Description>
    </ReturnList>
    <ReturnList Name="subjectAlt">
      <Description>Alternate text for the article subject (string) </Description>
    </ReturnList>
    <ReturnList Name="text">
      <Description>The body of the article (string) </Description>
    </ReturnList>
    <ReturnList Name="keywords">
      <Description>A comma separated list of keywords for the article (string) </Description>
    </ReturnList>
    <ReturnList Name="languageId">
      <Description>Identifier for the article's language (ee KBSetup_GetLanguageData) (number) </Description>
    </ReturnList>
    <ReturnList Name="isHot">
      <Description>true if the article is a "Hot Item", otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBArticle_IsLoaded" Priority="0" ImageType="Method">
    <Signature>isLoaded = KBArticle_IsLoaded()</Signature>
    <Description>Returns whether the requested knowledge base article has been loaded. The KNOWLEDGE_BASE_ARTICLE_LOAD_SUCCESS also indicates that the requested article is available; this function presents an alternative that can be used across UI reloads or login/logout.</Description>
    <ReturnList Name="isLoaded">
      <Description>True if data for the last requested article is available; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBQuery_BeginLoading" Priority="0" ImageType="Method">
    <Signature>KBQuery_BeginLoading("searchText", categoryIndex, subcategoryIndex, numArticles, page)</Signature>
    <Description>Queries the knowledge base server for articles</Description>
    <ArgumentList Name="searchText">
      <Description>The search string to use. The empty string will search for all articles in the given category (string) </Description>
    </ArgumentList>
    <ArgumentList Name="categoryIndex">
      <Description>The category index (number) </Description>
    </ArgumentList>
    <ArgumentList Name="subcategoryIndex">
      <Description>The subcategory index (number) </Description>
    </ArgumentList>
    <ArgumentList Name="numArticles">
      <Description>The number of articles to be returned for each page (number) </Description>
    </ArgumentList>
    <ArgumentList Name="page">
      <Description>The page of the total results that should be displayed. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="KBQuery_GetArticleHeaderCount" Priority="0" ImageType="Method">
    <Signature>articleHeaderCount = KBQuery_GetArticleHeaderCount()</Signature>
    <Description>Returns the number of articles on the current knowledge base search result page</Description>
    <ReturnList Name="articleHeaderCount">
      <Description>The number of articles on the current knowledge base search result base page (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBQuery_GetArticleHeaderData" Priority="0" ImageType="Method">
    <Signature>articleId, title, isHotIssue, isRecentlyUpdated = KBQuery_GetArticleHeaderData(index)</Signature>
    <Description>Returns information about an article returned in a knowledge base query</Description>
    <ArgumentList Name="index">
      <Description>The index of the article to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="articleId">
      <Description>A unique articleId for the article (number) </Description>
    </ReturnList>
    <ReturnList Name="title">
      <Description>The title of the article (string) </Description>
    </ReturnList>
    <ReturnList Name="isHotIssue">
      <Description>true if the article is a "Hot Issue", otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isRecentlyUpdated">
      <Description>true if the article has been recently updated, otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBQuery_GetTotalArticleCount" Priority="0" ImageType="Method">
    <Signature>totalArticleHeaderCount = KBQuery_GetTotalArticleCount()</Signature>
    <Description>Returns the total number of articles returned for the given query</Description>
    <ReturnList Name="totalArticleHeaderCount">
      <Description>The total number of articles returned for the given query (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBQuery_IsLoaded" Priority="0" ImageType="Method">
    <Signature>isLoaded = KBQuery_IsLoaded()</Signature>
    <Description>Returns whether results of a knowledge base query have been loaded. The KNOWLEDGE_BASE_QUERY_LOAD_SUCCESS also indicates that the requested results are available; this function presents an alternative that can be used across UI reloads or login/logout.</Description>
    <ReturnList Name="isLoaded">
      <Description>True if query results are available; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_BeginLoading" Priority="0" ImageType="Method">
    <Signature>KBSetup_BeginLoading(numArticles, currentPage)</Signature>
    <Description>Loads a maximum number of "Top Issues" from a given page</Description>
    <ArgumentList Name="numArticles">
      <Description>The number of articles displayed per page. This is typically the constant KBASE_NUM_ARTICLES_PER_PAGE (number) </Description>
    </ArgumentList>
    <ArgumentList Name="currentPage">
      <Description>The page to display (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="KBSetup_GetArticleHeaderCount" Priority="0" ImageType="Method">
    <Signature>articleHeaderCount = KBSetup_GetArticleHeaderCount()</Signature>
    <Description>Returns the number of "Top Issues" articles on the current page</Description>
    <ReturnList Name="articleHeaderCount">
      <Description>The number of "Top Issues" articles on the current page (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetArticleHeaderData" Priority="0" ImageType="Method">
    <Signature>articleId, title, isHotIssue, isRecentlyUpdated = KBSetup_GetArticleHeaderData(index)</Signature>
    <Description>Returns header information about a "Top Issue" article</Description>
    <ArgumentList Name="index">
      <Description>The index of the article to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="articleId">
      <Description>A unique articleId for the article (number) </Description>
    </ReturnList>
    <ReturnList Name="title">
      <Description>The title of the article (string) </Description>
    </ReturnList>
    <ReturnList Name="isHotIssue">
      <Description>true if the article is a "Hot Issue", otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="isRecentlyUpdated">
      <Description>true if the article has been recently updated, otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetCategoryCount" Priority="0" ImageType="Method">
    <Signature>numCategories = KBSetup_GetCategoryCount()</Signature>
    <Description>Returns the number of available knowledge base categories</Description>
    <ReturnList Name="numCategories">
      <Description>The number of available knowledge base categories (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetCategoryData" Priority="0" ImageType="Method">
    <Signature>categoryId, name = KBSetup_GetCategoryData(index)</Signature>
    <Description>Returns information about a knowledge base category</Description>
    <ArgumentList Name="index">
      <Description>The index of the category (number) </Description>
    </ArgumentList>
    <ReturnList Name="categoryId">
      <Description>The unique identifier for the given category (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the category (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetLanguageCount" Priority="0" ImageType="Method">
    <Signature>numLanguages = KBSetup_GetLanguageCount()</Signature>
    <Description>Returns the number of available knowledge base languages</Description>
    <ReturnList Name="numLanguages">
      <Description>The number of available knowledge base languages (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetLanguageData" Priority="0" ImageType="Method">
    <Signature>languageId, name = KBSetup_GetLanguageData(index)</Signature>
    <Description>Returns information about a given knowledge base language</Description>
    <ArgumentList Name="index">
      <Description>Index of a language to query (between 1 and KBSetup_GetLanguageCount() (number) </Description>
    </ArgumentList>
    <ReturnList Name="languageId">
      <Description>A number identifying the language in article headers (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the language (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetSubCategoryCount" Priority="0" ImageType="Method">
    <Signature>numSubCategories = KBSetup_GetSubCategoryCount(index)</Signature>
    <Description>Returns the number of available subcategories for a given category</Description>
    <ArgumentList Name="index">
      <Description>The index of the category (number) </Description>
    </ArgumentList>
    <ReturnList Name="numSubCategories">
      <Description>The number of available subcategories (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetSubCategoryData" Priority="0" ImageType="Method">
    <Signature>categoryId, name = KBSetup_GetSubCategoryData(index, subindex)</Signature>
    <Description>Returns information a knowledge base subcategory</Description>
    <ArgumentList Name="index">
      <Description>The index of the category (number) </Description>
    </ArgumentList>
    <ArgumentList Name="subindex">
      <Description>The index of the subcategory (number) </Description>
    </ArgumentList>
    <ReturnList Name="categoryId">
      <Description>The unique categoryId for the given subcategory (number) </Description>
    </ReturnList>
    <ReturnList Name="name">
      <Description>The name of the subcategory (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSetup_GetTotalArticleCount" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="KBSetup_IsLoaded" Priority="0" ImageType="Method">
    <Signature>isLoaded = KBSetup_IsLoaded()</Signature>
    <Description>Returns whether the knowledge base default query has completed successfully. The KNOWLEDGE_BASE_SETUP_LOAD_SUCCESS also indicates that the knowledge base setup is complete; this function presents an alternative that can be used across UI reloads or login/logout.</Description>
    <ReturnList Name="isLoaded">
      <Description>True if results for the knowledge base's default "Top Issues" query are available; false if a query is in progress or has failed (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSystem_GetMOTD" Priority="0" ImageType="Method">
    <Signature>text = KBSystem_GetMOTD()</Signature>
    <Description>Returns the currently knowledge base MOTD</Description>
    <ReturnList Name="text">
      <Description>The message of the day for the knowledge base system (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSystem_GetServerNotice" Priority="0" ImageType="Method">
    <Signature>text = KBSystem_GetServerNotice()</Signature>
    <Description>Returns the text of the knowledge base server system notice</Description>
    <ReturnList Name="text">
      <Description>The text of the knowledgebase system server notice (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="KBSystem_GetServerStatus" Priority="0" ImageType="Method">
    <Signature>statusMessage = KBSystem_GetServerStatus()</Signature>
    <Description>Returns the knowledge base server system status message</Description>
    <ReturnList Name="statusMessage">
      <Description>The knowledge base server status message, or nil (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="LFGTeleport" Priority="0" ImageType="Method">
    <Signature>LFGTeleport(portOut)</Signature>
    <Description>Teleports the player to or from their current LFG dungeon</Description>
    <ArgumentList Name="portOut">
      <Description>A boolean flag that indicates if the player is trying to teleport out of the dungeon, or not. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LearnTalent" Priority="0" ImageType="Method">
    <Signature>LearnTalent(tabIndex, talentIndex, isPet, talentGroup)</Signature>
    <Description>Learns a talent, spending one talent point</Description>
    <ArgumentList Name="tabIndex">
      <Description>Index of a talent tab (between 1 and GetNumTalentTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="talentIndex">
      <Description>Index of a talent option (between 1 and GetNumTalents()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="isPet">
      <Description>True to edit talents for the player's pet, false to edit talents for the player (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="talentGroup">
      <Description>Which set of talents to edit, if the player has Dual Talent Specialization enabled (number)
1 - Primary Talents
2 - Secondary Talents
nil - Currently active talents</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LearnTalents" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="LeaveBattlefield" Priority="0" ImageType="Method">
    <Signature>LeaveBattlefield()</Signature>
    <Description>Immediately exits the current battleground instance. Returns the player to the location from which he or she joined the battleground and applies the Deserter debuff.</Description>
  </WowApi>
  <WowApi Name="LeaveChannelByName" Priority="0" ImageType="Method">
    <Signature>LeaveChannelByName("name")</Signature>
    <Description>Leaves a chat channel</Description>
    <ArgumentList Name="name">
      <Description>Name of a chat channel to leave (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LeaveLFG" Priority="0" ImageType="Method">
    <Signature>LeaveLFG()</Signature>
    <Description>Leave the LFG queue.</Description>
  </WowApi>
  <WowApi Name="LeaveParty" Priority="0" ImageType="Method">
    <Signature>LeaveParty()</Signature>
    <Description>Exits the current party or raid. If there are only two characters in the party or raid, causes the party or raid to be disbanded.</Description>
  </WowApi>
  <WowApi Name="ListChannelByName" Priority="0" ImageType="Method">
    <Signature>ListChannelByName("channel") or ListChannelByName(channelIndex)</Signature>
    <Description>Requests the list of participants in a chat channel. Fires the CHAT_MSG_CHANNEL_LIST event listing the names of all characters in the channel.</Description>
    <ArgumentList Name="channel">
      <Description>Name of a channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelIndex">
      <Description>Index of a channel (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ListChannels" Priority="0" ImageType="Method">
    <Signature>ListChannels()</Signature>
    <Description>Requests a list of channels joined by the player. Fires the CHAT_MSG_CHANNEL_LIST event listing the names and indices of all channels joined by the player.</Description>
  </WowApi>
  <WowApi Name="LoadAddOn" Priority="0" ImageType="Method">
    <Signature>loaded, reason = LoadAddOn("name") or LoadAddOn(index)</Signature>
    <Description>Loads a LoadOnDemand-capable addon. If the given addon has dependencies which are also LoadOnDemand-capable, those addons will be loaded as well. This function will not load disabled addons.</Description>
    <ArgumentList Name="name">
      <Description>Name of an addon (name of the addon's folder and TOC file, not the Title found in the TOC) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an addon in the addon list (between 1 and GetNumAddOns()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="loaded">
      <Description>1 if loading the addon was successful; otherwise nil (number) </Description>
    </ReturnList>
    <ReturnList Name="reason">
      <Description>If the addon could not be loaded, an unlocalized string token indicating the reason for failure. Localized strings for display can be found by prepending "ADDON_"; e.g. ADDON_DEP_MISSING == "Dependency missing". (string)
BANNED - Banned
CORRUPT - Corrupt
DEP_BANNED - Dependency banned
DEP_CORRUPT - Dependency corrupt
DEP_DISABLED - Dependency disabled
DEP_INCOMPATIBLE - Dependency incompatible
DEP_INSECURE - Dependency insecure
DEP_INTERFACE_VERSION - Dependcy out of date
DEP_MISSING - Dependency missing
DEP_NOT_DEMAND_LOADED - Dependency not loadable on demand
DISABLED - Disabled
INCOMPATIBLE - Incompatible
INSECURE - Insecure
INTERFACE_VERSION - Out of Date
MISSING - Missing
NOT_DEMAND_LOADED - Not loadable on demand</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="LoadBindings" Priority="0" ImageType="Method">
    <Signature>LoadBindings(set)</Signature>
    <Description>Loads a set of key bindings. The UPDATE_BINDINGS event fires when the new bindings have taken effect.</Description>
    <ArgumentList Name="set">
      <Description>A set of key bindings to load (number)
0 - Default key bindings
1 - Account-wide key bindings
2 - Character-specific key bindings</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LoadURLIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="LoggingChat" Priority="0" ImageType="Method">
    <Signature>isLogging = LoggingChat(toggle)</Signature>
    <Description>Enables or disables saving chat text to a file. Text received via the chat system (but not necessarily all text displayed in chat windows) will be saved to the file Logs/WoWChatLog.txt (path is relative to the folder containing the World of Warcraft client); the file is not actually updated until the player logs out.
Chat text in the log file follows a similar format to its display in-game, but with added timestamps.</Description>
    <ArgumentList Name="toggle">
      <Description>True to enable chat logging; false to disable; omit to just return the current state (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="isLogging">
      <Description>1 if chat logging is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="LoggingCombat" Priority="0" ImageType="Method">
    <Signature>isLogging = LoggingCombat(toggle)</Signature>
    <Description>Enables or disables saving combat log data to a file. Combat log data will be saved to the file Logs/WoWCombatLog.txt (path is relative to the folder containing the World of Warcraft client); the file is not actually updated until the player logs out.</Description>
    <ArgumentList Name="toggle">
      <Description>True to enable combat logging; false to disable; omit to just return the current state (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="isLogging">
      <Description>1 if combat logging is enabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="Logout" Priority="0" ImageType="Method">
    <Signature>Logout()</Signature>
    <Description>Attempts to log out and return to the character selection screen. Results vary based on current conditions:
If the player is in combat or under other temporary restrictions (e.g. falling), fires the UI_ERROR_MESSAGE event with a message indicating the player cannot log out at the moment.
If the player is not in an inn, major city, or other "rest" area (i.e. IsResting() returns nil), fires the PLAYER_CAMPING event, causing the default UI to show a countdown, logging the player out after a period of time if not canceled.
If the player is in a "rest" area, logs out immediately. </Description>
  </WowApi>
  <WowApi Name="LootSlot" Priority="0" ImageType="Method">
    <Signature>LootSlot(slot)</Signature>
    <Description>Attempts to pick up an item available as loot. If the item in the loot slot binds on pickup, the LOOT_BIND_CONFIRM event fires, indicating that ConfirmLootSlot(slot) must be called in order to actually loot the item. Please note: if you call this while processing a LOOT_OPENED event and it is the last item to be looted from the corpse, can cause LOOT_CLOSED to fire and be processed before your LOOT_OPENED event handler completes.</Description>
    <ArgumentList Name="slot">
      <Description>Index of a loot slot (between 1 and GetNumLootItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LootSlotHasItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MacOptions_AreOSShortcutsDisabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MacOptions_IsUniversalAccessEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MacOptions_OpenUniversalAccess" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MacOptions_SetOSShortcutsDisabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MakeMinigameMove" Priority="0" ImageType="Method">
    <Signature>MakeMinigameMove(moveType, param)</Signature>
    <Description>Sends movement instructions to ongoing minigame</Description>
    <ArgumentList Name="moveType">
      <Description>Unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="param">
      <Description>Unknown (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ModifyEquipmentSet" Priority="0" ImageType="Method">
    <Signature>ModifyEquipmentSet("oldSetName", "newSetName" [, icon])</Signature>
    <Description>Modifies the name and icon of an existing equipment set. If a set with the new name already exists, no action will take place.
As with SaveEquipmentSet(), you can use set names consisting of more than 16 characters. However, it will be truncated if the user tries to change the sets icon in the default UI afterwards.</Description>
    <ArgumentList Name="oldSetName">
      <Description>Name of the set to be modified (string) </Description>
    </ArgumentList>
    <ArgumentList Name="newSetName">
      <Description>New name for this set (string) </Description>
    </ArgumentList>
    <ArgumentList Name="icon">
      <Description>Index of an icon to associate with the set: between 1 and GetNumMacroIcons() for an icon from the set of macro icons; values between -INVSLOT_FIRST_EQUIPPED and -INVSLOT_LAST_EQUIPPED for the icon of an item in the equipment set at that (negative) inventoryID (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MouseOverrideCinematicDisable" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MouselookStart" Priority="0" ImageType="Method">
    <Signature>MouselookStart()</Signature>
    <Description>Enables mouselook mode, in which cursor movement rotates the camera</Description>
  </WowApi>
  <WowApi Name="MouselookStop" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MoveAndSteerStart" Priority="0" ImageType="Method">
    <Signature>MoveAndSteerStart()</Signature>
    <Description>Begins moving the player character forward while steering via mouse movement. After calling this function, the player character begins moving forward while cursor movement rotates (or steers) the character, altering yaw (facing) and/or pitch (vertical movement angle) as well as camera position.
Equivalent to calling both CameraOrSelectOrMoveStart and TurnOrActionStart without calling the respective Stop functions; i.e. holding both left and right mouse buttons down. Used by the MOVEANDSTEER binding, which can be customized to allow alternate access to this action if the player's system does not allow pressing multiple mouse buttons at once.</Description>
  </WowApi>
  <WowApi Name="MoveAndSteerStop" Priority="0" ImageType="Method">
    <Signature>MoveAndSteerStop()</Signature>
    <Description>Ends movement initiated by MoveAndSteerStart. After calling this function, forward movement and character steering stops and normal cursor movement resumes.
Used by the MOVEANDSTEER binding.</Description>
  </WowApi>
  <WowApi Name="MoveBackwardStart" Priority="0" ImageType="Method">
    <Signature>MoveBackwardStart()</Signature>
    <Description>Begins moving the player character backward. Used by the MOVEBACKWARD binding.</Description>
  </WowApi>
  <WowApi Name="MoveBackwardStop" Priority="0" ImageType="Method">
    <Signature>MoveBackwardStop()</Signature>
    <Description>Ends movement initiated by MoveBackwardStart</Description>
  </WowApi>
  <WowApi Name="MoveForwardStart" Priority="0" ImageType="Method">
    <Signature>MoveForwardStart()</Signature>
    <Description>Begins moving the player character forward. Used by the MOVEFORWARD binding.</Description>
  </WowApi>
  <WowApi Name="MoveForwardStop" Priority="0" ImageType="Method">
    <Signature>MoveForwardStop()</Signature>
    <Description>Ends movement initiated by MoveForwardStart</Description>
  </WowApi>
  <WowApi Name="MoveViewDownStart" Priority="0" ImageType="Method">
    <Signature>MoveViewDownStart()</Signature>
    <Description>Begins orbiting the camera downward (to look upward)</Description>
  </WowApi>
  <WowApi Name="MoveViewDownStop" Priority="0" ImageType="Method">
    <Signature>MoveViewDownStop()</Signature>
    <Description>Ends camera movement initiated by MoveViewDownStart</Description>
  </WowApi>
  <WowApi Name="MoveViewInStart" Priority="0" ImageType="Method">
    <Signature>MoveViewInStart()</Signature>
    <Description>Begins zooming the camera inward (towards/through the player character)</Description>
  </WowApi>
  <WowApi Name="MoveViewInStop" Priority="0" ImageType="Method">
    <Signature>MoveViewInStop()</Signature>
    <Description>Ends camera movement initiated by MoveViewInStart</Description>
  </WowApi>
  <WowApi Name="MoveViewLeftStart" Priority="0" ImageType="Method">
    <Signature>MoveViewLeftStart()</Signature>
    <Description>Begins orbiting the camera around the player character to the left. "Left" here is relative to the player's facing; i.e. the camera orbits clockwise if looking down. Moving the camera to the left causes it to look towards the character's right. </Description>
  </WowApi>
  <WowApi Name="MoveViewLeftStop" Priority="0" ImageType="Method">
    <Signature>MoveViewLeftStop()</Signature>
    <Description>Ends camera movement initiated by MoveViewLeftStart</Description>
  </WowApi>
  <WowApi Name="MoveViewOutStart" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MoveViewOutStop" Priority="0" ImageType="Method">
    <Signature>MoveViewOutStop()</Signature>
    <Description>Ends camera movement initiated by MoveViewOutStart</Description>
  </WowApi>
  <WowApi Name="MoveViewRightStart" Priority="0" ImageType="Method">
    <Signature>MoveViewRightStart()</Signature>
    <Description>Begins orbiting the camera around the player character to the right. "Right" here is relative to the player's facing; i.e. the camera orbits counter--clockwise if looking down. Moving the camera to the right causes it to look towards the character's left. </Description>
  </WowApi>
  <WowApi Name="MoveViewRightStop" Priority="0" ImageType="Method">
    <Signature>MoveViewRightStop()</Signature>
    <Description>Ends camera movement initiated by MoveViewRightStart</Description>
  </WowApi>
  <WowApi Name="MoveViewUpStart" Priority="0" ImageType="Method">
    <Signature>MoveViewUpStart()</Signature>
    <Description>Begins orbiting the camera upward (to look down)</Description>
  </WowApi>
  <WowApi Name="MoveViewUpStop" Priority="0" ImageType="Method">
    <Signature>MoveViewUpStop()</Signature>
    <Description>Ends camera movement initiated by MoveViewUpStart</Description>
  </WowApi>
  <WowApi Name="MovieRecording_Cancel" Priority="0" ImageType="Method">
    <Signature>MovieRecording_Cancel()</Signature>
    <Description>Cancels video recording and compression. If a recording is in progress, recording is stopped and the results discarded. If compression is in progress, compression is stopped and the uncompressed portion of the movie is deleted.</Description>
  </WowApi>
  <WowApi Name="MovieRecording_DataRate" Priority="0" ImageType="Method">
    <Signature>dataRate = MovieRecording_DataRate(width, framerate, sound)</Signature>
    <Description>Returns the data rate required for a given set of video recording parameters. The value returned is a prediction of the rate at which data will be written to the hard drive while recording -- if the hardware cannot support this data rate, game performance may suffer and recording may stop.</Description>
    <ArgumentList Name="width">
      <Description>Width of the output video (in pixels) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="framerate">
      <Description>Number of video frames to be recorded per second (number) </Description>
    </ArgumentList>
    <ArgumentList Name="sound">
      <Description>1 if game audio is to be captured with video; otherwise 0 (number) </Description>
    </ArgumentList>
    <ReturnList Name="dataRate">
      <Description>Summary of the data rate (e.g. "438.297 KB/s", "11.132 MB/s") (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_DeleteMovie" Priority="0" ImageType="Method">
    <Signature>MovieRecording_DeleteMovie("filename")</Signature>
    <Description>Deletes an uncompressed movie</Description>
    <ArgumentList Name="filename">
      <Description>Path to an uncompressed movie (as provided in the MOVIE_UNCOMPRESSED_MOVIE event) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MovieRecording_GetAspectRatio" Priority="0" ImageType="Method">
    <Signature>ratio = MovieRecording_GetAspectRatio()</Signature>
    <Description>Returns the aspect ratio of the game display. Used in the default UI to calculate dimensions for scaling captured video to predetermined widths.
For example, if the aspect ratio is 0.75 (as on a 1600x1200 screen), a movie scaled to 640 pixels wide will be 480 pixels tall; but if the aspect ratio is 0.625 (as on a 1440x900 screen), a movie scaled to 640 pixels wide will be 400 pixels tall.</Description>
    <ReturnList Name="ratio">
      <Description>Ratio of the game display's width to its height (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_GetMovieFullPath" Priority="0" ImageType="Method">
    <Signature>path = MovieRecording_GetMovieFullPath()</Signature>
    <Description>Returns a path to the movie currently being recorded or compressed. If no movie is being recorded or compressed, returns either the empty string ("") or the path of the last movie recorded/compressed.</Description>
    <ReturnList Name="path">
      <Description>Path to the movie currently being recorded or compressed, relative to the folder containing the World of Warcraft app (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_GetProgress" Priority="0" ImageType="Method">
    <Signature>recovering, progress = MovieRecording_GetProgress()</Signature>
    <Description>Returns information about movie compression progress</Description>
    <ReturnList Name="recovering">
      <Description>True if a previous compression was interrupted (e.g. due to WoW being crashing or being forced to quit), indicating that recovery is being attempted on the file; otherwise false (boolean) </Description>
    </ReturnList>
    <ReturnList Name="progress">
      <Description>Progress of the movie compression process (0 = just started, 1 = finished) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_GetTime" Priority="0" ImageType="Method">
    <Signature>time = MovieRecording_GetTime()</Signature>
    <Description>Returns the amount of time since video recording was last started. Used in the default UI to show the length of the recording in progress when mousing over the recording indicator on the minimap.
May return a nonsensical value if no video has been recorded since logging in.</Description>
    <ReturnList Name="time">
      <Description>Amount of time since video recording was last started (HH:MM:SS) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_GetViewportWidth" Priority="0" ImageType="Method">
    <Signature>width = MovieRecording_GetViewportWidth()</Signature>
    <Description>Returns the current width of the game display. Used in the default UI to allow the current screen resolution (or an integral factor thereof) to be selected as the video recording resolution.</Description>
    <ReturnList Name="width">
      <Description>Width of the game display (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_IsCodecSupported" Priority="0" ImageType="Method">
    <Signature>isSupported = MovieRecording_IsCodecSupported(codecID)</Signature>
    <Description>Returns whether a video codec is supported on the current system</Description>
    <ArgumentList Name="codecID">
      <Description>Four-byte identifier of a QuickTime codec (number)
1635148593 - H.264 - supported natively by Apple devices like the iPod, iPhone and AppleTV; best ratio quality/size but slowest to compress
1768124260 - Apple Intermediate Codec - fastest to compress, but exclusive to Mac OS X
1835692129 - Motion JPEG - faster to compress than H.264 but it will generate a bigger file
1836070006 - MPEG-4 - supported by many digital cameras and iMovie</Description>
    </ArgumentList>
    <ReturnList Name="isSupported">
      <Description>true if the codec is supported on the current system, otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_IsCompressing" Priority="0" ImageType="Method">
    <Signature>isCompressing = MovieRecording_IsCompressing()</Signature>
    <Description>Returns whether a movie file is currently being compressed</Description>
    <ReturnList Name="isCompressing">
      <Description>true if the client is currently compressing a recording; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_IsCursorRecordingSupported" Priority="0" ImageType="Method">
    <Signature>isSupported = MovieRecording_IsCursorRecordingSupported()</Signature>
    <Description>Returns whether the current system supports recording the mouse cursor in movies</Description>
    <ReturnList Name="isSupported">
      <Description>True if the cursor recording option should be enabled; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_IsRecording" Priority="0" ImageType="Method">
    <Signature>isRecording = MovieRecording_IsRecording()</Signature>
    <Description>Returns whether movie recording is currently in progress</Description>
    <ReturnList Name="isRecording">
      <Description>1 if the client is currently recording, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_IsSupported" Priority="0" ImageType="Method">
    <Signature>isSupported = MovieRecording_IsSupported()</Signature>
    <Description>Returns whether movie recording is supported on the current system</Description>
    <ReturnList Name="isSupported">
      <Description>true if the client supports video recording; otherwise nil (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="MovieRecording_MaxLength" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="MovieRecording_QueueMovieToCompress" Priority="0" ImageType="Method">
    <Signature>MovieRecording_QueueMovieToCompress("filename")</Signature>
    <Description>Queues an uncompressed movie for compression. If there are no items currently in the queue the movie will begin compressing immediately.</Description>
    <ArgumentList Name="filename">
      <Description>Path to an uncompressed movie (as provided in the MOVIE_UNCOMPRESSED_MOVIE event) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MovieRecording_SearchUncompressedMovie" Priority="0" ImageType="Method">
    <Signature>MovieRecording_SearchUncompressedMovie(enable)</Signature>
    <Description>Enables or disables a search for uncompressed movies. After calling this function with true, a MOVIE_UNCOMPRESSED_MOVIE fires for the first uncompressed movie found (causing the default UI to prompt the user to choose whether to compress, ignore, or delete the movie). Calling this function with false ignores the movie, causing the search to continue (firing a MOVIE_UNCOMPRESSED_MOVIE event for the next uncompressed movie found, and so forth).</Description>
    <ArgumentList Name="enable">
      <Description>True to begin searching for uncompressed movies, false to ignore a movie for compression (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MovieRecording_Toggle" Priority="0" ImageType="Method">
    <Signature>MovieRecording_Toggle()</Signature>
    <Description>Begins or ends video recording. Used by the MOVIE_RECORDING_STARTSTOP key binding.</Description>
  </WowApi>
  <WowApi Name="MovieRecording_ToggleGUI" Priority="0" ImageType="Method">
    <Signature>MovieRecording_ToggleGUI()</Signature>
    <Description>Enables or disables inclusion of UI elements in a video recording. Equivalent to the MovieRecordingGUI CVar, but provided as a convenience for the MOVIE_RECORDING_GUI so UI recording can be turned on or off while a movie is recording.</Description>
  </WowApi>
  <WowApi Name="MusicPlayer_BackTrack" Priority="0" ImageType="Method">
    <Signature>MusicPlayer_BackTrack()</Signature>
    <Description>Causes iTunes to return to the previous track played. Used by the iTunes Remote key bindings only available on the Mac OS X WoW client. Only has effect while the iTunes application is open.</Description>
  </WowApi>
  <WowApi Name="MusicPlayer_NextTrack" Priority="0" ImageType="Method">
    <Signature>MusicPlayer_NextTrack()</Signature>
    <Description>Causes iTunes to play the next track in sequence. Used by the iTunes Remote key bindings only available on the Mac OS X WoW client. Only has effect while the iTunes application is open.</Description>
  </WowApi>
  <WowApi Name="MusicPlayer_PlayPause" Priority="0" ImageType="Method">
    <Signature>MusicPlayer_PlayPause()</Signature>
    <Description>Causes iTunes to start or pause playback. Used by the iTunes Remote key bindings only available on the Mac OS X WoW client. Only has effect while the iTunes application is open.</Description>
  </WowApi>
  <WowApi Name="MusicPlayer_VolumeDown" Priority="0" ImageType="Method">
    <Signature>MusicPlayer_VolumeDown()</Signature>
    <Description>Causes iTunes to lower its playback volume. Affects the iTunes volume setting only, not the overall system volume or any of WoW's volume settings.
Used by the iTunes Remote key bindings only available on the Mac OS X WoW client. Only has effect while the iTunes application is open.</Description>
  </WowApi>
  <WowApi Name="MusicPlayer_VolumeUp" Priority="0" ImageType="Method">
    <Signature>MusicPlayer_VolumeUp()</Signature>
    <Description>Causes iTunes to raise its playback volume. Affects the iTunes volume setting only, not the overall system volume or any of WoW's volume settings.
Used by the iTunes Remote key bindings only available on the Mac OS X WoW client. Only has effect while the iTunes application is open.</Description>
  </WowApi>
  <WowApi Name="NeutralPlayerSelectFaction" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="NewGMTicket" Priority="0" ImageType="Method">
    <Signature>NewGMTicket("text", needResponse)</Signature>
    <Description>Opens a new GM support ticket. The default UI sets the needResponse flag to true for "Talk to a GM" and "Stuck" tickets, and false for "Report an issue" tickets.</Description>
    <ArgumentList Name="text">
      <Description>The text to be sent in the ticket (string) </Description>
    </ArgumentList>
    <ArgumentList Name="needResponse">
      <Description>true if the issue requires personal response from a GM; otherwise false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="NextView" Priority="0" ImageType="Method">
    <Signature>NextView()</Signature>
    <Description>Moves the camera to the next predefined setting. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().</Description>
  </WowApi>
  <WowApi Name="NoPlayTime" Priority="0" ImageType="Method">
    <Signature>hasNoTime = NoPlayTime()</Signature>
    <Description>Returns whether the player has exceeded the allowed play time limit. When in this state, the player is unable to gain loot or XP or complete quests and cannot use trade skills; returning to normal requires logging out of the game for a period of time (see GetBillingTimeRested).
Only used in locales where the length of play sessions is restricted (e.g. mainland China).</Description>
    <ReturnList Name="hasNoTime">
      <Description>1 if the player is out of play time, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="NotWhileDeadError" Priority="0" ImageType="Method">
    <Signature>NotWhileDeadError()</Signature>
    <Description>Causes the default UI to display an error message indicating that actions are disallowed while the player is dead. Fires a UI_ERROR_MESSAGE event containing a localized message identified by the global variable ERR_PLAYER_DEAD.</Description>
  </WowApi>
  <WowApi Name="NotifyInspect" Priority="0" ImageType="Method">
    <Signature>NotifyInspect("unit")</Signature>
    <Description>Marks a unit for inspection and requests talent data from the server. Information about the inspected item's equipment can be retrieved immediately using Inventory APIs (e.g. GetInventoryItemLink("target",1)). Talent data is not available immediately; the INSPECT_READY event fires once the inspected unit's talent information can be retrieved using Talent APIs (e.g. GetTalentInfo(1,1,true)).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to inspect (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="NumTaxiNodes" Priority="0" ImageType="Method">
    <Signature>numNodes = NumTaxiNodes()</Signature>
    <Description>Returns the number of flight points on the taxi map. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ReturnList Name="numNodes">
      <Description>Number of flight points on the taxi map (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="OfferPetition" Priority="0" ImageType="Method">
    <Signature>OfferPetition()</Signature>
    <Description>Requests an arena or guild charter signature from the targeted unit</Description>
  </WowApi>
  <WowApi Name="OffhandHasWeapon" Priority="0" ImageType="Method">
    <Signature>hasWeapon = OffhandHasWeapon()</Signature>
    <Description>Returns whether the player has an equipped weapon in the off hand slot</Description>
    <ReturnList Name="hasWeapon">
      <Description>1 if the player has a weapon equipped in the off hand slot; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="OpenCalendar" Priority="0" ImageType="Method">
    <Signature>OpenCalendar()</Signature>
    <Description>Queries the server for calendar status information. May cause one or more CALENDAR_UPDATE_* events to fire depending on the contents of the player's calendar. In the default UI, called when the calendar is shown.</Description>
  </WowApi>
  <WowApi Name="OpenTrainer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="OpeningCinematic" Priority="0" ImageType="Method">
    <Signature>OpeningCinematic()</Signature>
    <Description>Displays the introductory cinematic for the player's race. Only has effect if the player has never gained any experience.</Description>
  </WowApi>
  <WowApi Name="PartialPlayTime" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PartyLFGStartBackfill" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PetAbandon" Priority="0" ImageType="Method">
    <Signature>PetAbandon()</Signature>
    <Description>Releases the player's pet. For Hunter pets, this function sends the pet away, never to return (in the default UI, it's called when accepting the "Are you sure you want to permanently abandon your pet?" dialog). For other pets, this function is equivalent to PetDismiss().</Description>
  </WowApi>
  <WowApi Name="PetAggressiveMode" Priority="0" ImageType="Method">
    <Signature>PetAggressiveMode()</Signature>
    <Description>Enables aggressive mode for the player's pet. In this mode, the pet automatically attacks any nearby hostile targets.</Description>
  </WowApi>
  <WowApi Name="PetAssistMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PetAttack" Priority="0" ImageType="Method">
    <Signature>PetAttack(["unit"]) or PetAttack(["name"])</Signature>
    <Description>Instructs the pet to attack. The pet will attack the player's current target if no unit is specified.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to attack (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to attack (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PetCanBeAbandoned" Priority="0" ImageType="Method">
    <Signature>canAbandon = PetCanBeAbandoned()</Signature>
    <Description>Returns whether the player's pet can be abandoned. Only Hunter pets can be permanently abandoned.</Description>
    <ReturnList Name="canAbandon">
      <Description>1 if the player's pet can be abandoned, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PetCanBeDismissed" Priority="0" ImageType="Method">
    <Signature>canDismiss = PetCanBeDismissed()</Signature>
    <Description>Returns whether a Dismiss Pet command should be available for the player's pet. Returns 1 for hunter pets even though they use the Dismiss Pet (cast) spell instead of a Dismiss Pet (instant) command; the value of PetCanBeAbandoned() overrides this in causing the default UI to hide the command. Currently unused, but may be used in the future for other pets.</Description>
    <ReturnList Name="canDismiss">
      <Description>1 if a Dismiss Pet command should be available for the player's pet; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PetCanBeRenamed" Priority="0" ImageType="Method">
    <Signature>canRename = PetCanBeRenamed()</Signature>
    <Description>Returns whether the player's pet can be renamed. Only hunter pets can be renamed, and only once (barring use of a Certificate of Ownership).</Description>
    <ReturnList Name="canRename">
      <Description>1 if the player can rename the currently controlled pet, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PetDefensiveMode" Priority="0" ImageType="Method">
    <Signature>PetDefensiveMode()</Signature>
    <Description>Enables defensive mode for the player's pet. In this mode, the pet automatically attacks only units which attack it or the player or units the player is attacking.</Description>
  </WowApi>
  <WowApi Name="PetDismiss" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PetFollow" Priority="0" ImageType="Method">
    <Signature>PetFollow()</Signature>
    <Description>Instructs the pet to follow the player. If the pet is currently attacking a target, the pet will stop attacking.</Description>
  </WowApi>
  <WowApi Name="PetHasActionBar" Priority="0" ImageType="Method">
    <Signature>hasActionBar = PetHasActionBar()</Signature>
    <Description>Returns whether the player's current pet has an action bar</Description>
    <ReturnList Name="hasActionBar">
      <Description>Returns 1 if the player's pet has an action bar; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PetHasSpellbook" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PetMoveTo" Priority="0" ImageType="Method">
    <Signature>PetMoveTo()</Signature>
    <Description>Commands the player's pet to move to the targeted destination. Calling this only brings up the targeting display, the user must perform a second click to actually tell the pet to move.</Description>
  </WowApi>
  <WowApi Name="PetPassiveMode" Priority="0" ImageType="Method">
    <Signature>PetPassiveMode()</Signature>
    <Description>Enables passive mode for the player's pet. In this mode, the pet will not automatically attack any target.</Description>
  </WowApi>
  <WowApi Name="PetRename" Priority="0" ImageType="Method">
    <Signature>PetRename("name" [, "genitive" [, "dative" [, "accusative" [, "instrumental" [, "prepositional"]]]]])</Signature>
    <Description>Renames the currently controlled pet. Only Hunter pets can be renamed, and a given pet can only be renamed once (barring use of a Certificate of Ownership).</Description>
    <ArgumentList Name="name">
      <Description>New name for the pet (nominative form on Russian clients) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="genitive">
      <Description>Genitive form of the pet's new name; applies only on Russian clients (string) </Description>
    </ArgumentList>
    <ArgumentList Name="dative">
      <Description>Dative form of the pet's new name; applies only on Russian clients (string) </Description>
    </ArgumentList>
    <ArgumentList Name="accusative">
      <Description>Accusative form of the pet's new name; applies only on Russian clients (string) </Description>
    </ArgumentList>
    <ArgumentList Name="instrumental">
      <Description>Instrumental form of the pet's new name; applies only on Russian clients (string) </Description>
    </ArgumentList>
    <ArgumentList Name="prepositional">
      <Description>Prepositional form of the pet's new name; applies only on Russian clients (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PetStopAttack" Priority="0" ImageType="Method">
    <Signature>PetStopAttack()</Signature>
    <Description>Instructs the pet to stop attacking</Description>
  </WowApi>
  <WowApi Name="PetUsesPetFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PetWait" Priority="0" ImageType="Method">
    <Signature>PetWait()</Signature>
    <Description>Instructs the pet to stay at its current location. If the pet is currently attacking a target, the pet will stop attacking.</Description>
  </WowApi>
  <WowApi Name="PickupAction" Priority="0" ImageType="Method">
    <Signature>PickupAction(slot)</Signature>
    <Description>Puts the contents of an action bar slot onto the cursor or the cursor contents into an action bar slot. After an action is picked up via this function, it can only be placed into other action bar slots (with PlaceAction() or by calling PickupAction() again), even if the action is an item which could otherwise be placed elsewhere. Unlike many other "pickup" cursor functions, this function removes the picked-up action from the source slot -- an action slot can be emptied by calling this function followed by ClearCursor().
If the action slot is empty and the cursor already holds an action, a spell, a companion (mount or non-combat pet), a macro, an equipment set, or an item (with a "Use:" effect), it is put into the action slot. If both the cursor and the slot hold an action (or any of the above data types), the contents of the cursor and the slot are exchanged.</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupBagFromSlot" Priority="0" ImageType="Method">
    <Signature>PickupBagFromSlot(slot)</Signature>
    <Description>Puts an equipped container onto the cursor</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot containing a bag (see GetInventorySlotInfo(), ContainerIDToInventoryID()) (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupCompanion" Priority="0" ImageType="Method">
    <Signature>PickupCompanion("type", index)</Signature>
    <Description>Puts a non-combat pet or mount onto the cursor</Description>
    <ArgumentList Name="type">
      <Description>Type of companion (string)
CRITTER - A non-combat pet
MOUNT - A mount</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a companion (between 1 and GetNumCompanions(type)) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupContainerItem" Priority="0" ImageType="Method">
    <Signature>PickupContainerItem(container, slot)</Signature>
    <Description>Picks up an item from or puts an item into a slot in one of the player's bags or other containers. If the cursor is empty and the referenced container slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the container slot are exchanged.
An item picked up from a container is not removed from its slot (until put elsewhere); when an item is picked up, the slot becomes locked, preventing other changes to its contents until the disposition (movement, trade, mailing, auctioning, destruction, etc) of the picked-up item is resolved.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupCurrency" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PickupEquipmentSet" Priority="0" ImageType="Method">
    <Signature>PickupEquipmentSet(index)</Signature>
    <Description>Puts an equipment set (specified by index) on the cursor. Can be used to place an equipment set in an action bar slot.</Description>
    <ArgumentList Name="index">
      <Description>Index of an equipment set (between 1 and GetNumEquipmentSets()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupEquipmentSetByName" Priority="0" ImageType="Method">
    <Signature>PickupEquipmentSetByName("name")</Signature>
    <Description>Puts an equipment set on the cursor. Can be used to place an equipment set in an action bar slot.</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupGuildBankItem" Priority="0" ImageType="Method">
    <Signature>PickupGuildBankItem(tab, slot)</Signature>
    <Description>Picks up an item from or puts an item into the guild bank. If the cursor is empty and the referenced guild bank slot contains an item, that item is put onto the cursor. If the cursor contains an item and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the guild bank slot are exchanged.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (number) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot in the guild bank tab (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupGuildBankMoney" Priority="0" ImageType="Method">
    <Signature>PickupGuildBankMoney(amount)</Signature>
    <Description>Puts money from the guild bank onto the cursor. Money is not actually withdrawn from the guild bank; in the default UI, when the cursor "puts" the money into one of the player's bags, it calls WithdrawGuildBankMoney().</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money to pick up (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupInventoryItem" Priority="0" ImageType="Method">
    <Signature>PickupInventoryItem(slot)</Signature>
    <Description>Picks up an item from or puts an item into an equipment slot. If the cursor is empty and the referenced inventory slot contains an item, that item is put onto the cursor. If the cursor contains an item (which can be equipped in the slot) and the slot is empty, the item is placed into the slot. If both the cursor and the slot contain items, the contents of the cursor and the inventory slot are exchanged.
An item picked up from an inventory slot is not removed from the slot (until put elsewhere); when an item is picked up, the slot becomes locked, preventing other changes to its contents until the disposition (movement, trade, destruction, etc) of the picked-up item is resolved.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupItem" Priority="0" ImageType="Method">
    <Signature>PickupItem(itemID) or PickupItem("itemName") or PickupItem("itemLink")</Signature>
    <Description>Puts an arbitrary item onto the cursor. Puts an item onto the cursor regardless of its location (equipped, bags, bank or not even in the player's possession); can be used to put an item into an action slot (see PlaceAction()) even if the player does not currently hold the item. Since the item is not picked up from a specific location, this function cannot be used to move an item to another bag, trade it to another player, attach it to a mail message, destroyed, etc.</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupMacro" Priority="0" ImageType="Method">
    <Signature>PickupMacro(index) or PickupMacro("name")</Signature>
    <Description>Puts a macro onto the cursor</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupMerchantItem" Priority="0" ImageType="Method">
    <Signature>PickupMerchantItem(index)</Signature>
    <Description>Puts an item available for purchase from a vendor onto the cursor</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupPetAction" Priority="0" ImageType="Method">
    <Signature>PickupPetAction(index)</Signature>
    <Description>Puts the contents of a pet action slot onto the cursor or the cursor contents into a pet action slot. Only pet actions and spells from the "pet" portion of the spellbook can be placed into pet action slots.
If the cursor is empty and the referenced pet action slot contains an action, that action is put onto the cursor (but remains in the slot). If the cursor contains a pet action or pet spell and the slot is empty, the action/spell is placed into the slot. If both the cursor and the slot contain pet actions, the contents of the cursor and the pet action slot are exchanged.</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupPetSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PickupPlayerMoney" Priority="0" ImageType="Method">
    <Signature>PickupPlayerMoney(amount)</Signature>
    <Description>Puts an amount of the player's money onto the cursor. Money is not immediately deducted from the player's total savings (though it appears such on the default UI's money displays, which generally show GetMoney()-GetCursorMoney()).</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money to put on the cursor (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupSpell" Priority="0" ImageType="Method">
    <Signature>PickupSpell(spellID)</Signature>
    <Description>Puts a spell onto the cursor</Description>
    <ArgumentList Name="spellID">
      <Description>The spellID of the spell (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupSpellBookItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PickupStablePet" Priority="0" ImageType="Method">
    <Signature>PickupStablePet(index)</Signature>
    <Description>Puts a pet from the stables onto the cursor. Use with ClickStablePet to move pets between stabled and active status.</Description>
    <ArgumentList Name="index">
      <Description>Index of a stable slot (number)
0 - Active pet
1 to NUM_PET_STABLE_SLOTS - A stable slot</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PickupTalent" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PickupTradeMoney" Priority="0" ImageType="Method">
    <Signature>PickupTradeMoney(amount)</Signature>
    <Description>Puts money offered by the player for trade onto the cursor. Money put onto the cursor is subtracted from the amount offered for trade (see GetPlayerTradeMoney()).</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money to take from the trade window (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PitchDownStart" Priority="0" ImageType="Method">
    <Signature>PitchDownStart()</Signature>
    <Description>Begins adjusting the player character's angle of vertical movement downward. Affects only the angle or slope of movement for swimming or flying; has no immediately visible effect if the player is not moving, but alters the trajectory followed as soon as the player begins moving. Continuously adjusts pitch until the minimum angle is reached or PitchDownStop() is called.
Used by the PITCHDOWN binding.</Description>
  </WowApi>
  <WowApi Name="PitchDownStop" Priority="0" ImageType="Method">
    <Signature>PitchDownStop()</Signature>
    <Description>Ends movement initiated by PitchDownStart</Description>
  </WowApi>
  <WowApi Name="PitchUpStart" Priority="0" ImageType="Method">
    <Signature>PitchUpStart()</Signature>
    <Description>Begins adjusting the player character's angle of vertical movement upward. Affects only the angle or slope of movement for swimming or flying; has no immediately visible effect if the player is not moving, but alters the trajectory followed as soon as the player begins moving. Continuously adjusts pitch until the maximum angle is reached or PitchUpStop() is called.
Used by the PITCHUP binding.</Description>
  </WowApi>
  <WowApi Name="PitchUpStop" Priority="0" ImageType="Method">
    <Signature>PitchUpStop()</Signature>
    <Description>Ends movement initiated by PitchUpStart</Description>
  </WowApi>
  <WowApi Name="PlaceAction" Priority="0" ImageType="Method">
    <Signature>PlaceAction(slot)</Signature>
    <Description>Puts the contents of the cursor into an action bar slot. If the action slot is empty and the cursor already holds an action, a spell, a companion (mount or non-combat pet), a macro, an equipment set, or an item (with a "Use:" effect), it is put into the action slot. If both the cursor and the slot hold an action (or any of the above data types), the contents of the cursor and the slot are exchanged.
Does nothing if the cursor is empty.</Description>
    <ArgumentList Name="slot">
      <Description>Destination action bar slot (number, actionID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PlaceAuctionBid" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PlaceGlyphInSocket" Priority="0" ImageType="Method">
    <Signature>PlaceGlyphInSocket(socket)</Signature>
    <Description>Applies the glyph currently awaiting a target to a socket. Only valid during glyph application: when the player has activated the glyph item but before she has chosen the glyph slot to put it in (i.e. the glowing hand cursor is showing).
This function does not ask for confirmation before overwriting an existing glyph. However, calling this function only begins the "spellcast" that applies the glyph, so canceling glyph application is still possible.</Description>
    <ArgumentList Name="socket">
      <Description>Which glyph socket to apply the glyph to (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PlaceRaidMarker" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PlayAutoAcceptQuestSound" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PlayDance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PlayMusic" Priority="0" ImageType="Method">
    <Signature>PlayMusic("musicfile")</Signature>
    <Description>Plays an audio file as background music. Any other background music that is currently playing will be faded out as the new music begins; if the Sound_ZoneMusicNoDelay is set, music will loop continuously until StopMusic() is called.
WoW supports WAV, MP3 and Ogg audio formats.</Description>
    <ArgumentList Name="musicfile">
      <Description>Path to a music file (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PlaySound" Priority="0" ImageType="Method">
    <Signature>PlaySound("sound", "soundChannel")</Signature>
    <Description>Plays one of WoW's built-in sound effects. Only supports sounds found in the Sound\Interface directory within WoW's MPQ files; to play other built-in sounds or sounds in an addon directory, use PlaySoundFile().</Description>
    <ArgumentList Name="sound">
      <Description>Name of a built-in sound effect (string) </Description>
    </ArgumentList>
    <ArgumentList Name="soundChannel">
      <Description>The sound volume slider setting the sound should use. One of SFX, Music, Ambience or Master. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PlaySoundFile" Priority="0" ImageType="Method">
    <Signature>PlaySoundFile("soundFile", "soundChannel")</Signature>
    <Description>Plays an audio file at a given path. For a shorter way to specify one of WoW's built-in UI sound effects, see PlaySound().
WoW supports custom sound files using MP3 and Ogg audio formats.</Description>
    <ArgumentList Name="soundFile">
      <Description>A path to the sound file to be played (string) </Description>
    </ArgumentList>
    <ArgumentList Name="soundChannel">
      <Description>The sound volume slider setting the sound should use. One of SFX, Music, Ambience or Master. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PlaySoundKitID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PlayerCanTeleport" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PlayerHasHearthstone" Priority="0" ImageType="Method">
    <Signature>hasHearthstone = PlayerHasHearthstone()</Signature>
    <Description>Returns whether the player has a hearthstone in their bag</Description>
    <ReturnList Name="hasHearthstone">
      <Description>True if the player has a hearthstone in their bag; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PlayerIsPVPInactive" Priority="0" ImageType="Method">
    <Signature>isInactive = PlayerIsPVPInactive("name") or PlayerIsPVPInactive("unit")</Signature>
    <Description>Returns whether a battleground participant is inactive (and eligible for reporting as AFK)</Description>
    <ArgumentList Name="name">
      <Description>Name of a friendly player unit in the current battleground (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A friendly player unit in the current battleground (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isInactive">
      <Description>True if the unit can be reported as AFK; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PortGraveyard" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PositionMiniWorldMapArrowFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PositionWorldMapArrowFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PreloadMovie" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PrevView" Priority="0" ImageType="Method">
    <Signature>PrevView()</Signature>
    <Description>Moves the camera to the previous predefined setting. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().</Description>
  </WowApi>
  <WowApi Name="ProcessMapClick" Priority="0" ImageType="Method">
    <Signature>ProcessMapClick(clickX, clickY)</Signature>
    <Description>Possibly changes the WorldMap based on a mouse click. May change the map zone or zoom based on the click location: e.g. if the world map shows Dragonblight and one clicks in the area labeled "Wintergrasp" on the map, the current map zone changes to show Wintergrasp.</Description>
    <ArgumentList Name="clickX">
      <Description>Horizontal position of the click relative to the current world map (0 = left edge, 1 = right edge) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="clickY">
      <Description>Vertical position of the click relative to the current world map (0 = top, 1 = bottom) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ProcessQuestLogRewardFactions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="PromoteToAssistant" Priority="0" ImageType="Method">
    <Signature>PromoteToAssistant("unit") or PromoteToAssistant("name" [, exactMatch])</Signature>
    <Description>Promotes a raid member to raid assistant</Description>
    <ArgumentList Name="unit">
      <Description>A unit in the raid (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit in the raid (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PromoteToLeader" Priority="0" ImageType="Method">
    <Signature>PromoteToLeader("unit") or PromoteToLeader("name" [, exactMatch])</Signature>
    <Description>Promotes a player to party/raid leader</Description>
    <ArgumentList Name="unit">
      <Description>A unit in the party or raid (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a party member (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PurchaseSlot" Priority="0" ImageType="Method">
    <Signature>PurchaseSlot()</Signature>
    <Description>Purchases the next available bank slot. Only available while interacting with a banker NPC (i.e. between the BANKFRAME_OPENED and BANKFRAME_CLOSED events).</Description>
  </WowApi>
  <WowApi Name="PutItemInBackpack" Priority="0" ImageType="Method">
    <Signature>hadItem = PutItemInBackpack()</Signature>
    <Description>Puts the item on the cursor into the player's backpack. The item will be placed in the lowest numbered slot (containerSlotID) in the player's backpack.
Causes an error message (UI_ERROR_MESSAGE) if the backpack is full.</Description>
    <ReturnList Name="hadItem">
      <Description>1 if the cursor had a item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="PutItemInBag" Priority="0" ImageType="Method">
    <Signature>hadItem = PutItemInBag(container)</Signature>
    <Description>Puts the item on the cursor into one of the player's bags or other containers. The item will be placed in the lowest numbered slot (containerSlotID) in the container.
Causes an error message (UI_ERROR_MESSAGE) if the container is full. Cannot be used to place an item into the player's backpack; see PutItemInBackpack().</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ReturnList Name="hadItem">
      <Description>1 if the cursor had a item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="QueryAuctionItems" Priority="0" ImageType="Method">
    <Signature>QueryAuctionItems(["name" [, minLevel [, maxLevel [, invTypeIndex [, classIndex [, subClassIndex [, page [, isUsable [, minQuality [, getAll]]]]]]]]]])</Signature>
    <Description>Requests data from the server for the list of auctions meeting given search criteria. If any search criterion is omitted or nil, the search will include all possible values for that criterion.
Search queries are throttled, preventing abuse of the server by clients sending too many queries in short succession. Normal queries can be sent once every few seconds; mass queries return all results in the auction house instead of one "page" at a time, and can only be sent once every several minutes.
Query results are not returned immediately: the AUCTION_ITEM_LIST_UPDATE event fires once data is available; listing information can then be retrieved using GetAuctionItemInfo() or other Auction APIs.</Description>
    <ArgumentList Name="name">
      <Description>Full or partial item name to limit search results; will match any item whose name contains this string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="minLevel">
      <Description>Minimum required character level of items to limit search results (number) </Description>
    </ArgumentList>
    <ArgumentList Name="maxLevel">
      <Description>Maximum required character level of items to limit search results (number) </Description>
    </ArgumentList>
    <ArgumentList Name="invTypeIndex">
      <Description>Index of an item inventory type to limit search results (note that GetAuctionInvTypes(classIndex, subClassIndex) returns a list of token, display pairs for each inventory type; thus, to convert a token index from that list for use here, divide by 2 and round up) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="classIndex">
      <Description>Index of an item class to limit search results (in the list returned by GetAuctionItemClasses()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="subClassIndex">
      <Description>Index of an item subclass to limit search results (in the list returned by GetAuctionItemSubClasses(classIndex)) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="page">
      <Description>Which "page" of search results to list, if more than NUM_AUCTION_ITEMS_PER_PAGE (50) auctions are available; nil to query the first (or only) page (number) </Description>
    </ArgumentList>
    <ArgumentList Name="isUsable">
      <Description>True to limit search results to only items which can be used or equipped by the player character; otherwise false (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="minQuality">
      <Description>Minimum quality (rarity) level of items to limit search results (itemQuality) </Description>
    </ArgumentList>
    <ArgumentList Name="getAll">
      <Description>True to perform a mass query (returning all listings at once); false to perform a normal query (returning a large number of listings in "pages" of NUM_AUCTION_ITEMS_PER_PAGE [50] at a time) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QueryGuildBankLog" Priority="0" ImageType="Method">
    <Signature>QueryGuildBankLog(tab)</Signature>
    <Description>Requests the item transaction log for a guild bank tab from the server. Fires the GUILDBANKLOG_UPDATE event when transaction log information becomes available.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QueryGuildBankTab" Priority="0" ImageType="Method">
    <Signature>QueryGuildBankTab(tab)</Signature>
    <Description>Requests information about the contents of a guild bank tab from the server. Fires the GUILDBANKBAGSLOTS_CHANGED event when information about the tab's contents becomes available.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QueryGuildBankText" Priority="0" ImageType="Method">
    <Signature>QueryGuildBankText(tab)</Signature>
    <Description>Requests guild bank tab info text from the server. The text is not returned immediately; the GUILDBANK_UPDATE_TEXT event fires when text is available for retrieval by the GetGuildBankText() function.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QueryGuildEventLog" Priority="0" ImageType="Method">
    <Signature>QueryGuildEventLog()</Signature>
    <Description>Requests guild event log information from the server. Fires the GUILD_EVENT_LOG_UPDATE event when event log information becomes available.</Description>
  </WowApi>
  <WowApi Name="QueryGuildMembersForRecipe" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QueryGuildNews" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QueryGuildRecipes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QueryGuildXP" Priority="0" ImageType="Method">
    <Signature>QueryGuildXP()</Signature>
    <Description>Queries the server to update the guild experience information. When the guild information is available, the GUILD_XP_UPDATE event will be fired, indicating that the information is available to the client and API.</Description>
  </WowApi>
  <WowApi Name="QueryWorldCountdownTimer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestChooseRewardError" Priority="0" ImageType="Method">
    <Signature>QuestChooseRewardError()</Signature>
    <Description>Causes the default UI to display an error message indicating that the player must choose a reward to complete the quest presented by a questgiver. Fires a UI_ERROR_MESSAGE event containing a localized message identified by the global variable ERR_QUEST_MUST_CHOOSE. Choose wisely.</Description>
  </WowApi>
  <WowApi Name="QuestFlagsPVP" Priority="0" ImageType="Method">
    <Signature>questFlag = QuestFlagsPVP()</Signature>
    <Description>Returns whether accepting the offered quest will flag the player for PvP. Only valid when the questgiver UI is showing the accept/decline stage of a quest dialog (between the QUEST_DETAIL and QUEST_FINISHED events); otherwise may return nil or a value from the most recently displayed quest.</Description>
    <ReturnList Name="questFlag">
      <Description>1 if accepting the quest will flag the player for PvP for as long as it remains in the quest log; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="QuestGetAutoAccept" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestGetAutoLaunched" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestIsDaily" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestIsFromAreaTrigger" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestIsWeekly" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestLogPushQuest" Priority="0" ImageType="Method">
    <Signature>QuestLogPushQuest([questIndex])</Signature>
    <Description>Shares a quest with other group members</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()); if omitted, defaults to the selected quest (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QuestLogShouldShowPortrait" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestMapUpdateAllQuests" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestPOIGetIconInfo" Priority="0" ImageType="Method">
    <Signature>_, posX, posY, objective = QuestPOIGetIconInfo(questID)</Signature>
    <Description>Returns information about a QuestPOI icon. Only works if the quest is displayed on the world map. Only returns the nearest of these points if there are more than one.</Description>
    <ArgumentList Name="questID">
      <Description>The quest index to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="_">
      <Description>Undocumented in Blizzard code (unknown) </Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="QuestPOIGetQuestIDByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestPOIGetQuestIDByVisibleIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="QuestPOIUpdateIcons" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Quit" Priority="0" ImageType="Method">
    <Signature>Quit()</Signature>
    <Description>Attempts to exit the World of Warcraft client. Results vary based on current conditions:
If the player is in combat or under other temporary restrictions (e.g. falling), fires the UI_ERROR_MESSAGE event with a message indicating the player cannot log out at the moment.
If the player is not in an inn, major city, or other "rest" area (i.e. IsResting() returns nil), fires the PLAYER_QUITING event, causing the default UI to show a countdown, quitting WoW after a period of time if not canceled.
If the player is in a "rest" area, quits the game immediately. </Description>
  </WowApi>
  <WowApi Name="RaidProfileExists" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RaidProfileHasUnsavedChanges" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RandomRoll" Priority="0" ImageType="Method">
    <Signature>RandomRoll(min, max)</Signature>
    <Description>Initiates a public, server-side "dice roll". Used in the default UI to implement the /roll chat command; when called, the server generates a random integer and sends it to the player and all others nearby (or in the same party/raid) via a CHAT_MSG_SYSTEM event. (The server message is formatted according to the global RANDOM_ROLL_RESULT; e.g. "Leeroy rolls 3 (1-100)".)
For random number generation that does not involve the server or send visible messages to other clients, see math.random.</Description>
    <ArgumentList Name="min">
      <Description>Lowest number to be randomly chosen (number,string) </Description>
    </ArgumentList>
    <ArgumentList Name="max">
      <Description>Highest number to be randomly chosen (number,string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ReforgeItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RefreshLFGList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RefreshWorldMap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RegisterAddonMessagePrefix" Priority="0" ImageType="Method">
    <Signature>success = RegisterAddonMessagePrefix("prefix")</Signature>
    <Description>Registers to receive addon messages with a given prefix. In order for an addon to receive messages sent using SendAddOnMessage they must first register to receive messages with a given prefix. There is a soft cap of 64 prefixes on the server side, and a hard cap of 512 prefixes on the client side. Exceeding the soft cap is not recommended, but addon messages can still be received.</Description>
    <ArgumentList Name="prefix">
      <Description>A string of up to 16 characters used to identify a stream of messages. The prefix may contain any character except the null character ('\0'), which prematurely terminates the string, and the number of characters may not exceed 16. The string must not be empty. (string) (string) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>Whether or not the prefix registration was successful. There is a limit of 512 prefixes per client, so registration could potentially fail. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="RegisterCVar" Priority="0" ImageType="Method">
    <Signature>RegisterCVar("cvar", "default")</Signature>
    <Description>Registers a configuration variable to be saved</Description>
    <ArgumentList Name="cvar">
      <Description>Name of a CVar (string) </Description>
    </ArgumentList>
    <ArgumentList Name="default">
      <Description>Default value of the CVar (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RegisterForSave" Priority="0" ImageType="Method">
    <Signature>RegisterForSave()</Signature>
    <Description>Enables a global variable for automatic saving upon logout &amp; UI reload. Used for some data saved on the local client by the default UI.
Addons should use the ## SavedVariables TOC directive instead.</Description>
  </WowApi>
  <WowApi Name="RegisterForSavePerCharacter" Priority="0" ImageType="Method">
    <Signature>RegisterForSavePerCharacter()</Signature>
    <Description>Enables a global variable for automatic saving (on a per-character basis) upon logout &amp; UI reload. Used for some data saved on the local client by the default UI.
Addons should use the ## SavedVariablesPerCharacter TOC directive instead.</Description>
  </WowApi>
  <WowApi Name="RegisterStaticConstants" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RejectProposal" Priority="0" ImageType="Method">
    <Signature>RejectProposal()</Signature>
    <Description>Rejects a LFG dungeon invite.</Description>
  </WowApi>
  <WowApi Name="ReloadUI" Priority="0" ImageType="Method">
    <Signature>ReloadUI()</Signature>
    <Description>Reloads the user interface. Saved variables are written to disk, the default UI is reloaded, and all enabled non-LoadOnDemand addons are loaded, including any addons previously disabled which were enabled during the session (see EnableAddOn() et al).</Description>
  </WowApi>
  <WowApi Name="RemoveAutoQuestPopUp" Priority="0" ImageType="Method">
    <Signature>RemoveAutoQuestPopUp(questId)</Signature>
    <Description>Remove AutoQuestPopup</Description>
    <ArgumentList Name="questId">
      <Description>(number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RemoveChatWindowChannel" Priority="0" ImageType="Method">
    <Signature>RemoveChatWindowChannel(index, "channel")</Signature>
    <Description>Removes a channel from a chat window's list of saved channel subscriptions. Used by the default UI's function ChatFrame_RemoveChannel() which manages the set of channel messages shown in a displayed ChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>Name of the channel to remove (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RemoveChatWindowMessages" Priority="0" ImageType="Method">
    <Signature>RemoveChatWindowMessages(index, "messageGroup")</Signature>
    <Description>Removes a message type from a chat window's list of saved message subscriptions. Used by the default UI's functions ChatFrame_RemoveMessageGroup() and ChatFrame_RemoveAllMessageGroups() which manage the set of message types shown in a displayed ChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="messageGroup">
      <Description>Token identifying a message type (string, chatMsgType) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RemoveFriend" Priority="0" ImageType="Method">
    <Signature>RemoveFriend("name")</Signature>
    <Description>Removes a character from the friends list</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to remove from the friends list (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RemoveGlyphFromSocket" Priority="0" ImageType="Method">
    <Signature>RemoveGlyphFromSocket(socket)</Signature>
    <Description>Removes the glyph from a socket</Description>
    <ArgumentList Name="socket">
      <Description>Which glyph socket to query (between 1 and NUM_GLYPH_SLOTS) (number, glyphIndex) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RemoveItemFromArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RemoveQuestWatch" Priority="0" ImageType="Method">
    <Signature>RemoveQuestWatch(questIndex)</Signature>
    <Description>Removes a quest from the objectives tracker</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RemoveTalent" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RemoveTrackedAchievement" Priority="0" ImageType="Method">
    <Signature>RemoveTrackedAchievement(id)</Signature>
    <Description>Removes an achievement from the objectives tracker UI</Description>
    <ArgumentList Name="id">
      <Description>The numeric ID of an achievement (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RenamePetition" Priority="0" ImageType="Method">
    <Signature>RenamePetition("name")</Signature>
    <Description>Renames the guild or arena team to be created by the open petition</Description>
    <ArgumentList Name="name">
      <Description>New name for the guild or arena team (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RepairAllItems" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ReplaceEnchant" Priority="0" ImageType="Method">
    <Signature>ReplaceEnchant()</Signature>
    <Description>Confirms replacing an existing enchantment. Usable in response to the REPLACE_ENCHANT event which fires when the player attempts to apply a temporary or permanent enchantment to an item which already has one.</Description>
  </WowApi>
  <WowApi Name="ReplaceGuildMaster" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ReplaceTradeEnchant" Priority="0" ImageType="Method">
    <Signature>ReplaceTradeEnchant()</Signature>
    <Description>Confirms replacement of an existing enchantment when offering an enchantment for trade. After confirming, the enchantment is not actually performed until both parties accept the trade.</Description>
  </WowApi>
  <WowApi Name="RepopMe" Priority="0" ImageType="Method">
    <Signature>RepopMe()</Signature>
    <Description>Releases the player's spirit to the nearest graveyard. Only has effect if the player is dead.</Description>
  </WowApi>
  <WowApi Name="ReportBug" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ReportPlayer" Priority="0" ImageType="Method">
    <Signature>ReportPlayer("reportType", lineID, comment) or ReportPlayer("reportType", "pending", comment)</Signature>
    <Description>Report a player to a GM.</Description>
    <ArgumentList Name="reportType">
      <Description>Type of offense to report the player for. (string, reportType) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>lineID of the chat line the player should be reported for. Retrieve it using the chat frame's :GetMessageInfo() method or with arg11 of the respective CHATMSG event. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="pending">
      <Description>The string 'pending' means the unit set with SetPendingReportTarget(unit) should be reported. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="comment">
      <Description>Comment to send with the report. Only used for cheating and name reports in the default UI. </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ReportPlayerIsPVPAFK" Priority="0" ImageType="Method">
    <Signature>ReportPlayerIsPVPAFK("name") or ReportPlayerIsPVPAFK("unit")</Signature>
    <Description>Reports a battleground participant as AFK</Description>
    <ArgumentList Name="name">
      <Description>Name of a friendly player unit in the current battleground (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A friendly player unit in the current battleground (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ReportSuggestion" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestArtifactCompletionHistory" Priority="0" ImageType="Method">
    <Signature>RequestArtifactCompletionHistory()</Signature>
    <Description>Queries the server for the player's artifact completion history. This function will return immediately, and the ARTIFACT_HISTORY_READY will fire when the information is available from the server.</Description>
  </WowApi>
  <WowApi Name="RequestBattlefieldScoreData" Priority="0" ImageType="Method">
    <Signature>RequestBattlefieldScoreData()</Signature>
    <Description>Requests battlefield score data from the server. Score data is not returned immediately; the UPDATE_BATTLEFIELD_SCORE event fires once information is available and can be retrieved by calling GetBattlefieldScore() and related functions.</Description>
  </WowApi>
  <WowApi Name="RequestBattlegroundInstanceInfo" Priority="0" ImageType="Method">
    <Signature>RequestBattlegroundInstanceInfo(index)</Signature>
    <Description>Requests information about available instances of a battleground from the server. The PVPQUEUE_ANYWHERE_SHOW event fires once information is available; data can then be retrieved by calling GetNumBattlefields() and GetBattlefieldInstanceInfo().</Description>
    <ArgumentList Name="index">
      <Description>Index of a battleground (between 1 and NUM_BATTLEGROUNDS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RequestChallengeModeLeaders" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestChallengeModeMapInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestChallengeModeRewards" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildApplicantsList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildChallengeInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildMembership" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildMembershipList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildPartyState" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildRecruitmentSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestGuildRewards" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestInspectHonorData" Priority="0" ImageType="Method">
    <Signature>RequestInspectHonorData()</Signature>
    <Description>Requests PvP honor and arena data from the server for the currently inspected unit. Once the INSPECT_HONOR_UPDATE event fires, PvP honor and arena information can be retrieved using GetInspectHonorData(team) and GetInspectArenaTeamData().</Description>
  </WowApi>
  <WowApi Name="RequestLFDPartyLockInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestLFDPlayerLockInfo" Priority="0" ImageType="Method">
    <Signature>RequestLFDPlayerLockInfo()</Signature>
    <Description>Requests instance lockout and Call to Arms dungeon reward information.. When called the server will update the client on instance lockout and Call to Arms. The API will then return updated values instead of old once.
Once LFG_UPDATE_RANDOM_INFO event is received it means that updated Call to Arms data is finally available for the client.</Description>
  </WowApi>
  <WowApi Name="RequestPVPOptionsEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestPVPRewards" Priority="0" ImageType="Method">
    <Signature>RequestPVPRewards()</Signature>
    <Description>Requests informations about Conquest Point cap from the server. The text is not returned immediately; the PVP_REWARDS_UPDATE event fires when text is available for retrieval by the GetPVPRewards() function.</Description>
  </WowApi>
  <WowApi Name="RequestRaidInfo" Priority="0" ImageType="Method">
    <Signature>RequestRaidInfo()</Signature>
    <Description>Requests information about saved instances from the server. Data is not returned immediately; the UPDATE_INSTANCE_INFO event when the raid information is available for retrieval via GetSavedInstanceInfo() and related functions.</Description>
  </WowApi>
  <WowApi Name="RequestRatedArenaInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestRatedBattlegroundInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestRecruitingGuildsList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RequestTimePlayed" Priority="0" ImageType="Method">
    <Signature>RequestTimePlayed()</Signature>
    <Description>Requests information from the server about the player character's total time spent online. Information is not returned immediately; the TIME_PLAYED_MSG event fires when the requested data is available.</Description>
  </WowApi>
  <WowApi Name="ResetCPUUsage" Priority="0" ImageType="Method">
    <Signature>ResetCPUUsage()</Signature>
    <Description>Resets CPU usage statistics. Only has effect if the scriptProfile CVar is set to 1.</Description>
  </WowApi>
  <WowApi Name="ResetChallengeMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ResetChatColors" Priority="0" ImageType="Method">
    <Signature>ResetChatColors()</Signature>
    <Description>Removes all saved color settings for chat message types, resetting them to default values</Description>
  </WowApi>
  <WowApi Name="ResetChatWindows" Priority="0" ImageType="Method">
    <Signature>ResetChatWindows()</Signature>
    <Description>Removes all saved chat window settings, resetting them to default values. Used by the default UI's function FCF_ ResetChatWindows() which resets the appearance and behavior of displayed FloatingChatFrames.</Description>
  </WowApi>
  <WowApi Name="ResetCursor" Priority="0" ImageType="Method">
    <Signature>ResetCursor()</Signature>
    <Description>Returns the cursor to its normal appearance (the glove pointer) and behavior. Has effect after the cursor image/mode has been changed via SetCursor(), ShowContainerSellCursor(), or similar. Has no immediately visible effect if the cursor is holding an item, spell, or other data.</Description>
  </WowApi>
  <WowApi Name="ResetDisabledAddOns" Priority="0" ImageType="Method">
    <Signature>ResetDisabledAddOns()</Signature>
    <Description>Reverts changes to the enabled/disabled state of addons. Any addons enabled or disabled in the current session will return to their enabled/disabled state as of the last login or UI reload.</Description>
  </WowApi>
  <WowApi Name="ResetInstances" Priority="0" ImageType="Method">
    <Signature>ResetInstances()</Signature>
    <Description>Resets all non-saved instances associated with the player. Only instances to which the player is not saved may be reset (i.e. normal 5-man dungeons, not heroic dungeons or raids), and only by a solo player or group leader.</Description>
  </WowApi>
  <WowApi Name="ResetPerformanceValues" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ResetSetMerchantFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ResetTutorials" Priority="0" ImageType="Method">
    <Signature>ResetTutorials()</Signature>
    <Description>Enables contextual tutorial display and clears the list of already displayed tutorials. Tutorials that have already been shown to the player will appear again (via TUTORIAL_TRIGGER events) once their conditions are met. The first tutorial will appear again immediately.</Description>
  </WowApi>
  <WowApi Name="ResetView" Priority="0" ImageType="Method">
    <Signature>ResetView(index)</Signature>
    <Description>Resets a saved camera setting to default values. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().</Description>
    <ArgumentList Name="index">
      <Description>Index of a saved camera setting (between 1 and 5) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ResistancePercent" Priority="0" ImageType="Method">
    <Signature>resistancePercent = ResistancePercent(ResistanceValue, CasterLevel)</Signature>
    <Description>Returns the % value of spell resistance depending on resistance value and player level</Description>
    <ArgumentList Name="ResistanceValue">
      <Description>The resistance value you want to convert (number) </Description>
    </ArgumentList>
    <ArgumentList Name="CasterLevel">
      <Description>Level of the player (number) </Description>
    </ArgumentList>
    <ReturnList Name="resistancePercent">
      <Description>The % based resistance value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="RespondInstanceLock" Priority="0" ImageType="Method">
    <Signature>RespondInstanceLock(response)</Signature>
    <Description>Allows leaving a recently entered instance to which the player would otherwise be saved.

Applies when the player enters an instance to which other members of her group are saved; if the player leaves the within the time limit (see GetInstanceLockTimeRemaining()) she will not be saved to the instance.
 </Description>
    <ArgumentList Name="response">
      <Description>Whether the player wishes to remain in the instance (boolean)
false - Exit to the nearest graveyard
true - Remain in the zone, saving the player to this instance</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RespondMailLockSendItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RestartGx" Priority="0" ImageType="Method">
    <Signature>RestartGx()</Signature>
    <Description>Restart the client's graphic subsystem. Does not reload the UI.</Description>
  </WowApi>
  <WowApi Name="RestoreRaidProfileFromCopy" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ResurrectGetOfferer" Priority="0" ImageType="Method">
    <Signature>name = ResurrectGetOfferer()</Signature>
    <Description>Returns the name of a unit offering to resurrect the player.
Returns nil if no resurrection has been offered or if an offer has expired.</Description>
    <ReturnList Name="name">
      <Description>Name of the unit offering resurrection (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ResurrectHasSickness" Priority="0" ImageType="Method">
    <Signature>hasSickness = ResurrectHasSickness()</Signature>
    <Description>Returns whether accepting an offered resurrection spell will cause the player to suffer Resurrection Sickness. Usable following the RESURRECT_REQUEST event which fires when the player is offered resurrection by another unit.
Generally always returns nil, as resurrection by other players does not cause sickness.</Description>
    <ReturnList Name="hasSickness">
      <Description>1 if accepting resurrection will cause Resurrection Sickness; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ResurrectHasTimer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="RetrieveCorpse" Priority="0" ImageType="Method">
    <Signature>RetrieveCorpse()</Signature>
    <Description>Confirms resurrection by returning to the player's corpse</Description>
  </WowApi>
  <WowApi Name="ReturnInboxItem" Priority="0" ImageType="Method">
    <Signature>ReturnInboxItem(mailID)</Signature>
    <Description>Returns a message in the player's inbox to its sender</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RollOnLoot" Priority="0" ImageType="Method">
    <Signature>RollOnLoot(id, rollType)</Signature>
    <Description>Register the player's intent regarding an item up for loot rolling. Rolls are not actually performed until all eligible group members have registered their intent or the time period for rolling expires.
If the item binds on pickup, the CONFIRM_LOOT_ROLL event fires, indicating that ConfirmLootRoll(id) must be called in order to actually roll on the item.</Description>
    <ArgumentList Name="id">
      <Description>Index of an item currently up for loot rolling (as provided in the START_LOOT_ROLL event) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="rollType">
      <Description>Type of roll action to perform (number)
0 - Pass (declines the loot)
1 - Roll "need" (wins if highest roll)
2 - Roll "greed" (wins if highest roll and no other member rolls "need")
3 - Disenchant</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RunBinding" Priority="0" ImageType="Method">
    <Signature>RunBinding("COMMAND")</Signature>
    <Description>Runs the script associated with a key binding action. Note: this function is not protected, but the scripts for many default key binding actions are (and can only be called by the Blizzard UI).</Description>
    <ArgumentList Name="COMMAND">
      <Description>Name of a key binding command (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RunMacro" Priority="0" ImageType="Method">
    <Signature>RunMacro(index [, ""button""]) or RunMacro("name" [, ""button""])</Signature>
    <Description>Runs a macro</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ArgumentList Name="&quot;button&quot;">
      <Description>The mouse button used to click the macro; may be used by [button:x] options in the macro (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RunMacroText" Priority="0" ImageType="Method">
    <Signature>RunMacroText(""text"" [, ""button""])</Signature>
    <Description>Runs arbitrary text as a macro</Description>
    <ArgumentList Name="&quot;text&quot;">
      <Description>The text of the macro to run (string) </Description>
    </ArgumentList>
    <ArgumentList Name="&quot;button&quot;">
      <Description>The mouse button used to click the macro; may be used by [button:x] options in the macro (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RunScript" Priority="0" ImageType="Method">
    <Signature>RunScript("script")</Signature>
    <Description>Runs a string as a Lua script</Description>
    <ArgumentList Name="script">
      <Description>A Lua script to be run (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SaveBindings" Priority="0" ImageType="Method">
    <Signature>SaveBindings(set)</Signature>
    <Description>Saves the current set of key bindings</Description>
    <ArgumentList Name="set">
      <Description>A set to which to save the current bindings (number)
1 - Account-wide key bindings
2 - Character-specific key bindings</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SaveEquipmentSet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SaveRaidProfileCopy" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SaveView" Priority="0" ImageType="Method">
    <Signature>SaveView(index)</Signature>
    <Description>Saves the current camera settings. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().</Description>
    <ArgumentList Name="index">
      <Description>Index of a saved camera setting (between 1 and 5) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Screenshot" Priority="0" ImageType="Method">
    <Signature>Screenshot()</Signature>
    <Description>Saves an image of the current game display. Screenshot images are saved to the folder Screenshots within the folder where the World of Warcraft client is installed.
Taking a screenshot fires the SCREENSHOT_SUCCEEDED event (or the SCREENSHOT_FAILED event in case of an error), which causes the default UI to display a message in the middle of the screen. Additional screenshots taken while this message is displayed will include it -- the default UI's TakeScreenshot() function hides this message so it is not included in screenshots.</Description>
  </WowApi>
  <WowApi Name="SearchGuildRecipes" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGGetEncounterResults" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGGetJoinedID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGGetNumResults" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGGetPartyResults" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGGetResults" Priority="0" ImageType="Method">
    <Signature>name, level, areaName, className, comment, partyMembers, status, class, encountersTotal, encountersComplete, isIneligible, isLeader, isTank, isHealer, isDamage = SearchLFGGetResults(index)</Signature>
    <Description>Returns information about the players progress in the raidfinder.. Seems to be deprecated :( Could not find any valued arguments, also the part in FrameXML where I found it seems to be unused. Try GetRFDungeonInfo instead.</Description>
    <ArgumentList Name="index">
      <Description>not sure what this needs to be </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="level">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="areaName">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="className">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="comment">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="partyMembers">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="status">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="class">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="encountersTotal">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="encountersComplete">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="isIneligible">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="isLeader">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="isTank">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="isHealer">
      <Description>nil </Description>
    </ReturnList>
    <ReturnList Name="isDamage">
      <Description>nil </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SearchLFGJoin" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGLeave" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SearchLFGSort" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SecondsToTime" Priority="0" ImageType="Method">
    <Signature>time = SecondsToTime(seconds [, noSeconds [, notAbbreviated [, maxCount]]])</Signature>
    <Description>Returns a description of an amount of time in appropriate units. Output includes markup normally hidden when displayed in a FontString (see last example); this markup allows the client to automatically print the singular or plural form of a word depending on the value of the preceding number.</Description>
    <ArgumentList Name="seconds">
      <Description>An amount of time (in seconds) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="noSeconds">
      <Description>True to omit a seconds term in the description; false or omitted otherwise (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="notAbbreviated">
      <Description>True to use full unit names in the description (e.g. Hours, Minutes); false or omitted to use abbreviations (e.g. Hr, Min) (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="maxCount">
      <Description>Maximum number of terms to include in the description; defaults to 2 if omitted (number) </Description>
    </ArgumentList>
    <ReturnList Name="time">
      <Description>A description of the amount of time in appropriate units (see examples) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SecureCmdOptionParse" Priority="0" ImageType="Method">
    <Signature>action, target = SecureCmdOptionParse("cmd")</Signature>
    <Description>Returns the action (and target, if applicable) for a secure macro command. Used in the default UI to parse macro conditionals.</Description>
    <ArgumentList Name="cmd">
      <Description>A command to be parsed (typically the body of a macro, macrotext attribute or slash command (string) </Description>
    </ArgumentList>
    <ReturnList Name="action">
      <Description>Argument to the base macro command (e.g. the name of a spell for /cast), or the empty string ("") if the base command takes no arguments (e.g. /stopattack); nil if the command should not be executed (string) </Description>
    </ReturnList>
    <ReturnList Name="target">
      <Description>Unit or name to use as the target of the action (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SelectActiveQuest" Priority="0" ImageType="Method">
    <Signature>SelectActiveQuest(index)</Signature>
    <Description>Selects a quest which can be turned in to the current Quest NPC. Usable after a QUEST_GREETING event. Causes the QUEST_PROGRESS event to fire, in which it is determined whether the player can complete the quest.
Note: Most quest NPCs present active quests using the GetGossipActiveQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest which can be turned in to the current Quest NPC (between 1 and GetNumActiveQuests()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectAvailableQuest" Priority="0" ImageType="Method">
    <Signature>SelectAvailableQuest(index)</Signature>
    <Description>Chooses a quest available from the current Quest NPC. Causes the QUEST_DETAIL event to fire, in which the questgiver presents the player with the details of a quest and the option to accept or decline.
Note: Most quest NPCs present available quests using the GetGossipAvailableQuests() instead of this function.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest available from the current Quest NPC (between 1 and GetNumAvailableQuests()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectGossipActiveQuest" Priority="0" ImageType="Method">
    <Signature>SelectGossipActiveQuest(index)</Signature>
    <Description>Chooses a quest which can be turned in to the current Gossip NPC. Causes the QUEST_PROGRESS event to fire, in which it is determined whether the player can complete the quest.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest which can be turned in to the current Gossip NPC (between 1 and GetNumGossipActiveQuests()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectGossipAvailableQuest" Priority="0" ImageType="Method">
    <Signature>SelectGossipAvailableQuest(index)</Signature>
    <Description>Chooses a quest available from the current Gossip NPC. Usable after a QUEST_GREETING event. Causes the QUEST_DETAIL event to fire, in which the questgiver presents the player with the details of a quest and the option to accept or decline.</Description>
    <ArgumentList Name="index">
      <Description>Index of a quest available from the current Gossip NPC (between 1 and GetNumGossipAvailableQuests()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectGossipOption" Priority="0" ImageType="Method">
    <Signature>SelectGossipOption(index [, "text" [, confirm]])</Signature>
    <Description>Chooses and activates an NPC dialog option. Results may vary according to the gossip option chosen; may end the gossip (firing a GOSSIP_CLOSED event) and start another interaction (firing a MERCHANT_SHOW, TRAINER_SHOW, TAXIMAP_OPENED, or similar event) or may continue the gossip with new text and new options (firing another GOSSIP_SHOW event).
Calling this function with only the first argument may cause the GOSSIP_CONFIRM event to fire, indicating that the player needs to provide confirmation (or additional information) before the option will be activated. Confirmation is needed for certain options requiring the character to spend (e.g. when activating Dual Talent Specialization); additional information is needed for options such as those used when redeeming a Loot Card code from the WoW trading card game to receive an in-game item. In either case, the confirmation and additional information can be provided (as by the popup dialog in the default UI) by calling this function again with all three arguments.</Description>
    <ArgumentList Name="index">
      <Description>The option in the NPC gossip window to select, from 1 to GetNumGossipOptions() (number) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="SelectPackage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SelectQuestLogEntry" Priority="0" ImageType="Method">
    <Signature>SelectQuestLogEntry(questIndex)</Signature>
    <Description>Selects a quest from the quest log. The selected quest is used by other functions which do not take a quest index as argument (e.g. GetQuestLogQuestText()).</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectStationery" Priority="0" ImageType="Method">
    <Signature>SelectStationery(index)</Signature>
    <Description>Selects a given stationery for usage when sending mail. Has no effect; the stationery feature for sending mail is not implemented in the current version of World of Warcraft.</Description>
    <ArgumentList Name="index">
      <Description>Index of a stationery type (between 1 and GetNumStationeries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectTradeSkill" Priority="0" ImageType="Method">
    <Signature>SelectTradeSkill(index)</Signature>
    <Description>Selects a recipe in the trade skill listing. Selection in the recipe list is used only for display in the default UI and has no effect on other Trade Skill APIs.</Description>
    <ArgumentList Name="index">
      <Description>Index of a recipe in the trade skill list (between 1 and GetNumTradeSkills()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SelectTrainerService" Priority="0" ImageType="Method">
    <Signature>SelectTrainerService(index)</Signature>
    <Description>Selects an entry in the trainer service listing. Selection in the service list is used only for display in the default UI and has no effect on other Trainer APIs.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the trainer service listing (between 1 and GetNumTrainerServices()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SendAddonMessage" Priority="0" ImageType="Method">
    <Signature>SendAddonMessage("prefix", "message" [, "type" [, "target"]])</Signature>
    <Description>Sends a chat-like message receivable by other addons. Allows for client-to-client addon communication.
Unlike with SendChatMessage, messages sent via SendAddonMessage:
do not appear in receiving players' chat windows (unless an addon explicitly prints them)
are not subject to strict server-side spam filtering/throttling (sending too many messages at once can still disconnect the user)
are not modified if the sending character is drunk
Messages are received via the CHAT_MSG_ADDON event. The client utilizes the prefix string to filter messages; only those prefixes which have been registered will be received. Prefixes can be registered using RegisterAddonMessagePrefix.
There is currently no support for sending addon messages to Real ID or BattleTag friends.</Description>
    <ArgumentList Name="prefix">
      <Description>An arbitrary label for the message. Allows receiving addons to filter incoming messages: for example, if an addon uses the same prefix for all messages it sends, an addon interested in only those messages can check for that prefix before handling the message content. The prefix may contain any character except the null character ('\0'), which prematurely terminates the string, and the number of characters may not exceed 16. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="message">
      <Description>A message to send. The server will truncate message if it exceeds 255 characters. The number of characters in prefix does not affect the number of characters available for the message. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="type">
      <Description>Scope in which to broadcast the message: (string)
BATTLEGROUND - To all allied players in the current battleground instance
GUILD - To all members of the player's guild
OFFICER - To all guild officers
PARTY - To all members of the player's party (used by default if no type is given)
RAID - To all members of the player's raid group (automatically reverts to sending to party if the player is not in a raid group)
WHISPER - To a specific player</Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>If type is 'WHISPER', the name of the target player. In cross-realm battlegrounds, the format 'Name-Realm' can be used to target a player from another realm; e.g. 'Thott-Cenarius', but this does not work for cross-realm raids or parties. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SendChatMessage" Priority="0" ImageType="Method">
    <Signature>SendChatMessage("text" [, "chatType" [, languageIndex [, "channel"]]])</Signature>
    <Description>Sends a chat message</Description>
    <ArgumentList Name="text">
      <Description>Message to be sent (up to 255 characters) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="chatType">
      <Description>Channel on which to send the message (defaults to SAY if omitted) (string)
CHANNEL - Message to a server or custom chat channel (sent with /1, /2, etc in the default UI); requires channel number for channel argument
DND - Enables Away-From-Keyboard status for the player, with text as the custom message seen by others attempting to whisper the player
EMOTE - Custom text emotes visible to nearby players (sent with /e in the default UI)
GUILD - Messages to guild members (sent with /g in the default UI)
INSTANCE_CHAT - Messages to a LFG/LFR instance group (sent with /i in the default UI)
OFFICER - Messages to guild officers (sent with /o in the default UI)
PARTY - Messages to party members (sent with /p in the default UI)
RAID - Messages to raid members (sent with /ra in the default UI)
RAID_WARNING - Warning to raid members (sent with /rw in the default UI)
SAY - Speech to nearby players (sent with /s in the default UI)
WHISPER - Message to a specific character (sent with /w in the default UI); requires name of the character for channel argument
YELL - Yell to not-so-nearby players (sent with /y in the default UI)</Description>
    </ArgumentList>
    <ArgumentList Name="languageIndex">
      <Description>Language in which to send the message; defaults to Common (for Alliance players) or Orcish (for Horde players) if omitted. Language indices can be retrieved from GetLanguageByIndex(). (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>If chatType is WHISPER, name of the target character; if chatType is CHANNEL, number identifying the target channel; ignored otherwise (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SendMail" Priority="0" ImageType="Method">
    <Signature>SendMail("recipient", "subject", "body")</Signature>
    <Description>Sends the outgoing message. Any money or COD costs and attachments specified for the mail (via SetSendMailMoney(), SetSendMailCOD(), and ClickSendMailItemButton()) are included with the mail (and the values for such are reset for the next outgoing mail).</Description>
    <ArgumentList Name="recipient">
      <Description>Name of the character to receive the mail (string) </Description>
    </ArgumentList>
    <ArgumentList Name="subject">
      <Description>Subject text of the mail (string) </Description>
    </ArgumentList>
    <ArgumentList Name="body">
      <Description>Body text of the mail (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SendSoRByText" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SendSystemMessage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SendWho" Priority="0" ImageType="Method">
    <Signature>SendWho("filter")</Signature>
    <Description>Requests a list of characters meeting given search criteria from the server. Text in the query will match against any of the six searchable fields unless one of the specifiers below is used; multiple specifiers can be used in one query. Queries are case insensitive.
n-"name" - Search for characters whose name contains name
c-"class" - Search for characters whose class name contains class
g-"guild" - Search for characters in guilds whose name contains guild
r-"race" - Search for characters whose race name contains race
z-"zone" - Search for characters in zones whose name contains zone
X - Search for characters of level X
X- - Search for characters of level X or higher
-X - Search for characters of level X or lower
X-Y - Search for characters between levels X and Y (inclusive)
Results are not available immediately; the CHAT_MSG_SYSTEM or WHO_LIST_UPDATE event fires when data is available, as determined by the SetWhoToUI() function.</Description>
    <ArgumentList Name="filter">
      <Description>A Who system search query (cannot be nil; use the empty string "" to specify a blank query) (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetAbandonQuest" Priority="0" ImageType="Method">
    <Signature>SetAbandonQuest(questIndex)</Signature>
    <Description>Begins the process of abandoning a quest in the player's quest log. To finish abandoning the quest, call AbandonQuest().
This function must be called to select a quest in order for GetAbandonQuestItems() or GetAbandonQuestName() to return valid data.</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetAchievementComparisonPortrait" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetAchievementComparisonUnit" Priority="0" ImageType="Method">
    <Signature>success = SetAchievementComparisonUnit(unit)</Signature>
    <Description>Enables comparing achievements/statistics with another player.
After a call to this function, the INSPECTACHIEVEMENTREADY event fires to indicate that achievement/statistic comparison functions will return valid data on the given unit.</Description>
    <ArgumentList Name="unit">
      <Description>ID of a unit to compare against (unitID) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>1 if the given unit is a valid unit. (Does not indicate whether the unit exists or can be compared against.) (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SetActionBarToggles" Priority="0" ImageType="Method">
    <Signature>SetActionBarToggles(bar1, bar2, bar3, bar4, alwaysShow)</Signature>
    <Description>Configures display of additional ActionBars in the default UI</Description>
    <ArgumentList Name="bar1">
      <Description>1 to show the bottom left ActionBar; otherwise nil (1nil) </Description>
    </ArgumentList>
    <ArgumentList Name="bar2">
      <Description>1 to show the bottom right ActionBar; otherwise nil (1nil) </Description>
    </ArgumentList>
    <ArgumentList Name="bar3">
      <Description>1 to show the right-side ActionBar; otherwise nil (1nil) </Description>
    </ArgumentList>
    <ArgumentList Name="bar4">
      <Description>1 to show the second right-side ActionBar; otherwise nil (1nil) </Description>
    </ArgumentList>
    <ArgumentList Name="alwaysShow">
      <Description>1 to always show ActionBar backgrounds even for empty slots; otherwise nil (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetActionUIButton" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetActiveSpecGroup" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetActiveVoiceChannel" Priority="0" ImageType="Method">
    <Signature>SetActiveVoiceChannel(index)</Signature>
    <Description>Sets the currently active voice channel</Description>
    <ArgumentList Name="index">
      <Description>Index of a channel in the chat display window (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetActiveVoiceChannelBySessionID" Priority="0" ImageType="Method">
    <Signature>SetActiveVoiceChannelBySessionID(session)</Signature>
    <Description>Sets the currently active voice chat channel</Description>
    <ArgumentList Name="session">
      <Description>Index of a voice session (between 1 and GetNumVoiceSessions()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetAllowLowLevelRaid" Priority="0" ImageType="Method">
    <Signature>SetAllowLowLevelRaid(enable)</Signature>
    <Description>Enabling this if your character is below level 10 will allow you to join a raid group.</Description>
    <ArgumentList Name="enable">
      <Description>1 to enable low level raids for this character, nil otherwise. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetArenaTeamRosterSelection" Priority="0" ImageType="Method">
    <Signature>SetArenaTeamRosterSelection(team, index)</Signature>
    <Description>Selects a member in an arena team roster. Selection in the arena team roster currently has no effect beyond highlighting list entry in the default UI.</Description>
    <ArgumentList Name="team">
      <Description>Index of one of the player's arena teams (number, arenaTeamID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a team member to select (between 1 and GetNumArenaTeamMembers(team)) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetArenaTeamRosterShowOffline" Priority="0" ImageType="Method">
    <Signature>SetArenaTeamRosterShowOffline(enable)</Signature>
    <Description>Enables or disables the inclusion of offline members in arena team roster listings. The "Show Offline" filter is not used in the default UI; if disabled, offline members are still shown.</Description>
    <ArgumentList Name="enable">
      <Description>True to enable display of offline members; false to disable (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetAuctionsTabShowing" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetAutoDeclineGuildInvites" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetBagPortraitTexture" Priority="0" ImageType="Method">
    <Signature>SetBagPortraitTexture(texture, container)</Signature>
    <Description>Sets a Texture object to display the icon of one of the player's bags. Adapts the square item icon texture to fit within the circular "portrait" frames used in many default UI elements.</Description>
    <ArgumentList Name="texture">
      <Description>A Texture object (table) </Description>
    </ArgumentList>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetBarSlotFromIntro" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetBarberShopAlternateFormFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetBattlefieldScoreFaction" Priority="0" ImageType="Method">
    <Signature>SetBattlefieldScoreFaction(faction)</Signature>
    <Description>Filters the battleground scoreboard by faction/team</Description>
    <ArgumentList Name="faction">
      <Description>Faction for which to show battleground participant scores (number)
0 - Horde
1 - Alliance
nil - All</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetBinding" Priority="0" ImageType="Method">
    <Signature>success = SetBinding("key" [, "command"])</Signature>
    <Description>Binds a key combination to a binding command</Description>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="command">
      <Description>Name of a key binding command, or nil to unbind the key (string) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>1 if the key binding (or unbinding) was successful; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SetBindingClick" Priority="0" ImageType="Method">
    <Signature>success = SetBindingClick("key", "buttonName" [, "mouseButton"])</Signature>
    <Description>Binds a key combination to "click" a Button object. When the binding is used, all of the relevant mouse handlers on the button (save for OnEnter and OnLeave) fire just as if the button were activated by the mouse (including OnMouseDown and OnMouseUp as the key is pressed and released).</Description>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="buttonName">
      <Description>Name of a Button object on which the binding simulates a click (string) </Description>
    </ArgumentList>
    <ArgumentList Name="mouseButton">
      <Description>Name of the mouse button with which the binding simulates a click (string) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>1 if the key binding was successful; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SetBindingItem" Priority="0" ImageType="Method">
    <Signature>success = SetBindingItem("key", itemID) or SetBindingItem("key", "itemName") or SetBindingItem("key", "itemLink")</Signature>
    <Description>Binds a key combination to use an item in the player's possession</Description>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>1 if the binding was successful; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SetBindingMacro" Priority="0" ImageType="Method">
    <Signature>success = SetBindingMacro("key", index) or SetBindingMacro("key", "name")</Signature>
    <Description>Binds a key combination to run a macro</Description>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>1 if the key binding was successful; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SetBindingSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetBlacklistMap" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetCVar" Priority="0" ImageType="Method">
    <Signature>SetCVar("cvar", value [, "raiseEvent"])</Signature>
    <Description>Sets the value of a configuration variable</Description>
    <ArgumentList Name="cvar">
      <Description>Name of the CVar to set (string) </Description>
    </ArgumentList>
    <ArgumentList Name="value">
      <Description>New value for the CVar (any) </Description>
    </ArgumentList>
    <ArgumentList Name="raiseEvent">
      <Description>If true, causes the CVAR_UPDATE event to fire (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetCVarBitfield" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetCemeteryPreference" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetChannelOwner" Priority="0" ImageType="Method">
    <Signature>SetChannelOwner("channel", "fullname")</Signature>
    <Description>Gives channel ownership to another character. Has no effect unless the player is the owner of the given channel.</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="fullname">
      <Description>Name of the character to make the new owner (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChannelPassword" Priority="0" ImageType="Method">
    <Signature>SetChannelPassword("channel", "password")</Signature>
    <Description>Sets a password on a custom chat channel</Description>
    <ArgumentList Name="channel">
      <Description>Name of the channel (string) </Description>
    </ArgumentList>
    <ArgumentList Name="password">
      <Description>Password to set for the channel (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChannelWatch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetChatColorNameByClass" Priority="0" ImageType="Method">
    <Signature>SetChatColorNameByClass("chatType", colorByName)</Signature>
    <Description>Sets whether the player names should be colored by class for a given chat type</Description>
    <ArgumentList Name="chatType">
      <Description>The chatType that is being set. This value of this is the same as the index of the global ChatTypeInfo table. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="colorByName">
      <Description>Whether or not names should be colored by class for the given chat type. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowAlpha" Priority="0" ImageType="Method">
    <Signature>SetChatWindowAlpha(index, alpha)</Signature>
    <Description>Saves a chat window's background opacity setting. Used by the default UI's function FCF_SetWindowAlpha() which changes the opacity of a displayed FloatingChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="alpha">
      <Description>Alpha value (opacity) of the chat window background (0 = fully transparent, 1 = fully opaque) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowColor" Priority="0" ImageType="Method">
    <Signature>SetChatWindowColor(index, r, g, b)</Signature>
    <Description>Saves a chat window's background color setting. Used by the default UI's function FCF_SetWindowColor() which changes the colors of a displayed FloatingChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="r">
      <Description>Red component of the background color (0.0 - 1.0) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="g">
      <Description>Green component of the background color (0.0 - 1.0) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="b">
      <Description>Blue component of the background color (0.0 - 1.0) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowDocked" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetChatWindowLocked" Priority="0" ImageType="Method">
    <Signature>SetChatWindowLocked(index, locked)</Signature>
    <Description>Saves whether a chat window is locked. Used by the default UI's functions FCF_OpenNewWindow() and FCF_SetLocked() which manage the behavior of a FloatingChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="locked">
      <Description>True if the frame should be locked; otherwise false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowName" Priority="0" ImageType="Method">
    <Signature>SetChatWindowName(index, "name")</Signature>
    <Description>Saves a chat window's display name setting. Used by the default UI's function FCF_SetWindowName() which also handles setting the name displayed for a FloatingChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name to be displayed for the chat window (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowSavedDimensions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetChatWindowSavedPosition" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetChatWindowShown" Priority="0" ImageType="Method">
    <Signature>SetChatWindowShown(index, shown)</Signature>
    <Description>Saves whether a chat window should be shown. Used by the default UI's function FCF_OpenNewWindow() which initializes a displayed FloatingChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="shown">
      <Description>True if the window should be shown, false otherwise (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowSize" Priority="0" ImageType="Method">
    <Signature>SetChatWindowSize(index, size)</Signature>
    <Description>Saves a chat window's font size setting. Used by the default UI's function FCF_SetChatWindowFontSize() which also handles changing the font displayed in a FloatingChatFrame. </Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="size">
      <Description>Font size for the chat window (in points) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetChatWindowUninteractable" Priority="0" ImageType="Method">
    <Signature>SetChatWindowUninteractable(index, setUninteractable)</Signature>
    <Description>Saves whether a chat window is marked as non-interactive. Used by the default UI's function FCF_SetUninteractable() which also handles enabling/disabling mouse events in the FloatingChatFrame.</Description>
    <ArgumentList Name="index">
      <Description>Index of a chat frame (between 1 and NUM_CHAT_WINDOWS) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="setUninteractable">
      <Description>True flag the window as non-interactive; false otherwise (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetConsoleKey" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetCurrencyBackpack" Priority="0" ImageType="Method">
    <Signature>SetCurrencyBackpack(index, watch)</Signature>
    <Description>Sets a currency type to be watched on the Backpack UI</Description>
    <ArgumentList Name="index">
      <Description>Index of a currency type or header in the currency list (between 1 and GetCurrencyListSize()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="watch">
      <Description>1 to add this currency to the backpack UI; 0 to remove it from being watched (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetCurrencyUnused" Priority="0" ImageType="Method">
    <Signature>SetCurrencyUnused(index, makeUnused)</Signature>
    <Description>Moves a currency type to or from the Unused currencies list.
"Unused" currencies behave no differently; the distinction only exists to allow players to hide currencies they don't care about from the main display.</Description>
    <ArgumentList Name="index">
      <Description>Index of a currency type or header in the currency list (between 1 and GetCurrencyListSize()) (number) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="SetCurrentGuildBankTab" Priority="0" ImageType="Method">
    <Signature>SetCurrentGuildBankTab(tab)</Signature>
    <Description>Selects a tab in the guild bank</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetCurrentTitle" Priority="0" ImageType="Method">
    <Signature>SetCurrentTitle(titleIndex)</Signature>
    <Description>Changes a player's displayed title</Description>
    <ArgumentList Name="titleIndex">
      <Description>Index of a title available to the player (between 1 and GetNumTitles()), or -1 to show no title (integer) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetCursor" Priority="0" ImageType="Method">
    <Signature>SetCursor("cursor")</Signature>
    <Description>Changes the mouse cursor image. Changes only the appearance of the mouse cursor, not its behavior (and has no effect if the cursor is holding an item, spell, or other data). Passing nil will revert the cursor to its default image.
Normally used in a frame's OnEnter handler to change the cursor used while the mouse is over the frame. If used elsewhere, the cursor will likely be immediately reverted to default (due to the mouse handlers of other frames doing the same).</Description>
    <ArgumentList Name="cursor">
      <Description>Path to a texture to use as the cursor image (must be 32x32 pixels) or one of the built-in cursor tokens. Valid cursor tokens can be found in the example code. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetDefaultVideoOptions" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetDungeonDifficultyID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetDungeonMapLevel" Priority="0" ImageType="Method">
    <Signature>SetDungeonMapLevel(level)</Signature>
    <Description>Sets the world map to display a certain map image (for zones that use multiple map images). Used in zones with more than one "floor" or area such as Dalaran and several Wrath of the Lich King dungeons and raids.</Description>
    <ArgumentList Name="level">
      <Description>Index of the map image to show in the world map (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetEuropeanNumbers" Priority="0" ImageType="Method">
    <Signature>SetEuropeanNumbers(enable)</Signature>
    <Description>Sets the decimal separator for displayed numbers. Affects the style not only of numbers displayed in the UI, but any string coercion of numbers with tostring() as well.</Description>
    <ArgumentList Name="enable">
      <Description>True to use comma (",") as the decimal separator; false to use period (".") as the decimal separator (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetEveryoneIsAssistant" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetFactionActive" Priority="0" ImageType="Method">
    <Signature>SetFactionActive(index)</Signature>
    <Description>Removes the "inactive" status from a faction. "Inactive" factions behave no differently; the distinction only exists to allow players to hide factions they don't care about from the main display. Factions thus marked are automatically moved to an "Inactive" group at the end of the faction list.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetFactionInactive" Priority="0" ImageType="Method">
    <Signature>SetFactionInactive(index)</Signature>
    <Description>Flags a faction as inactive. "Inactive" factions behave no differently; the distinction only exists to allow players to hide factions they don't care about from the main display. Factions thus marked are automatically moved to an "Inactive" group at the end of the faction list.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetFocusedAchievement" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetFriendNotes" Priority="0" ImageType="Method">
    <Signature>SetFriendNotes(index, "note") or SetFriendNotes("name", "note")</Signature>
    <Description>Sets note text associated with a friends list entry. Setting a note to nil will result in an error; to remove a note, set it to the empty string ("").</Description>
    <ArgumentList Name="index">
      <Description>Index of a friends list entry (between 1 and GetNumFriends()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of friend to modify (string) </Description>
    </ArgumentList>
    <ArgumentList Name="note">
      <Description>The note to set (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGamma" Priority="0" ImageType="Method">
    <Signature>SetGamma(value)</Signature>
    <Description>Changes the display gamma setting. Gamma value determines the contrast between lighter and darker portions of the game display; for a detailed explanation see the Wikipedia article on Gamma corection.</Description>
    <ArgumentList Name="value">
      <Description>New gamma value (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGlyphFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGlyphNameFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildApplicantSelection" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildBankTabInfo" Priority="0" ImageType="Method">
    <Signature>SetGuildBankTabInfo(tab, "name", iconIndex)</Signature>
    <Description>Sets the name and icon for a guild bank tab</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>New name for the tab (string) </Description>
    </ArgumentList>
    <ArgumentList Name="iconIndex">
      <Description>Index of an icon for the tab (between 1 and GetNumMacroItemIcons()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildBankTabItemWithdraw" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildBankTabPermissions" Priority="0" ImageType="Method">
    <Signature>SetGuildBankTabPermissions(tab, permission, enabled)</Signature>
    <Description>Changes guild bank tab permissions for the guild rank being edited</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="permission">
      <Description>Index of a permission to edit (number)
1 - View tab
2 - Deposit items</Description>
    </ArgumentList>
    <ArgumentList Name="enabled">
      <Description>True to allow permission for the action to the guild rank; false to deny (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildBankText" Priority="0" ImageType="Method">
    <Signature>SetGuildBankText(tab, "text")</Signature>
    <Description>Sets the info text for a guild bank tab</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (between 1 and GetNumGuildBankTabs()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="text">
      <Description>New info text for the tab (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildBankWithdrawGoldLimit" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildInfoText" Priority="0" ImageType="Method">
    <Signature>SetGuildInfoText("text")</Signature>
    <Description>Sets the guild information text.. This text appears when clicking the "Guild Information" button in the default UI's Guild window.</Description>
    <ArgumentList Name="text">
      <Description>New guild information text (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildMemberRank" Priority="0" ImageType="Method">
    <Signature>SetGuildMemberRank(index, rankIndex)</Signature>
    <Description>Promotes/demotes a given guild member to the specified rank</Description>
    <ArgumentList Name="index">
      <Description>Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ArgumentList>
    <ArgumentList Name="rankIndex">
      <Description>The rankIndex you wish to demote the player to (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildNewsFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildRecruitmentComment" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildRecruitmentSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildRosterSelection" Priority="0" ImageType="Method">
    <Signature>SetGuildRosterSelection(index)</Signature>
    <Description>Selects a member in the guild roster. Selection in the guild roster is used only for display in the default UI and has no effect on other Guild APIs.</Description>
    <ArgumentList Name="index">
      <Description>Index of a member in the guild roster (between 1 and GetNumGuildMembers()), or 0 for no selection (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildRosterShowOffline" Priority="0" ImageType="Method">
    <Signature>SetGuildRosterShowOffline(showOffline)</Signature>
    <Description>Enables or disables inclusion of offline members in the guild roster listing</Description>
    <ArgumentList Name="showOffline">
      <Description>True to include offline members in the guild roster listing; false to list only those members currently online (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetGuildTradeSkillCategoryFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetGuildTradeSkillItemNameFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetInventoryPortraitTexture" Priority="0" ImageType="Method">
    <Signature>SetInventoryPortraitTexture(texture, "unit", slot)</Signature>
    <Description>Sets a Texture object to display the icon of an equipped item. Adapts the square item icon texture to fit within the circular "portrait" frames used in many default UI elements.</Description>
    <ArgumentList Name="texture">
      <Description>A Texture object (table) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit whose item should be displayed; only valid for player (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetItemSearch" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetItemUpgradeFromCursorItem" Priority="0" ImageType="Method">
    <Signature>SetItemUpgradeFromCursorItem()</Signature>
    <Description>Puts an item into the item upgrade dialog. This function can currently only be called when at the upgrade merchant</Description>
  </WowApi>
  <WowApi Name="SetLFGBootVote" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLFGComment" Priority="0" ImageType="Method">
    <Signature>SetLFGComment("comment")</Signature>
    <Description>Associates a brief text comment with the player's listing in the LFG system. In the default UI, other players see this comment when mousing over the player's name in the Looking for More listing.</Description>
    <ArgumentList Name="comment">
      <Description>A comment to be associated with the player's listing in the LFG system (max 63 characters); or the empty string ("") to clear an existing comment (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetLFGDungeon" Priority="0" ImageType="Method">
    <Signature>SetLFGDungeon(queueIndex)</Signature>
    <Description>Sets a flag indicating that the player would like to join a given dungeon/queue. This function simply indicates that the player would like to join a given dungeon or queue. Joining the queue is accomplished using the JoinLFG() function. Clearing the dungeons that have been flagged is accomplished using the ClearAllLFGDungeons function.</Description>
    <ArgumentList Name="queueIndex">
      <Description>A numeric identifier for the dungeon/queue being joined. For random queues this can be obtained using /dump LFDQueueFrame.type (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetLFGDungeonEnabled" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLFGHeaderCollapsed" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLFGRoles" Priority="0" ImageType="Method">
    <Signature>SetLFGRoles(leader, tank, healer, damage)</Signature>
    <Description>Sets group roles for which to advertise the player in the LFG system. Passing true for a role the player's class does not support (e.g. healing on a warrior or tanking on a priest) has no effect: see example.</Description>
    <ArgumentList Name="leader">
      <Description>True if the player is willing to lead a group; otherwise false (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="tank">
      <Description>True if the player is willing to take on the role of protecting allies by drawing enemy attacks; otherwise false (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="healer">
      <Description>True if the player is willing to take on the role of healing allies who take damage; otherwise false (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="damage">
      <Description>True if the player is willing to take on the role of damaging enemies; otherwise false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetLayoutMode" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLookingForGuildComment" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLookingForGuildSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLootMethod" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetLootPortrait" Priority="0" ImageType="Method">
    <Signature>SetLootPortrait(texture)</Signature>
    <Description>Sets a Texture object to show the appropriate portrait image when looting. Normally, the loot portrait image is the same as that of the creature being looted. Not used in the default UI -- a generic image for all loot is used instead.</Description>
    <ArgumentList Name="texture">
      <Description>A Texture object (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetLootThreshold" Priority="0" ImageType="Method">
    <Signature>SetLootThreshold(threshold)</Signature>
    <Description>Sets the threshold used for Master Looter, Group Loot, and Need Before Greed loot methods. Has no effect if the player is not the party or raid leader.
Items above the threshold quality will trigger the special behavior of the current loot method: for Group Loot and Need Before Greed, rolling will automatically begin once a group member loots the corpse or object holding the item; for Master Loot, the item will be invisible to all but the loot master tasked with assigning the loot.
The loot threshold defaults to 2 (Uncommon) when forming a new party/raid. Setting the threshold to 0 (Poor) or 1 (Common) has no effect -- qualities below Uncommon are always treated as below the threshold. The default UI only allows setting the threshold as high as 4 (Epic), but higher thresholds are allowed.</Description>
    <ArgumentList Name="threshold">
      <Description>Minimum item quality to trigger the loot method (number, itemQuality) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMacroItem" Priority="0" ImageType="Method">
    <Signature>SetMacroItem(index, "item" [, target]) or SetMacroItem("name", "item" [, target])</Signature>
    <Description>Changes the item used for dynamic feedback for a macro. Normally a macro uses the item or spell specified by its commands to provide dynamic feedback when placed on an action button (through the Action APIs, e.g. IsActionUsable()): e.g. if the macro uses a consumable item, the button will show the number of items remaining; if the macro uses an item with a cooldown, the button will show the state of the cooldown. This function allows overriding the item or spell used by the macro with another item -- the given item's state will be used for such feedback instead of the item or spell used by the macro.</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ArgumentList Name="item">
      <Description>Name of an item to use for the macro (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit to use as target of the item (affects the macro's range indicator) (unitid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMacroSpell" Priority="0" ImageType="Method">
    <Signature>SetMacroSpell(index, "spell" [, target]) or SetMacroSpell("name", "spell" [, target])</Signature>
    <Description>Changes the spell used for dynamic feedback for a macro. Normally a macro uses the item or spell specified by its commands to provide dynamic feedback when placed on an action button (through the Action APIs, e.g. IsActionUsable()): e.g. if the macro uses a consumable item, the button will show the number of items remaining; if the macro uses an item with a cooldown, the button will show the state of the cooldown. This function allows overriding the item or spell used by the macro with another item -- the given item's state will be used for such feedback instead of the item or spell used by the macro.</Description>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>Name of a spell to use for the macro (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit to use as target of the spell (affects the macro's range indicator) (unitid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMapByID" Priority="0" ImageType="Method">
    <Signature>SetMapByID(id)</Signature>
    <Description>Sets the map based on a specified ID. For example, if you are an Undead character in the starting area, which is map ID 21, you can open your map and run SetMapByID(22) to change it to Western Plaguelands. In fact, you can run that anywhere If you are a fresh undead in tirisfal glades(MapAreaID:21), you get your map out, then you use SetMapByID(22) it will change to WPL</Description>
    <ArgumentList Name="id">
      <Description>The unique numeric map ID, can be obtained from GetCurrentMapAreaID() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMapToCurrentZone" Priority="0" ImageType="Method">
    <Signature>SetMapToCurrentZone()</Signature>
    <Description>Sets the world map to show the zone in which the player is located</Description>
  </WowApi>
  <WowApi Name="SetMapZoom" Priority="0" ImageType="Method">
    <Signature>SetMapZoom(continentIndex [, zoneIndex])</Signature>
    <Description>Sets the world map to show a specific zone or continent</Description>
    <ArgumentList Name="continentIndex">
      <Description>Index of a continent to display (in the list returned by GetMapContinents(), or one of the following values) (number)
-1 - Cosmic map
0 - Entire Azeroth map
1 - Kalimdor
2 - Eastern Kingdoms
3 - Outland
4 - Northrend
5 - The Maelstrom</Description>
    </ArgumentList>
    <ArgumentList Name="zoneIndex">
      <Description>Index of a zone within the continent to display (in the list returned by GetMapZones(continentIndex)), or omitted to show the continent map (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMaxAnimFramerate" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetMerchantFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetModifiedClick" Priority="0" ImageType="Method">
    <Signature>SetModifiedClick("action", "binding")</Signature>
    <Description>Sets a modified click for a given action</Description>
    <ArgumentList Name="action">
      <Description>Token identifying the modified click action (string) </Description>
    </ArgumentList>
    <ArgumentList Name="binding">
      <Description>The set of modifiers (and mouse button, if applicable) to register for the action (string, binding) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMouselookOverrideBinding" Priority="0" ImageType="Method">
    <Signature>SetMouselookOverrideBinding("key", "binding")</Signature>
    <Description>Overrides the default mouselook bindings to perform another binding with the mouse buttons</Description>
    <ArgumentList Name="key">
      <Description>The mouselook key to override (string)
BUTTON1 - Override the left mouse button
BUTTON2 - Override the right mouse button</Description>
    </ArgumentList>
    <ArgumentList Name="binding">
      <Description>The binding to perform instead of mouselooking, or nil to clear the override (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMultiCastSpell" Priority="0" ImageType="Method">
    <Signature>SetMultiCastSpell(action, spell)</Signature>
    <Description>Sets a multi-cast action slot to a given spell. This function is used to set up the multi-cast action slots, such as the totem bar that was introduced with WoW 3.2. The player is able to customize three different sets of totems that can then be cast with a single click.</Description>
    <ArgumentList Name="action">
      <Description>The multi-cast action slot to set (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The numeric spellId to set to the given action slot (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetMultisampleFormat" Priority="0" ImageType="Method">
    <Signature>SetMultisampleFormat(index)</Signature>
    <Description>Changes the multisample setting. The index argument corresponds to the individual settings described by GetMultisampleFormats() (each a set of three values).</Description>
    <ArgumentList Name="index">
      <Description>Index of a multisample setting (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetNamePlateMotionType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetNextBarberShopStyle" Priority="0" ImageType="Method">
    <Signature>SetNextBarberShopStyle(styleIndex [, reverse])</Signature>
    <Description>Selects the next style for a barber shop style option. Changes the underlying data (and thus the character's appearance) only; the default barbershop UI does not update.</Description>
    <ArgumentList Name="styleIndex">
      <Description>Index of a style option (number)
1 - Hair (or Horn) Style
2 - Hair (or Horn) Color
3 - Varies by race and gender: Facial Hair, Earrings, Features, Hair, Horns, Markings, Normal, Piercings, or Tusks</Description>
    </ArgumentList>
    <ArgumentList Name="reverse">
      <Description>True to select the previous style; false or omitted to select the next (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetOptOutOfLoot" Priority="0" ImageType="Method">
    <Signature>SetOptOutOfLoot(enable)</Signature>
    <Description>Changes the player's preference to opt out of loot rolls. When opting out, no prompt will be shown for loot which ordinarily would prompt the player to roll (need/greed) or pass; the loot rolling process will continue for other group members as if the player had chosen to pass on every roll.</Description>
    <ArgumentList Name="enable">
      <Description>True to opt out of loot, false to participate in loot rolls (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetOverrideBinding" Priority="0" ImageType="Method">
    <Signature>SetOverrideBinding(owner, isPriority, "key", "command")</Signature>
    <Description>Sets an override binding for a binding command. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key.
Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.</Description>
    <ArgumentList Name="owner">
      <Description>The Frame (or other widget) object responsible for this override (table) </Description>
    </ArgumentList>
    <ArgumentList Name="isPriority">
      <Description>True if this binding takes higher priority than other override bindings; false otherwise (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="command">
      <Description>Name of a key binding command, or nil to remove the override binding (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetOverrideBindingClick" Priority="0" ImageType="Method">
    <Signature>SetOverrideBindingClick(owner, isPriority, "key", "buttonName" [, "mouseButton"])</Signature>
    <Description>Sets an override binding to "click" a Button object. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key.
Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.</Description>
    <ArgumentList Name="owner">
      <Description>The Frame (or other widget) object responsible for this override (table) </Description>
    </ArgumentList>
    <ArgumentList Name="isPriority">
      <Description>True if this binding takes higher priority than other override bindings; false otherwise (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="buttonName">
      <Description>Name of a Button object on which the binding simulates a click (string) </Description>
    </ArgumentList>
    <ArgumentList Name="mouseButton">
      <Description>Name of the mouse button with which the binding simulates a click (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetOverrideBindingItem" Priority="0" ImageType="Method">
    <Signature>SetOverrideBindingItem(owner, isPriority, "key", itemID) or SetOverrideBindingItem(owner, isPriority, "key", "itemName") or SetOverrideBindingItem(owner, isPriority, "key", "itemLink")</Signature>
    <Description>Sets an override binding to use an item in the player's possession. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key.
Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.</Description>
    <ArgumentList Name="owner">
      <Description>The Frame (or other widget) object responsible for this override (table) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
    <ArgumentList />
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="SetOverrideBindingMacro" Priority="0" ImageType="Method">
    <Signature>SetOverrideBindingMacro(owner, isPriority, "key", index) or SetOverrideBindingMacro(owner, isPriority, "key", "name")</Signature>
    <Description>Sets an override binding to run a macro. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key.
Call with a fourth argument of nil to remove the override binding for a specific key, or see ClearOverrideBindings() to remove all bindings associated with a given owner.</Description>
    <ArgumentList Name="owner">
      <Description>The Frame (or other widget) object responsible for this override (table) </Description>
    </ArgumentList>
    <ArgumentList Name="isPriority">
      <Description>True if this binding takes higher priority than other override bindings; false otherwise (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a macro (number, macroID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a macro (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetOverrideBindingSpell" Priority="0" ImageType="Method">
    <Signature>SetOverrideBindingSpell(owner, isPriority, "key", "spellname")</Signature>
    <Description>Set an override binding to a specific spell. Override bindings are temporary. The bound key will revert to its normal setting once the override is removed. Priority overrides work the same way but will revert to the previous override binding (if present) rather than the base binding for the key. See ClearOverrideBindings() to remove bindings associated with a given owner.</Description>
    <ArgumentList Name="owner">
      <Description>The Frame (or other widget) object responsible for this override (table) </Description>
    </ArgumentList>
    <ArgumentList Name="isPriority">
      <Description>True if this binding takes higher priority than other override bindings; false otherwise (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key or key combination (e.g. "CTRL-2") (string, binding) </Description>
    </ArgumentList>
    <ArgumentList Name="spellname">
      <Description>Name of a spell, or nil to remove the override binding (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetPOIIconOverlapDistance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetPOIIconOverlapPushDistance" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetPVP" Priority="0" ImageType="Method">
    <Signature>SetPVP(state)</Signature>
    <Description>Enables or disables the player's desired PvP status. Enabling PvP takes effect immediately; disabling PvP begins a five-minute countdown after which PvP status will be disabled (if the player has taken no PvP actions).</Description>
    <ArgumentList Name="state">
      <Description>1 to enable PVP, nil to disable (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetPartyAssignment" Priority="0" ImageType="Method">
    <Signature>SetPartyAssignment("assignment", "unit") or SetPartyAssignment("assignment", "name" [, exactMatch])</Signature>
    <Description>Assigns a group role to a member of the player's party or raid</Description>
    <ArgumentList Name="assignment">
      <Description>A group role to assign to the unit (string)
MAINASSIST - Assign the main assist role
MAINTANK - Assign the main tank role</Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit in the player's party or raid (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit in the player's party or raid (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetPendingReportPetTarget" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetPendingReportTarget" Priority="0" ImageType="Method">
    <Signature>SetPendingReportTarget("unit")</Signature>
    <Description>Sets the target for a yet-to-be-made report.. Used in the stock UI when the "Report player" button is clicked on a unit frame as the report reason form still has to be filled out and the unit associated with the unitID could change before it is submitted.</Description>
    <ArgumentList Name="unit">
      <Description>Unit to set as reporting target. (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetPetSlot" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetPetStablePaperdoll" Priority="0" ImageType="Method">
    <Signature>SetPetStablePaperdoll(model)</Signature>
    <Description>Sets the given Model to show the selected stabled pet</Description>
    <ArgumentList Name="model">
      <Description>A Model frame (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetPortraitTexture" Priority="0" ImageType="Method">
    <Signature>SetPortraitTexture(texture, "unit")</Signature>
    <Description>Sets a Texture object to show a portrait of a unit. Causes the client to render a view of the unit's model from a standard perspective into a circular 2D image and display it in the given Texture object.</Description>
    <ArgumentList Name="texture">
      <Description>A Texture object (table) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit for which to display a portrait (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetPortraitToTexture" Priority="0" ImageType="Method">
    <Signature>SetPortraitToTexture("frameName", "texturePath")</Signature>
    <Description>Sets a Texture object to display an arbitrary texture, altering it to fit a circular frame. Used in the default UI to display square textures (such as item icons) within the circular "portrait" frames used in many default UI elements.</Description>
    <ArgumentList Name="frameName">
      <Description>Name of a Texture object (string) </Description>
    </ArgumentList>
    <ArgumentList Name="texturePath">
      <Description>Path to a texture to display (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetRaidDifficulty" Priority="0" ImageType="Method">
    <Signature>SetRaidDifficulty(difficulty)</Signature>
    <Description>Sets the player's raid dungeon difficulty preference. The dungeon difficulty has no effect on the instance created if the player is not the raid leader or while you are inside an instance already.</Description>
    <ArgumentList Name="difficulty">
      <Description>Difficulty level for raid dungeons
1 - 10 Player
2 - 25 Player
3 - 10 Player (Heroic)
4 - 25 Player (Heroic)</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetRaidProfileOption" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetRaidProfileSavedPosition" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetRaidSubgroup" Priority="0" ImageType="Method">
    <Signature>SetRaidSubgroup(index, subgroup)</Signature>
    <Description>Moves a raid member to a non-full raid subgroup. Only has effect if the player is the raid leader or a raid assistant. To put a member into a full subgroup (switching places with a member of that group), see SwapRaidSubgroup().</Description>
    <ArgumentList Name="index">
      <Description>Index of the raid member (between 1 and GetNumRaidMembers()); matches the numeric part of the unit's raid unitID, e.g. 21 for raid21 (number) </Description>
    </ArgumentList>
    <ArgumentList Name="subgroup">
      <Description>Index of a raid subgroup (between 1 and MAX_RAID_GROUPS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetRaidTarget" Priority="0" ImageType="Method">
    <Signature>SetRaidTarget("unit", index) or SetRaidTarget("name", index)</Signature>
    <Description>Puts a raid target marker on a unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to mark (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to mark (string) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of a target marker (number)
0 - Clear any raid target markers
1 - Star
2 - Circle
3 - Diamond
4 - Triangle
5 - Moon
6 - Square
7 - Cross
8 - Skull</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetRaidTargetProtected" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetRecruitingGuildSelection" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetReforgeFromCursorItem" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetRefresh" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetSavedInstanceExtend" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetScreenResolution" Priority="0" ImageType="Method">
    <Signature>SetScreenResolution(index)</Signature>
    <Description>Changes the screen resolution</Description>
    <ArgumentList Name="index">
      <Description>Index of a resolution setting (between 1 and select("#",GetScreenResolutions())) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetSelectedAuctionItem" Priority="0" ImageType="Method">
    <Signature>SetSelectedAuctionItem("list", index)</Signature>
    <Description>Selects an item in an auction listing. Auction selection is used only for display and internal recordkeeping in the default UI; it has no direct effect on other Auction APIs.</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an auction in the listing (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedDisplayChannel" Priority="0" ImageType="Method">
    <Signature>SetSelectedDisplayChannel(index)</Signature>
    <Description>Selects a channel in the channel list display</Description>
    <ArgumentList Name="index">
      <Description>Index of a channel in the channel list display (between 1 and GetNumDisplayChannels()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedFaction" Priority="0" ImageType="Method">
    <Signature>SetSelectedFaction(index)</Signature>
    <Description>Selects a faction in the reputation UI.

Selection has no bearing on other faction-related APIs; this function merely facilitates behaviors of Blizzard's reputation UI.
 </Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedFriend" Priority="0" ImageType="Method">
    <Signature>SetSelectedFriend(index)</Signature>
    <Description>Selects a character in the player's friends list. Selection in the Friends list is used only for display in the default UI and has no effect on other Friends list APIs.</Description>
    <ArgumentList Name="index">
      <Description>Index of a character in the Friends list (between 1 and GetNumFriends()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedIgnore" Priority="0" ImageType="Method">
    <Signature>SetSelectedIgnore(index)</Signature>
    <Description>Selects a character in the player's ignore list. Selection in the Ignore list is used only for display in the default UI and has no effect on other Ignore list APIs.</Description>
    <ArgumentList Name="index">
      <Description>Index of a character in the Ignore list (between 1 and GetNumIgnores()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedMute" Priority="0" ImageType="Method">
    <Signature>SetSelectedMute(index)</Signature>
    <Description>Selects an entry in the Muted list. Mute list selection is only used for display purposes in the default UI and has no effect on other API functions.</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the mute listing (between 1 and GetNumMutes()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSelectedScreenResolutionIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetSelectedWarGameType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetSendMailCOD" Priority="0" ImageType="Method">
    <Signature>SetSendMailCOD(amount)</Signature>
    <Description>Sets the Cash-On-Delivery cost of the outgoing message. Called in the default UI when clicking its Send button, immediately before sending the mail.</Description>
    <ArgumentList Name="amount">
      <Description>COD cost for the items attached to the mail (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSendMailMoney" Priority="0" ImageType="Method">
    <Signature>success = SetSendMailMoney(amount)</Signature>
    <Description>Sets the amount of money to be sent with the outgoing message. Called in the default UI when clicking its Send button, immediately before sending the mail. Causes an error message if the amount plus postage exceeds the player's total money.</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money to send (in copper) (number) </Description>
    </ArgumentList>
    <ReturnList Name="success">
      <Description>1 if the player has enough money to send the mail; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SetSendMailShowing" Priority="0" ImageType="Method">
    <Signature>SetSendMailShowing(enable)</Signature>
    <Description>Enables or disables shortcuts for attaching items to outgoing mail. When shortcuts are enabled, UseContainerItem() (i.e. right-click in the default UI's container frames) attaches the item to the outgoing message instead of using it.</Description>
    <ArgumentList Name="enable">
      <Description>True to enable shortcuts; false to disable (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetSpecialization" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetSpellbookPetAction" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetSuperTrackedQuestID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetTaxiBenchmarkMode" Priority="0" ImageType="Method">
    <Signature>SetTaxiBenchmarkMode("arg")</Signature>
    <Description>Enables or disables flight path benchmark mode. When benchmark mode is enabled, the next taxi flight the player takes will behave differently: camera movement is disabled and players/creatures/objects below the flight path will not be shown (allowing for consistent test conditions). After the flight, framerate statistics will be printed in the chat window and benchmark mode will be automatically disabled.</Description>
    <ArgumentList Name="arg">
      <Description>nil, "on", or 1 to enable benchmark mode; "off" or 0 to disable (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTaxiMap" Priority="0" ImageType="Method">
    <Signature>SetTaxiMap(texture)</Signature>
    <Description>Sets a Texture object to show the appropriate flight map texture. Only has effect while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="texture">
      <Description>A Texture object (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTracking" Priority="0" ImageType="Method">
    <Signature>SetTracking(index, enabled)</Signature>
    <Description>Enables a given minimap object/unit tracking ability</Description>
    <ArgumentList Name="index">
      <Description>Index of a tracking ability (between 1 and GetNumTrackingTypes()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="enabled">
      <Description>pass true to enable, false to disable (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTradeCurrency" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetTradeMoney" Priority="0" ImageType="Method">
    <Signature>SetTradeMoney(amount)</Signature>
    <Description>Offers an amount of money for trade</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money to offer for trade (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTradeSkillCategoryFilter" Priority="0" ImageType="Method">
    <Signature>SetTradeSkillCategoryFilter(index)</Signature>
    <Description>Filters the trade skill listing by subclass of items produced</Description>
    <ArgumentList Name="index">
      <Description>Index of an item subclass (in the list returned by GetTradeSkillSubClasses()), or 0 for no filter (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTradeSkillInvSlotFilter" Priority="0" ImageType="Method">
    <Signature>SetTradeSkillInvSlotFilter(index [, enable [, exclusive]])</Signature>
    <Description>Filters the trade skill listing by equipment slot of items produced</Description>
    <ArgumentList Name="index">
      <Description>Index of an item equipment slot (in the list returned by GetTradeSkillInvSlots()), or 0 for no filter (number) </Description>
    </ArgumentList>
    <ArgumentList Name="enable">
      <Description>1 to show recipes matching inventory type index in the filtered list; 0 to hide them (number) </Description>
    </ArgumentList>
    <ArgumentList Name="exclusive">
      <Description>1 to disable other subclass filters when enabling this one; otherwise nil (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTradeSkillItemLevelFilter" Priority="0" ImageType="Method">
    <Signature>SetTradeSkillItemLevelFilter(minLevel, maxLevel)</Signature>
    <Description>Filters the trade skill listing by required level of items produced</Description>
    <ArgumentList Name="minLevel">
      <Description>Lowest required level of items to show in the filtered list (number) </Description>
    </ArgumentList>
    <ArgumentList Name="maxLevel">
      <Description>Highest required level of items to show in the filtered list (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTradeSkillItemNameFilter" Priority="0" ImageType="Method">
    <Signature>SetTradeSkillItemNameFilter("text")</Signature>
    <Description>Filters the trade skill listing by name of recipe, item produced, or reagents. Uses a substring (not exact-match) search: e.g. for a Scribe, the search string "doc" might filter the list to show only Certificate of Ownership because it matches the word "documentation" in that item's tooltip; a search for "stam" will match all items providing a Stamina bonus.</Description>
    <ArgumentList Name="text">
      <Description>Text to search for in recipe names, produced item names or descriptions, or reagents (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetTradeSkillRepeatCount" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SetTrainerServiceTypeFilter" Priority="0" ImageType="Method">
    <Signature>SetTrainerServiceTypeFilter("type" [, enable [, exclusive]])</Signature>
    <Description>Filters the trainer service listing by service status</Description>
    <ArgumentList Name="type">
      <Description>A service status (string)
available - Services the player can use
unavailable - Services the player cannot currently use
used - Services the player has already used</Description>
    </ArgumentList>
    <ArgumentList Name="enable">
      <Description>1 to show services matching type in the filtered list; 0 to hide them (number) </Description>
    </ArgumentList>
    <ArgumentList Name="exclusive">
      <Description>1 to disable other type filters when enabling this one; otherwise nil (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetUIVisibility" Priority="0" ImageType="Method">
    <Signature>SetUIVisibility(visible)</Signature>
    <Description>Enables or disables display of UI elements in the 3-D world. Applies only to 2-D UI elements displayed in the 3-D world: nameplates and raid target icons (skull, circle, square, etc). Does not directly control nameplates and target icons -- only affects whether they are displayed (see the nameplateShowEnemies/nameplateShowFriends CVars and SetRaidTarget functions for direct control).
Does not apply to 3-D UI elements such as the selection circle, area-effect targeting indicator, vehicle weapon aim indicator, etc.</Description>
    <ArgumentList Name="visible">
      <Description>True to enable display of UI elements in the 3-D world; false to disable (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetView" Priority="0" ImageType="Method">
    <Signature>SetView(index)</Signature>
    <Description>Moves the camera to a saved camera setting. There are five "slots" for saved camera settings, indexed 1-5. These views can be set and accessed directly using SaveView() and SetView(), and cycled through using NextView() and PrevView().</Description>
    <ArgumentList Name="index">
      <Description>Index of a saved camera setting (between 1 and 5) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetWatchedFactionIndex" Priority="0" ImageType="Method">
    <Signature>SetWatchedFactionIndex(index)</Signature>
    <Description>Makes a faction the "watched" faction (displayed on the XP bar in the default UI)</Description>
    <ArgumentList Name="index">
      <Description>Index of an entry in the faction list; between 1 and GetNumFactions() (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetWhoToUI" Priority="0" ImageType="Method">
    <Signature>SetWhoToUI(state)</Signature>
    <Description>Changes the delivery method for results from SendWho() queries. In the default UI, results delivered in CHAT_MSG_SYSTEM are printed in the main chat window; results delivered in a WHO_LIST_UPDATE event cause the FriendsFrame to be shown, displaying the results in its "Who" tab.</Description>
    <ArgumentList Name="state">
      <Description>Number identifying a delivery method (number)
0 - Send results of three entries or fewer in CHAT_MSG_SYSTEM events and results of greater than three entries in a WHO_LIST_UPDATE event
1 - Send all results in a WHO_LIST_UPDATE event</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SetupFullscreenScale" Priority="0" ImageType="Method">
    <Signature>SetupFullscreenScale(frame)</Signature>
    <Description>Sizes a frame to take up the entire screen regardless of screen resolution</Description>
    <ArgumentList Name="frame">
      <Description>Frame to resize to full screen (table) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShiftQuestWatches" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ShowAccountAchievements" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ShowBuybackSellCursor" Priority="0" ImageType="Method">
    <Signature>ShowBuybackSellCursor(index)</Signature>
    <Description>Changes the cursor to prepare for repurchasing an item recently sold to a vendor. Only changes the cursor image and mode if the given index contains an item.</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the buyback listing (between 1 and GetNumBuybackItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowCloak" Priority="0" ImageType="Method">
    <Signature>ShowCloak(show)</Signature>
    <Description>Enables or disables display of the player's cloak. Only affects the player's appearance; does not change the other effects of having the cloak equipped. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.</Description>
    <ArgumentList Name="show">
      <Description>1 to display the player's cloak; nil to hide it (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowContainerSellCursor" Priority="0" ImageType="Method">
    <Signature>ShowContainerSellCursor(container, slot)</Signature>
    <Description>Changes the cursor to prepare for selling an item in the player's bags to a vendor. Only changes the cursor image and mode if the given container and slot contain an item.
While the cursor is in "sell" mode, UseContainerItem() sells the item to the vendor instead of using it.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowFriends" Priority="0" ImageType="Method">
    <Signature>ShowFriends()</Signature>
    <Description>Requests friends/ignore list information from the server. Information is not returned immediately; the FRIENDLIST_UPDATE event fires when data becomes available for use by Friends/Ignore API functions.</Description>
  </WowApi>
  <WowApi Name="ShowHelm" Priority="0" ImageType="Method">
    <Signature>ShowHelm(show)</Signature>
    <Description>Enables or disables display of the player's headgear. Only affects the player's appearance; does not change the other effects of having the headgear equipped. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.</Description>
    <ArgumentList Name="show">
      <Description>1 to display the player's headgear; nil to hide it (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowInventorySellCursor" Priority="0" ImageType="Method">
    <Signature>ShowInventorySellCursor(slot)</Signature>
    <Description>Changes the cursor to prepare for selling an equipped item to a vendor. Only changes the cursor image and mode if the given slot contains an item.
(Unlike ShowContainerSellCursor(), does not change the behavior of other functions to enable selling of items. Unused in the default UI.)</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowMerchantSellCursor" Priority="0" ImageType="Method">
    <Signature>ShowMerchantSellCursor(index)</Signature>
    <Description>Changes the cursor to prepare for buying an item from a vendor. Only changes the cursor image and mode if the given index contains an item.</Description>
    <ArgumentList Name="index">
      <Description>Index of an item in the vendor's listing (between 1 and GetMerchantNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowMiniWorldMapArrowFrame" Priority="0" ImageType="Method">
    <Signature>ShowMiniWorldMapArrowFrame(show)</Signature>
    <Description>Shows or hides the battlefield minimap's player arrow</Description>
    <ArgumentList Name="show">
      <Description>If the battlefield minimap's player arrow should be shown (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ShowQuestComplete" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ShowQuestOffer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ShowRepairCursor" Priority="0" ImageType="Method">
    <Signature>ShowRepairCursor()</Signature>
    <Description>Puts the cursor in item repair mode. Unlike most other cursor functions, this functions changes the behavior as well as the appearance of the mouse cursor: while repair mode is active, calling PickupContainerItem() or PickupInventoryItem() will attempt to repair the item (and deduct the cost of such from the player's savings) instead of putting it on the cursor.
Only has effect while the player is interacting with a vendor which can perform repairs; i.e. between the MERCHANT_SHOW and MERCHANT_CLOSED events, and only if CanMerchantRepair() returns 1.</Description>
  </WowApi>
  <WowApi Name="ShowWorldMapArrowFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ShowingCloak" Priority="0" ImageType="Method">
    <Signature>isShown = ShowingCloak()</Signature>
    <Description>Returns whether the player's cloak is displayed. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.</Description>
    <ReturnList Name="isShown">
      <Description>1 if the player's cloak is shown; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ShowingHelm" Priority="0" ImageType="Method">
    <Signature>isShown = ShowingHelm()</Signature>
    <Description>Returns whether the player's headgear is displayed. Determines not only the appearance of the player character on the local client, but the way other players see the character as well.</Description>
    <ReturnList Name="isShown">
      <Description>1 if the player's headgear is shown; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SignPetition" Priority="0" ImageType="Method">
    <Signature>SignPetition()</Signature>
    <Description>Signs the currently offered petition</Description>
  </WowApi>
  <WowApi Name="SitStandOrDescendStart" Priority="0" ImageType="Method">
    <Signature>SitStandOrDescendStart()</Signature>
    <Description>Causes the player character to sit down if standing and vice versa (or begins descent if swimming or flying). Used by the SITORSTAND binding, which also controls descent when swimming or flying.</Description>
  </WowApi>
  <WowApi Name="SocketContainerItem" Priority="0" ImageType="Method">
    <Signature>SocketContainerItem(container, slot)</Signature>
    <Description>Opens an item from the player's bags for socketing</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SocketInventoryItem" Priority="0" ImageType="Method">
    <Signature>SocketInventoryItem(slot)</Signature>
    <Description>Opens an equipped item for socketing</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SocketItemToArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SolveArtifact" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SortArenaTeamRoster" Priority="0" ImageType="Method">
    <Signature>SortArenaTeamRoster("sortType")</Signature>
    <Description>Sorts the selected arena team's roster. Affects the ordering of member information returned by GetArenaTeamRosterInfo. Sorting by the same criterion repeatedly reverses the sort order.</Description>
    <ArgumentList Name="sortType">
      <Description>Criterion for sorting the roster (string)
class - Sort by class
name - Sort by name
played - Sort by number of games played in the current week
rating - Sort by personal rating
seasonplayed - Sort by number of games played in the current arena season
seasonwon - Sort by number of games won in the current arena season
won - Sort by number of games won in the current week</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SortAuctionApplySort" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SortAuctionClearSort" Priority="0" ImageType="Method">
    <Signature>SortAuctionClearSort("list")</Signature>
    <Description>Clears any current sorting rules for an auction house listing</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SortAuctionItems" Priority="0" ImageType="Method">
    <Signature>SortAuctionItems("type", "sort")</Signature>
    <Description>Sorts the auction house listing. No longer used in the default UI; see SortAuctionClearSort(), SortAuctionSetSort(), and SortAuctionApplySort() instead.</Description>
    <ArgumentList Name="type">
      <Description>The type of auction listing to sort (string)
bidder - Auctions the player has bid on
list - Standard auction house listing
owner - Auctions the player has placed</Description>
    </ArgumentList>
    <ArgumentList Name="sort">
      <Description>Criterion for sorting the list (string)
bid - Amount of the current or minimum bid on the item
buyout - Buyout price of the item
duration - Time remaining before the auction expires
level - Required character level to use or equip the item
minbidbuyout - Buyout price, or minimum bid if no buyout price is available
name - Name of the item
quality - itemQuality of the item
quantity - Number of stacked items in the auction
seller - Name of the character who created of the auction (or in the owner listing, the current high bidder)
status - Status of the auction (e.g. in the bidder listing, whether the player has been outbid)</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SortAuctionSetSort" Priority="0" ImageType="Method">
    <Signature>SortAuctionSetSort("list", "sort", reversed)</Signature>
    <Description>Builds a list of sort criteria for auction listings. Has no effect until SortAuctionApplySort(type) is called; thus, this function can be called repeatedly to build a complex set of sort criteria. Sort criteria are applied server-side, affecting not only the order of items within one "page" of listings but the order in which items are collected into pages.
Criteria are applied in the order set by this function; i.e. the last criterion set becomes the primary sort criterion (see example).</Description>
    <ArgumentList Name="list">
      <Description>Type of auction listing (string)
bidder - Auctions the player has bid on
list - Auctions the player can browse and bid on or buy out
owner - Auctions the player placed</Description>
    </ArgumentList>
    <ArgumentList Name="sort">
      <Description>Criterion to add to the sort (string)
bid - Amount of the current or minimum bid on the item
buyout - Buyout price of the item
duration - Time remaining before the auction expires
level - Required character level to use or equip the item
minbidbuyout - Buyout price, or minimum bid if no buyout price is available
name - Name of the item
quality - itemQuality of the item
quantity - Number of stacked items in the auction
seller - Name of the character who created of the auction (or in the owner listing, the current high bidder)
status - Status of the auction (e.g. in the bidder listing, whether the player has been outbid)</Description>
    </ArgumentList>
    <ArgumentList Name="reversed">
      <Description>True to sort in reverse order; otherwise false. "Reverse" here is relative to the default order, not to absolute value: e.g. the default order for quality is descending (Epic, Rare, Uncommon, etc), but the default order for level is ascending (1-80) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SortBGList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SortBattlefieldScoreData" Priority="0" ImageType="Method">
    <Signature>SortBattlefieldScoreData("sortType")</Signature>
    <Description>Sorts the battleground scoreboard. Battleground-specific statistics include flags captured in Warsong Gulch, towers assaulted in Alterac Valley, etc. For the name and icon associated with each statistic, see GetBattlefieldStatInfo().</Description>
    <ArgumentList Name="sortType">
      <Description>Criterion for sorting the scoreboard data (string)
class - Sort by character class
cp - Sorts by honor points gained
damage - Sorts by damage done
deaths - Sort by number of deaths
healing - Sorts by healing done
hk - Sorts by number of honor kills
kills - Sort by number of kills
name - Sort by participant name
stat1 - Battlefield-specific statistic 1
stat2 - Battlefield-specific statistic 2
stat3 - Battlefield-specific statistic 3
stat4 - Battlefield-specific statistic 4
stat5 - Battlefield-specific statistic 5
stat6 - Battlefield-specific statistic 6
stat7 - Battlefield-specific statistic 7
team - Sort by team name</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SortGuildRoster" Priority="0" ImageType="Method">
    <Signature>SortGuildRoster("type")</Signature>
    <Description>Sorts the guild roster. Sorting repeatedly by the same criterion will reverse the sort order. Previous sorts are reused when a new criterion is applied: to sort by two criteria, sort first by the secondary criterion and then by the primary criterion.</Description>
    <ArgumentList Name="type">
      <Description>Criterion by which to sort the roster (string)
class - Sort by class name
level - Sort by character level
name - Sort by name
note - Sort by guild note
online - Sory by last online time
rank - Sort by guild rank
zone - Sort by current zone name</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SortGuildTradeSkill" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SortQuestWatches" Priority="0" ImageType="Method">
    <Signature>changed = SortQuestWatches()</Signature>
    <Description>Sorts the quests listed in the watch frame based on the set criteria</Description>
    <ReturnList Name="changed">
      <Description>true if the quest watches were re-ordered during the sort, otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SortWho" Priority="0" ImageType="Method">
    <Signature>SortWho("sortType")</Signature>
    <Description>Sorts the Who system query results list. Sorting by the same criterion twice will reverse the sort order.</Description>
    <ArgumentList Name="sortType">
      <Description>Criterion for sorting the list (string)
class - Sort by class name
guild - Sort by guild name
level - Sort by player level
name - Sort by player name
race - Sort by race name
zone - Sort by current zone name</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Sound_ChatSystem_GetInputDriverNameByIndex" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Sound_ChatSystem_GetNumInputDrivers" Priority="0" ImageType="Method">
    <Signature>Sound_ChatSystem_GetNumInputDrivers()</Signature>
    <Description>Returns the number of chat system sound input drivers</Description>
  </WowApi>
  <WowApi Name="Sound_ChatSystem_GetNumOutputDrivers" Priority="0" ImageType="Method">
    <Signature>Sound_ChatSystem_GetNumOutputDrivers()</Signature>
    <Description>Returns the number of chat system sound output drivers</Description>
  </WowApi>
  <WowApi Name="Sound_ChatSystem_GetOutputDriverNameByIndex" Priority="0" ImageType="Method">
    <Signature>Sound_ChatSystem_GetOutputDriverNameByIndex(index)</Signature>
    <Description>Returns the name of the given chat system sound output driver</Description>
    <ArgumentList Name="index">
      <Description>The desired index (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Sound_GameSystem_GetInputDriverNameByIndex" Priority="0" ImageType="Method">
    <Signature>Sound_GameSystem_GetInputDriverNameByIndex(index)</Signature>
    <Description>Returns the name of the given game sound input driver</Description>
    <ArgumentList Name="index">
      <Description>The desired index (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Sound_GameSystem_GetNumInputDrivers" Priority="0" ImageType="Method">
    <Signature>Sound_GameSystem_GetNumInputDrivers()</Signature>
    <Description>Returns the number of game sound input drivers</Description>
  </WowApi>
  <WowApi Name="Sound_GameSystem_GetNumOutputDrivers" Priority="0" ImageType="Method">
    <Signature>Sound_GameSystem_GetNumOutputDrivers()</Signature>
    <Description>Returns the number of game sound output drivers</Description>
  </WowApi>
  <WowApi Name="Sound_GameSystem_GetOutputDriverNameByIndex" Priority="0" ImageType="Method">
    <Signature>Sound_GameSystem_GetOutputDriverNameByIndex(index)</Signature>
    <Description>Returns the name of the given game sound output driver</Description>
    <ArgumentList Name="index">
      <Description>The desired index (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Sound_GameSystem_RestartSoundSystem" Priority="0" ImageType="Method">
    <Signature>Sound_GameSystem_RestartSoundSystem()</Signature>
    <Description>Restarts the game's sound systems</Description>
  </WowApi>
  <WowApi Name="SpellCanTargetGlyph" Priority="0" ImageType="Method">
    <Signature>canTarget = SpellCanTargetGlyph()</Signature>
    <Description>Returns whether the spell currently awaiting a target requires a glyph slot to be chosen.
Only applies when the player has attempted to cast a spell -- in this case, the "spell" cast when one uses a glyph item -- but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).</Description>
    <ReturnList Name="canTarget">
      <Description>1 if the spell can target glyph slots (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SpellCanTargetItem" Priority="0" ImageType="Method">
    <Signature>canTarget = SpellCanTargetItem()</Signature>
    <Description>Returns whether the spell currently awaiting a target requires an item to be chosen. Only applies when the player has attempted to cast a spell but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).</Description>
    <ReturnList Name="canTarget">
      <Description>1 if the spell can target an item; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SpellCanTargetUnit" Priority="0" ImageType="Method">
    <Signature>canTarget = SpellCanTargetUnit("unit") or SpellCanTargetUnit("name")</Signature>
    <Description>Returns whether the spell currently awaiting a target can target a given unit. Only applies when the player has attempted to cast a spell but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to target (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to target; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="canTarget">
      <Description>1 if the spell currently awaiting targeting can target the given unit (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SpellCancelQueuedSpell" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SpellGetVisibilityInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SpellHasRange" Priority="0" ImageType="Method">
    <Signature>hasRange = SpellHasRange(index, "bookType") or SpellHasRange("name")</Signature>
    <Description>Returns whether an item has a range limitation for its use. For example: Shadowbolt can only be used on a unit within a given range of the player; Ritual of Summoning requires a target but has no range restriction; Fel Armor has no target and thus no range restriction.</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
    <ReturnList Name="hasRange">
      <Description>1 if the spell has an effective range; otherwise nil. (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SpellIsSelfBuff" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SpellIsTargeting" Priority="0" ImageType="Method">
    <Signature>isTargeting = SpellIsTargeting()</Signature>
    <Description>Returns whether a spell is currently awaiting a target</Description>
    <ReturnList Name="isTargeting">
      <Description>1 if a spell is currently awaiting a target; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SpellStopCasting" Priority="0" ImageType="Method">
    <Signature>SpellStopCasting()</Signature>
    <Description>Stops casting or targeting the spell in progress</Description>
  </WowApi>
  <WowApi Name="SpellStopTargeting" Priority="0" ImageType="Method">
    <Signature>SpellStopTargeting()</Signature>
    <Description>Cancels the spell currently awaiting a target. When auto-self cast is not enabled and the player casts a spell that requires a target, the cursor changes to a glowing hand so the user can select a target. This function cancels targeting mode so the player can cast another spell.</Description>
  </WowApi>
  <WowApi Name="SpellTargetItem" Priority="0" ImageType="Method">
    <Signature>SpellTargetItem(itemID) or SpellTargetItem("itemName") or SpellTargetItem("itemLink")</Signature>
    <Description>Casts the spell currently awaiting a target on an item. Usable when the player has attempted to cast a spell (e.g. an Enchanting recipe or the "Use:" effect of a sharpening stone or fishing lure) but the spell requires a target before it can begin casting (i.e. the glowing hand cursor is showing).</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SpellTargetUnit" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SplitContainerItem" Priority="0" ImageType="Method">
    <Signature>SplitContainerItem(container, slot, amount)</Signature>
    <Description>Picks up only part of a stack of items from one of the player's bags or other containers. Has no effect if the given amount is greater than the number of items stacked in the slot.</Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ArgumentList Name="amount">
      <Description>Number of items from the stack to pick up (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SplitGuildBankItem" Priority="0" ImageType="Method">
    <Signature>SplitGuildBankItem(tab, slot, amount)</Signature>
    <Description>Picks up only part of a stack of items from the guild bank. Has no effect if the given amount is greater than the number of items stacked in the slot.</Description>
    <ArgumentList Name="tab">
      <Description>Index of a guild bank tab (number) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot in the guild bank tab (number) </Description>
    </ArgumentList>
    <ArgumentList Name="amount">
      <Description>Number of items from the stack to pick up (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="StartAttack" Priority="0" ImageType="Method">
    <Signature>StartAttack("unit") or StartAttack("name")</Signature>
    <Description>Begins auto-attack against a specified target</Description>
    <ArgumentList Name="unit">
      <Description>A unit to attack (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to attack (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="StartAuction" Priority="0" ImageType="Method">
    <Signature>StartAuction(minBid, buyoutPrice, runTime, stackSize, numStacks)</Signature>
    <Description>Creates an auction for the item currently in the "auction item" slot. Has no effect unless an item has been placed in the Create Auction UI's "auction item" slot (see ClickAuctionSellItemButton()). With patch 3.3.3 the runTime arg was changed from minutes to an index and the stackSize/numStacks args were added for batch posting.</Description>
    <ArgumentList Name="minBid">
      <Description>Minimum bid for the auction (in copper) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="buyoutPrice">
      <Description>Buyout price for the auction (in copper) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="runTime">
      <Description>Run time until the auction expires (an index indicating number of hours) (number)
1 - 12 hours
2 - 24 hours
3 - 48 hours</Description>
    </ArgumentList>
    <ArgumentList Name="stackSize">
      <Description>Number of items to post in each auction (number) </Description>
    </ArgumentList>
    <ArgumentList Name="numStacks">
      <Description>Number of auctions (stacks) to post (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="StartDuel" Priority="0" ImageType="Method">
    <Signature>StartDuel("unit") or StartDuel("name" [, exactMatch])</Signature>
    <Description>Challenges another player to a duel</Description>
    <ArgumentList Name="unit">
      <Description>A unit to target (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to target (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="StartUnratedArena" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="StartWarGame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="StopAttack" Priority="0" ImageType="Method">
    <Signature>StopAttack()</Signature>
    <Description>Stops auto-attack if active</Description>
  </WowApi>
  <WowApi Name="StopCinematic" Priority="0" ImageType="Method">
    <Signature>StopCinematic()</Signature>
    <Description>Exits a currently playing in-game cinematic. Applies to in-game-engine cinematics (such as when logging into a new character for the first time), not prerecorded movies.</Description>
  </WowApi>
  <WowApi Name="StopMacro" Priority="0" ImageType="Method">
    <Signature>StopMacro()</Signature>
    <Description>Stops execution of a running macro</Description>
  </WowApi>
  <WowApi Name="StopMusic" Priority="0" ImageType="Method">
    <Signature>StopMusic()</Signature>
    <Description>Stops currently playing in-game music</Description>
  </WowApi>
  <WowApi Name="StopSound" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="StopTradeSkillRepeat" Priority="0" ImageType="Method">
    <Signature>StopTradeSkillRepeat()</Signature>
    <Description>Cancels repetition of a trade skill recipe. If a recipe is currently being performed, it will continue, but further scheduled repetitions will be canceled.</Description>
  </WowApi>
  <WowApi Name="Stopwatch_Clear" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Stopwatch_FinishCountdown" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Stopwatch_IsPlaying" Priority="0" ImageType="Method">
    <Signature>isPlaying = Stopwatch_IsPlaying()</Signature>
    <Description>Returns True/False if Stop Watch is running.</Description>
    <ReturnList Name="isPlaying">
      <Description>Returns true/false depending on if the Stop Watch is currently counting Down/Up (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="Stopwatch_Pause" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Stopwatch_Play" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Stopwatch_StartCountdown" Priority="0" ImageType="Method">
    <Signature>Stopwatch_StartCountdown(hours, minutes, seconds)</Signature>
    <Description>Sets the Stop Watches timer value</Description>
    <ArgumentList Name="hours">
      <Description>Sets the amount of hours the Stop Watch will run (integer) </Description>
    </ArgumentList>
    <ArgumentList Name="minutes">
      <Description>Sets the amount of minutes the Stop Watch will run (integer) </Description>
    </ArgumentList>
    <ArgumentList Name="seconds">
      <Description>Sets the amount of seconds the Stop Watch will run (integer) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="Stopwatch_Toggle" Priority="0" ImageType="Method">
    <Signature>Stopwatch_Toggle()</Signature>
    <Description>Toggles visibility of the StopwatchFrame</Description>
  </WowApi>
  <WowApi Name="StrafeLeftStart" Priority="0" ImageType="Method">
    <Signature>StrafeLeftStart()</Signature>
    <Description>Begins moving the player character sideways to his or her left</Description>
  </WowApi>
  <WowApi Name="StrafeLeftStop" Priority="0" ImageType="Method">
    <Signature>StrafeLeftStop()</Signature>
    <Description>Ends movement initiated by StrafeLeftStart</Description>
  </WowApi>
  <WowApi Name="StrafeRightStart" Priority="0" ImageType="Method">
    <Signature>StrafeRightStart()</Signature>
    <Description>Begins moving the player character sideways to his or her right</Description>
  </WowApi>
  <WowApi Name="StrafeRightStop" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="Stuck" Priority="0" ImageType="Method">
    <Signature>Stuck()</Signature>
    <Description>Uses the auto-unstuck feature</Description>
  </WowApi>
  <WowApi Name="SubmitRequiredGuildRename" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="SummonFriend" Priority="0" ImageType="Method">
    <Signature>SummonFriend("name") or SummonFriend("unit")</Signature>
    <Description>Summons a unit whose account is linked to the player's via the Recruit-a-Friend program. Does not instantly teleport the unit -- calling this function begins casting the Summon Friend "spell", and once it completes the unit is prompted to accept or decline the summon.</Description>
    <ArgumentList Name="name">
      <Description>Exact name of a player to summon (only applies to units in the player's party or raid) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>A unit to summon (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SummonRandomCritter" Priority="0" ImageType="Method">
    <Signature>SummonRandomCritter()</Signature>
    <Description>Summons a random critter companion</Description>
  </WowApi>
  <WowApi Name="SwapRaidSubgroup" Priority="0" ImageType="Method">
    <Signature>SwapRaidSubgroup(index1, index2)</Signature>
    <Description>Swaps two raid members between subgroups in the raid. Only has effect if the player is the raid leader or a raid assistant. To move a member into a non-full subgroup without switching places with another member, see SetRaidSubgroup().</Description>
    <ArgumentList Name="index1">
      <Description>Index of the first raid member (between 1 and GetNumRaidMembers()); matches the numeric part of the unit's raid unitID, e.g. 21 for raid21 (number) </Description>
    </ArgumentList>
    <ArgumentList Name="index2">
      <Description>Index of the other raid member (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TakeInboxItem" Priority="0" ImageType="Method">
    <Signature>TakeInboxItem(mailID, attachmentIndex)</Signature>
    <Description>Retrieves an item attachment from a message in the player's inbox (accepting COD charges if applicable)</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="attachmentIndex">
      <Description>Index of an attachment to the mail (between 1 and select(8,GetInboxHeaderInfo(mailID))) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TakeInboxMoney" Priority="0" ImageType="Method">
    <Signature>TakeInboxMoney(mailID)</Signature>
    <Description>Retrieves any money attached to a mail in the player's inbox</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TakeInboxTextItem" Priority="0" ImageType="Method">
    <Signature>TakeInboxTextItem(mailID)</Signature>
    <Description>Requests a copy of a mail's body text as an item. The text of an in-game mail can be retrieved as a readable "Plain Letter" item to store in the player's bags; this function sends a request to the server for this item, causing the standard inventory events to fire as the item is placed into the player's inventory.</Description>
    <ArgumentList Name="mailID">
      <Description>Index of a mail in the player's inbox (between 1 and GetInboxNumItems()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TakeTaxiNode" Priority="0" ImageType="Method">
    <Signature>TakeTaxiNode(index)</Signature>
    <Description>Embarks on a taxi flight to a given destination. Only has effect while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetDirectionEnemy" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TargetDirectionFinished" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TargetDirectionFriend" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TargetLastEnemy" Priority="0" ImageType="Method">
    <Signature>TargetLastEnemy()</Signature>
    <Description>Targets the most recently targeted enemy unit</Description>
  </WowApi>
  <WowApi Name="TargetLastFriend" Priority="0" ImageType="Method">
    <Signature>TargetLastFriend()</Signature>
    <Description>Targets the most recently targeted friendly unit</Description>
  </WowApi>
  <WowApi Name="TargetLastTarget" Priority="0" ImageType="Method">
    <Signature>TargetLastTarget()</Signature>
    <Description>Targets the most recently targeted unit</Description>
  </WowApi>
  <WowApi Name="TargetNearest" Priority="0" ImageType="Method">
    <Signature>TargetNearest([backward])</Signature>
    <Description>Cycles targets through nearest units regardless of reaction/affiliation</Description>
    <ArgumentList Name="backward">
      <Description>Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetNearestEnemy" Priority="0" ImageType="Method">
    <Signature>TargetNearestEnemy(backward)</Signature>
    <Description>Cycles your target through the nearest enemy units.
This function can only be called once per hardware event.</Description>
    <ArgumentList Name="backward">
      <Description>Reverses the direction of the cycling if true (e.g. TAB vs. SHIFT-TAB) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetNearestEnemyPlayer" Priority="0" ImageType="Method">
    <Signature>TargetNearestEnemyPlayer(backward)</Signature>
    <Description>Cycles targets through nearby enemy player units</Description>
    <ArgumentList Name="backward">
      <Description>Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetNearestFriend" Priority="0" ImageType="Method">
    <Signature>TargetNearestFriend(backward)</Signature>
    <Description>Cycles targets through nearby friendly units</Description>
    <ArgumentList Name="backward">
      <Description>Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetNearestFriendPlayer" Priority="0" ImageType="Method">
    <Signature>TargetNearestFriendPlayer(backward)</Signature>
    <Description>Cycles targets through nearby friendly player units</Description>
    <ArgumentList Name="backward">
      <Description>Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetNearestPartyMember" Priority="0" ImageType="Method">
    <Signature>TargetNearestPartyMember(backward)</Signature>
    <Description>Cycles targets through nearby party members</Description>
    <ArgumentList Name="backward">
      <Description>Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetNearestRaidMember" Priority="0" ImageType="Method">
    <Signature>TargetNearestRaidMember(backward)</Signature>
    <Description>Cycles targets through nearby raid members</Description>
    <ArgumentList Name="backward">
      <Description>Reverses direction of target cycling if true (as with the default TAB vs. SHIFT-TAB bindings) (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetTotem" Priority="0" ImageType="Method">
    <Signature>TargetTotem(slot)</Signature>
    <Description>Targets one of the player's totems (or a Death Knight's ghoul). Totem functions are also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).</Description>
    <ArgumentList Name="slot">
      <Description>Which totem to target (number)
1 - Fire (or Death Knight's ghoul)
2 - Earth
3 - Water
4 - Air</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TargetUnit" Priority="0" ImageType="Method">
    <Signature>TargetUnit("unit") or TargetUnit("name" [, exactMatch])</Signature>
    <Description>Targets a unit. Passing nil is equivalent to calling ClearTarget()).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to target (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to target (string) </Description>
    </ArgumentList>
    <ArgumentList Name="exactMatch">
      <Description>True to check only units whose name exactly matches the name given; false to allow partial matches (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TaxiGetDestX" Priority="0" ImageType="Method">
    <Signature>dX = TaxiGetDestX(source, dest)</Signature>
    <Description>Returns the horizontal coordinate of a taxi flight's destination node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.
Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="source">
      <Description>Index of the source flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="dest">
      <Description>Index of the destination flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="dX">
      <Description>X coordinate of the destination taxi node (as a proportion of the taxi map's width; 0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiGetDestY" Priority="0" ImageType="Method">
    <Signature>dY = TaxiGetDestY(source, dest)</Signature>
    <Description>Returns the vertical coordinate of a taxi flight's destination node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.
Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="source">
      <Description>Index of the source flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="dest">
      <Description>Index of the destination flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="dY">
      <Description>Y coordinate of the destination taxi node (as a proportion of the taxi map's height; 0 = bottom, 1 = top) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiGetSrcX" Priority="0" ImageType="Method">
    <Signature>sX = TaxiGetSrcX(source, dest)</Signature>
    <Description>Returns the horizontal coordinate of a taxi flight's source node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.
Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="source">
      <Description>Index of the source flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="dest">
      <Description>Index of the destination flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="sX">
      <Description>X coordinate of the source taxi node (as a proportion of the taxi map's width; 0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiGetSrcY" Priority="0" ImageType="Method">
    <Signature>sY = TaxiGetSrcY(source, dest)</Signature>
    <Description>Returns the vertical coordinate of a taxi flight's source node. Used in the default UI to draw lines between nodes; TaxiNodeSetCurrent() should be called first so the client can compute routes.
Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="source">
      <Description>Index of the source flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="dest">
      <Description>Index of the destination flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="sY">
      <Description>Y coordinate of the source taxi node (as a proportion of the taxi map's height; 0 = bottom, 1 = top) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiNodeCost" Priority="0" ImageType="Method">
    <Signature>cost = TaxiNodeCost(index)</Signature>
    <Description>Returns the cost to fly to a given taxi node. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="cost">
      <Description>Price of a flight to the given node (in copper) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiNodeGetType" Priority="0" ImageType="Method">
    <Signature>type = TaxiNodeGetType(index)</Signature>
    <Description>Returns the type of a flight pont. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Type of the flight point (string)
CURRENT - The player's current location
DISTANT - Unreachable from the current location
NONE - Not currently in use
REACHABLE - Reachable from the current location (directly or through other nodes)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiNodeName" Priority="0" ImageType="Method">
    <Signature>name = TaxiNodeName(index)</Signature>
    <Description>Returns the name of a flight point. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the taxi node (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiNodePosition" Priority="0" ImageType="Method">
    <Signature>x, y = TaxiNodePosition(index)</Signature>
    <Description>Returns the position of a flight point on the taxi map. Only returns valid data while interacting with a flight master (i.e. between the TAXIMAP_OPENED and TAXIMAP_CLOSED events).</Description>
    <ArgumentList Name="index">
      <Description>Index of a flight point (between 1 and NumTaxiNodes()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="x">
      <Description>Horizontal coordinate of the taxi node (as a proportion of the taxi map's width; 0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="y">
      <Description>Vertical coordinate of the taxi node (as a proportion of the taxi map's height; 0 = bottom, 1 = top) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="TaxiNodeSetCurrent" Priority="0" ImageType="Method">
    <Signature>TaxiNodeSetCurrent(slot)</Signature>
    <Description>Sets the "current" flight path node. Used in the default UI when mousing over a node; tells the client to compute the route paths involving the node (see TaxiGetSrcX() et al).</Description>
    <ArgumentList Name="slot">
      <Description>The internal index of a flight path node (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TeleportToDebugObject" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ToggleAnimKitDisplay" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ToggleAutoRun" Priority="0" ImageType="Method">
    <Signature>ToggleAutoRun()</Signature>
    <Description>Starts or stops the player character automatically moving forward</Description>
  </WowApi>
  <WowApi Name="ToggleCollision" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ToggleCollisionDisplay" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ToggleGlyphFilter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TogglePVP" Priority="0" ImageType="Method">
    <Signature>TogglePVP()</Signature>
    <Description>Switches the player's desired PvP status. If PvP is currently disabled for the player, it becomes enabled immediately. If PvP is enabled, it will become disabled after five minutes of no PvP activity.</Description>
  </WowApi>
  <WowApi Name="TogglePerformanceDisplay" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TogglePerformancePause" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TogglePerformanceValues" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TogglePetAutocast" Priority="0" ImageType="Method">
    <Signature>TogglePetAutocast(index)</Signature>
    <Description>Turns autocast on or off for a pet action. Turns autocast on if not autocasting and vice versa.</Description>
    <ArgumentList Name="index">
      <Description>Index of a pet action button (between 1 and NUM_PET_ACTION_SLOTS) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TogglePlayerBounds" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TogglePortals" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ToggleRun" Priority="0" ImageType="Method">
    <Signature>ToggleRun()</Signature>
    <Description>Switches the character's ground movement mode between running and walking. If running, switches to walking, and vice versa. Has no effect on swimming or flying speed.</Description>
  </WowApi>
  <WowApi Name="ToggleSheath" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ToggleSpellAutocast" Priority="0" ImageType="Method">
    <Signature>ToggleSpellAutocast(index, "bookType") or ToggleSpellAutocast("name")</Signature>
    <Description>Enables or disables automatic casting of a spell. Generally only pet spells can be autocast.</Description>
    <ArgumentList Name="index">
      <Description>Index of a spell in the spellbook (number, spellbookID) </Description>
    </ArgumentList>
    <ArgumentList Name="bookType">
      <Description>Type of spellbook (string)
pet - The pet's spellbook
spell - The player's spellbook</Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a spell (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ToggleTris" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TradeSkillOnlyShowMakeable" Priority="0" ImageType="Method">
    <Signature>TradeSkillOnlyShowMakeable(filter)</Signature>
    <Description>Filters the trade skill listing by whether the player currently has enough reagents for each recipe</Description>
    <ArgumentList Name="filter">
      <Description>True to filter the recipe listing to show only recipes for which the player currently has enough reagents; false to show all recipes (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TradeSkillOnlyShowSkillUps" Priority="0" ImageType="Method">
    <Signature>TradeSkillOnlyShowSkillUps(filter)</Signature>
    <Description>Filters the trade skill listing by whether the player can gain skill ranks from each recipe. The default UI does not provide controls for this filter, but it can nonetheless be used to alter the contents of the trade skill recipe listing.</Description>
    <ArgumentList Name="filter">
      <Description>True to filter the recipe listing to show only recipes which the player can gain skill ranks by performing; false to show all recipes (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TriggerTutorial" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="TurnInGuildCharter" Priority="0" ImageType="Method">
    <Signature>TurnInGuildCharter()</Signature>
    <Description>Turns in a completed guild charter. Usable if the player is interacting with a guild registrar (i.e. between the GUILD_REGISTRAR_SHOW and GUILD_REGISTRAR_CLOSED events).</Description>
  </WowApi>
  <WowApi Name="TurnLeftStart" Priority="0" ImageType="Method">
    <Signature>TurnLeftStart()</Signature>
    <Description>Begins turning the player character to the left. "Left" here is relative to the player's facing; i.e. if looking down at the character from above, he or she turns counter-clockwise.
Used by the TURNLEFT binding.</Description>
  </WowApi>
  <WowApi Name="TurnLeftStop" Priority="0" ImageType="Method">
    <Signature>TurnLeftStop()</Signature>
    <Description>Ends movement initiated by TurnLeftStart</Description>
  </WowApi>
  <WowApi Name="TurnOrActionStart" Priority="0" ImageType="Method">
    <Signature>TurnOrActionStart()</Signature>
    <Description>Begins character steering or interaction (equivalent to right-clicking in the 3-D world). After calling this function (i.e. while the right mouse button is held), cursor movement rotates (or steers) the player character, altering yaw (facing) and/or pitch (vertical movement angle) as well as camera position. Final results vary by context and are determined when calling TurnOrActionStop() (i.e. releasing the right mouse button).
Used by the TURNORACTION binding (not customizable in the default UI), which is bound to the right mouse button by default.</Description>
  </WowApi>
  <WowApi Name="TurnOrActionStop" Priority="0" ImageType="Method">
    <Signature>TurnOrActionStop()</Signature>
    <Description>Ends action initiated by TurnOrActionStart. After calling this function (i.e. releasing the right mouse button), character steering stops and normal cursor movement resumes. If the cursor has not moved significantly since calling TurnOrActionStart() (i.e. pressing the right mouse button), results vary by context:
if the cursor is over a nearby unit, interacts with (or attacks) that unit, making it the player's target.
if the cursor is over a nearby interactable world object (e.g. mailbox, treasure chest, or quest object), interacts with (or uses) that object.
if the cursor is over a faraway unit or world object and the "Click-to-Move" option is enabled (i.e. the "autointeract" CVar is "1"), attempts to move the player character to the unit/object and interact with it once nearby.
if the cursor is over a faraway world object and the "Click-to-Move" option is disabled, fires a UI_ERROR_MESSAGE event indicating the player is too far away to interact with the object.
otherwise, does nothing.
Used by the TURNORACTION binding (not customizable in the default UI), which is bound to the right mouse button by default.</Description>
  </WowApi>
  <WowApi Name="TurnRightStart" Priority="0" ImageType="Method">
    <Signature>TurnRightStart()</Signature>
    <Description>Begins turning the player character to the right. "Right" here is relative to the player's facing; i.e. if looking down at the character from above, he or she turns clockwise.
Used by the TURNRIGHT binding.</Description>
  </WowApi>
  <WowApi Name="TurnRightStop" Priority="0" ImageType="Method">
    <Signature>TurnRightStop()</Signature>
    <Description>Ends movement initiated by TurnRightStart</Description>
  </WowApi>
  <WowApi Name="UninviteUnit" Priority="0" ImageType="Method">
    <Signature>UninviteUnit("name", "reason")</Signature>
    <Description>Removes a character from the player's party or raid. Only works if the player is the party leader, raid leader, or raid assistant.
Also used by the Looking For Group tool to vote kick players. This is what the "reason" argument is used for.</Description>
    <ArgumentList Name="name">
      <Description>Name of a character to uninvite (string) </Description>
    </ArgumentList>
    <ArgumentList Name="reason">
      <Description>Reason for the action, optional and may be left as a nil value (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UnitAffectingCombat" Priority="0" ImageType="Method">
    <Signature>inCombat = UnitAffectingCombat("unit")</Signature>
    <Description>Returns whether a unit is currently in combat</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inCombat">
      <Description>1 if the unit is currently involved in combat; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitAlternatePowerCounterInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitAlternatePowerInfo" Priority="0" ImageType="Method">
    <Signature>barType, minPower, startInset, endInset, smooth, hideFromOthers, showOnRaid, opaqueSpark, opaqueFlash, powerName, powerTooltip = UnitAlternatePowerInfo("unit") or UnitAlternatePowerInfo("name")</Signature>
    <Description>Returns information about a unit's alternate power display</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="barType">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="minPower">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="startInset">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="endInset">
      <Description>(number) </Description>
    </ReturnList>
    <ReturnList Name="smooth">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="hideFromOthers">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="showOnRaid">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="opaqueSpark">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="opaqueFlash">
      <Description>(boolean) </Description>
    </ReturnList>
    <ReturnList Name="powerName">
      <Description>(string) </Description>
    </ReturnList>
    <ReturnList Name="powerTooltip">
      <Description>(string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitAlternatePowerTextureInfo" Priority="0" ImageType="Method">
    <Signature>texture, r, g, b, a = UnitAlternatePowerTextureInfo("unit", textureIndex)</Signature>
    <Description>Retrieves textures and colors for the parts of the alternate power indicator. Retrieves information on how to render the alternate power indicator. Note that the color can be 1,1,1,1 even if the bar appears to be colored because the color is baked into the texture.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="textureIndex">
      <Description>(0-5) 1 for the background texture or 2 for the status bar texture (number) </Description>
    </ArgumentList>
    <ReturnList Name="texture">
      <Description>file name for the requested texture, pass to SetTexture (string) </Description>
    </ReturnList>
    <ReturnList Name="r">
      <Description>red color component, pass to SetVertexColor (number) </Description>
    </ReturnList>
    <ReturnList Name="g">
      <Description>green color component, pass to SetVertexColor (number) </Description>
    </ReturnList>
    <ReturnList Name="b">
      <Description>blue color component, pass to SetVertexColor (number) </Description>
    </ReturnList>
    <ReturnList Name="a">
      <Description>alpha color component, pass to SetAlpha (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitArmor" Priority="0" ImageType="Method">
    <Signature>base, effectiveArmor, armor, posBuff, negBuff = UnitArmor("unit")</Signature>
    <Description>Returns the player's or pet's armor value</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="base">
      <Description>The unit's base armor value (number) </Description>
    </ReturnList>
    <ReturnList Name="effectiveArmor">
      <Description>The unit's effective armor value (number) </Description>
    </ReturnList>
    <ReturnList Name="armor">
      <Description>The unit's current armor value (number) </Description>
    </ReturnList>
    <ReturnList Name="posBuff">
      <Description>Positive modifiers to armor value (number) </Description>
    </ReturnList>
    <ReturnList Name="negBuff">
      <Description>Negative modifiers to armor value (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitAttackBothHands" Priority="0" ImageType="Method">
    <Signature>mainHandAttackBase, mainHandAttackMod, offHandHandAttackBase, offHandAttackMod = UnitAttackBothHands("unit")</Signature>
    <Description>Returns information about the player's or pet's weapon skill</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="mainHandAttackBase">
      <Description>The unit's base weapon skill for the main hand weapon (number) </Description>
    </ReturnList>
    <ReturnList Name="mainHandAttackMod">
      <Description>Temporary modifiers to main hand weapon skill (number) </Description>
    </ReturnList>
    <ReturnList Name="offHandHandAttackBase">
      <Description>The unit's base weapon skill for the off hand weapon (number) </Description>
    </ReturnList>
    <ReturnList Name="offHandAttackMod">
      <Description>Temporary modifiers to off hand weapon skill (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitAttackPower" Priority="0" ImageType="Method">
    <Signature>base, posBuff, negBuff = UnitAttackPower("unit")</Signature>
    <Description>Returns the player's or pet's melee attack power</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UnitAttackSpeed" Priority="0" ImageType="Method">
    <Signature>speed, offhandSpeed = UnitAttackSpeed("unit")</Signature>
    <Description>Returns information about the unit's melee attack speed</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="speed">
      <Description>Current speed of the unit's main hand attack (number of seconds per attack) (number) </Description>
    </ReturnList>
    <ReturnList Name="offhandSpeed">
      <Description>Current speed of the unit's off hand attack (number of seconds per attack) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitAura" Priority="0" ImageType="Method">
    <Signature>name, rank, icon, count, dispelType, duration, expires, caster, isStealable, shouldConsolidate, spellID, canApplyAura, isBossDebuff, value1, value2, value3 = UnitAura("unit", index [, "filter"]) or UnitAura("unit", "name" [, "rank" [, "filter"]])</Signature>
    <Description>Returns information about buffs/debuffs on a unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an aura to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of an aura to query (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string) </Description>
    </ArgumentList>
    <ArgumentList Name="filter">
      <Description>A list of filters to use separated by the pipe '|' character; e.g. "RAID|PLAYER" will query group buffs cast by the player. Defaults to 'HELPFUL' (string)
CANCELABLE - Show auras that can be cancelled
HARMFUL - Show debuffs only
HELPFUL - Show buffs only (default)
NOT_CANCELABLE - Show auras that cannot be cancelled
PLAYER - Show auras the player has cast
RAID - When used with a HELPFUL filter it will show auras the player can cast on party/raid members (as opposed to self buffs). If used with a HARMFUL filter it will return debuffs the player can cure</Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the aura (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Secondary text for the aura (often a rank; e.g. "Rank 7") (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the aura (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>The number of times the aura has been applied (number) </Description>
    </ReturnList>
    <ReturnList Name="dispelType">
      <Description>Type of aura (relevant for dispelling and certain other mechanics); nil if not one of the following values: (string)
(Empty string returned for Enrage dispel type)
Curse
Disease
Magic
Poison</Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>Total duration of the aura (in seconds) (number) </Description>
    </ReturnList>
    <ReturnList Name="expires">
      <Description>Time at which the aura will expire; can be compared to GetTime() to determine time remaining (number) </Description>
    </ReturnList>
    <ReturnList Name="caster">
      <Description>Unit which applied the aura. If the aura was applied by a unit that does not have a token but is controlled by one that does (e.g. a totem or another player's vehicle), returns the controlling unit. Returns nil if the casting unit (or its controller) has no unitID. (string, unitID) </Description>
    </ReturnList>
    <ReturnList Name="isStealable">
      <Description>1 if the aura can be transferred to a player using the Spellsteal spell; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="shouldConsolidate">
      <Description>1 if the aura is eligible for the 'consolidated' aura display in the default UI. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="spellID">
      <Description>spellID of the aura (number) </Description>
    </ReturnList>
    <ReturnList Name="canApplyAura">
      <Description>1 if the player can apply the aura (not necessarily if the player did apply the aura, just if the player can apply the aura). (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isBossDebuff">
      <Description>1 if the aura was cast by a boss. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="value1">
      <Description>Value of variable effect 1 of the aura. (HoTs, resource-capturing trinkets, etc.) (number) </Description>
    </ReturnList>
    <ReturnList Name="value2">
      <Description>Value of variable effect 2 of the aura. (HoTs, resource-capturing trinkets, etc.) (number) </Description>
    </ReturnList>
    <ReturnList Name="value3">
      <Description>Value of variable effect 3 of the aura. (HoTs, resource-capturing trinkets, etc.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitBattlePetLevel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitBattlePetSpeciesID" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitBattlePetType" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitBuff" Priority="0" ImageType="Method">
    <Signature>name, rank, icon, count, dispelType, duration, expires, caster, isStealable, shouldConsolidate, spellID, canApplyAura, isBossDebuff, value1, value2, value3 = UnitBuff("unit", index [, "filter"]) or UnitBuff("unit", "name" [, "rank" [, "filter"]])</Signature>
    <Description>Returns information about a buff on a unit. This function is an alias for UnitAura() with a built-in HELPFUL filter (which cannot be removed or negated with the HARMFUL filter).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an aura to query (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of an aura to query (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>Secondary text of an aura to query (often a rank; e.g. "Rank 7") (string) </Description>
    </ArgumentList>
    <ArgumentList Name="filter">
      <Description>A list of filters to use separated by the pipe '|' character; e.g. "RAID|PLAYER" will query group buffs cast by the player (string)
CANCELABLE - Show auras that can be cancelled
NOT_CANCELABLE - Show auras that cannot be cancelled
PLAYER - Show auras the player has cast
RAID - Show auras the player can cast on party/raid members (as opposed to self buffs)</Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the aura (string) </Description>
    </ReturnList>
    <ReturnList Name="rank">
      <Description>Secondary text for the aura (often a rank; e.g. "Rank 7") (string) </Description>
    </ReturnList>
    <ReturnList Name="icon">
      <Description>Path to an icon texture for the aura (string) </Description>
    </ReturnList>
    <ReturnList Name="count">
      <Description>The number of times the aura has been applied (number) </Description>
    </ReturnList>
    <ReturnList Name="dispelType">
      <Description>Type of aura (relevant for dispelling and certain other mechanics); nil if not one of the following values: (string)
Curse
Disease
Magic
Poison</Description>
    </ReturnList>
    <ReturnList Name="duration">
      <Description>Total duration of the aura (in seconds). Zero if the unit is phased or out of range. (number) </Description>
    </ReturnList>
    <ReturnList Name="expires">
      <Description>Time at which the aura will expire; can be compared to &lt;a href='/docs/api/GetTime'&gt;GetTime()&lt;/a&gt; to determine time remaining. Zero if the unit is phased or out of range. (number) </Description>
    </ReturnList>
    <ReturnList Name="caster">
      <Description>Unit which applied the aura. If the aura was applied by a unit that does not have a token but is controlled by one that does (e.g. a totem or another player's vehicle), returns the controlling unit. Returns nil if the casting unit (or its controller) has no unitID. (string, unitID) </Description>
    </ReturnList>
    <ReturnList Name="isStealable">
      <Description>1 if the aura can be transferred to a player using the Spellsteal spell; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="shouldConsolidate">
      <Description>1 if the aura is eligible for the 'consolidated' aura display in the default UI. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="spellID">
      <Description>spellID of the aura (number) </Description>
    </ReturnList>
    <ReturnList Name="canApplyAura">
      <Description>1 if the player can apply the aura (not necessarily if the player did apply the aura, just if the player can apply the aura). (1nil) </Description>
    </ReturnList>
    <ReturnList Name="isBossDebuff">
      <Description>1 if the aura was cast by a boss. (1nil) </Description>
    </ReturnList>
    <ReturnList Name="value1">
      <Description>Value of variable effect 1 of the aura. (HoTs, resource-capturing trinkets, etc.) (number) </Description>
    </ReturnList>
    <ReturnList Name="value2">
      <Description>Value of variable effect 2 of the aura. (HoTs, resource-capturing trinkets, etc.) (number) </Description>
    </ReturnList>
    <ReturnList Name="value3">
      <Description>Value of variable effect 3 of the aura. (HoTs, resource-capturing trinkets, etc.) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitCanAssist" Priority="0" ImageType="Method">
    <Signature>canAssist = UnitCanAssist("unit", "unit")</Signature>
    <Description>Returns whether one unit can assist another</Description>
    <ArgumentList Name="unit">
      <Description>A unit (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Another unit (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="canAssist">
      <Description>1 if the first unit can assist the second; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitCanAttack" Priority="0" ImageType="Method">
    <Signature>canAttack = UnitCanAttack("unit", "unit")</Signature>
    <Description>Returns whether one unit can attack another</Description>
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="UnitCanCooperate" Priority="0" ImageType="Method">
    <Signature>canCooperate = UnitCanCooperate("unit", "unit")</Signature>
    <Description>Returns whether two units can cooperate. Two units are considered to be able to cooperate with each other if they are of the same faction and are both players.</Description>
    <ArgumentList Name="unit">
      <Description>A unit (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Another unit (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="canCooperate">
      <Description>1 if the two units can cooperate with each other; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitCanPetBattle" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitCastingInfo" Priority="0" ImageType="Method">
    <Signature>name, subText, text, texture, startTime, endTime, isTradeSkill, castID, notInterruptible = UnitCastingInfo("unit")</Signature>
    <Description>Returns information about the spell a unit is currently casting</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the spell being cast (string) </Description>
    </ReturnList>
    <ReturnList Name="subText">
      <Description>Secondary text associated with the spell (e.g."Rank 5", "Racial", etc.) (string) </Description>
    </ReturnList>
    <ReturnList Name="text">
      <Description>Text to be displayed on a casting bar (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="startTime">
      <Description>Time at which the cast was started (in milliseconds; can be compared to GetTime() * 1000) (number) </Description>
    </ReturnList>
    <ReturnList Name="endTime">
      <Description>Time at which the cast will finish (in milliseconds; can be compared to GetTime() * 1000) (number) </Description>
    </ReturnList>
    <ReturnList Name="isTradeSkill">
      <Description>1 if the spell being cast is a trade skill recipe; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="castID">
      <Description>Reference number for this spell; matches the 4th argument of UNIT_SPELLCAST_* events for the same spellcast (number) </Description>
    </ReturnList>
    <ReturnList Name="notInterruptible">
      <Description>1 if the spell can be interrupted; otherwise nil. See the UNIT_SPELLCAST_NOT_INTERRUPTIBLE and UNIT_SPELLCAST_INTERRUPTIBLE events for changes to this status. (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitChannelInfo" Priority="0" ImageType="Method">
    <Signature>name, subText, text, texture, startTime, endTime, isTradeSkill, notInterruptible = UnitChannelInfo("unit")</Signature>
    <Description>Returns information about the spell a unit is currently channeling</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the spell being cast (string) </Description>
    </ReturnList>
    <ReturnList Name="subText">
      <Description>Secondary text associated with the spell (e.g."Rank 5", "Racial", etc.) (string) </Description>
    </ReturnList>
    <ReturnList Name="text">
      <Description>Text to be displayed on a casting bar (string) </Description>
    </ReturnList>
    <ReturnList Name="texture">
      <Description>Path to an icon texture for the spell (string) </Description>
    </ReturnList>
    <ReturnList Name="startTime">
      <Description>Time at which the cast was started (in milliseconds; can be compared to GetTime() * 1000) (number) </Description>
    </ReturnList>
    <ReturnList Name="endTime">
      <Description>Time at which the cast will finish (in milliseconds; can be compared to GetTime() * 1000) (number) </Description>
    </ReturnList>
    <ReturnList Name="isTradeSkill">
      <Description>1 if the spell being cast is a trade skill recipe; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="notInterruptible">
      <Description>Indicates that the spell cannot be interrupted, UNIT_SPELLCAST_NOT_INTERRUPTIBLE and UNIT_SPELLCAST_INTERRUPTIBLE are fired to indicate changes in the interruptible status. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitClass" Priority="0" ImageType="Method">
    <Signature>class, classFileName = UnitClass("unit") or UnitClass("name")</Signature>
    <Description>Returns a unit's class. The second return (classFileName) can be used for locale-independent verification of a unit's class, or to look up class-related data in various global tables:
RAID_CLASS_COLORS provides a standard color for each class (as seen in the default who, guild, calendar, and raid UIs)
CLASS_ICON_TCOORDS provides coordinates to locate each class' icon within the "Interface\Glues\CharacterCreate\UI-CharacterCreate-Classes" texture
For non-player units, the first return (class) will be the unit's name; to always get a localized class name regardless of unit type, use UnitClassBase instead.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="class">
      <Description>The localized name of the unit's class, or the unit's name if the unit is an NPC (string) </Description>
    </ReturnList>
    <ReturnList Name="classFileName">
      <Description>A non-localized token representing the class (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitClassBase" Priority="0" ImageType="Method">
    <Signature>class, classFileName = UnitClassBase("unit") or UnitClassBase("name")</Signature>
    <Description>Returns a unit's class. The second return (classFileName) can be used for locale-independent verification of a unit's class, or to look up class-related data in various global tables:
RAID_CLASS_COLORS provides a standard color for each class (as seen in the default who, guild, calendar, and raid UIs)
CLASS_ICON_TCOORDS provides coordinates to locate each class' icon within the "Interface\Glues\CharacterCreate\UI-CharacterCreate-Classes" texture
Unlike UnitClass, this function returns the same values for NPCs as for players.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="class">
      <Description>The localized name of the unit's class (string) </Description>
    </ReturnList>
    <ReturnList Name="classFileName">
      <Description>A non-localized token representing the class (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitClassification" Priority="0" ImageType="Method">
    <Signature>classification = UnitClassification("unit")</Signature>
    <Description>Returns a unit's classification</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="classification">
      <Description>Classification of the unit (string)
elite - Elite
minus - Minion of another NPC; does not give experience or reputation.
normal - Normal
rare - Rare
rareelite - Rare-Elite
worldboss - World Boss</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitControllingVehicle" Priority="0" ImageType="Method">
    <Signature>isControlling = UnitControllingVehicle("unit") or UnitControllingVehicle("name")</Signature>
    <Description>Returns whether a unit is controlling a vehicle</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="isControlling">
      <Description>True if the unit is controlling a vehicle; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitCreatureFamily" Priority="0" ImageType="Method">
    <Signature>family = UnitCreatureFamily("unit")</Signature>
    <Description>Returns the creature family of the unit. Applies only to beasts of the kinds that can be taken as Hunter pets (e.g. cats, worms, and ravagers but not zhevras, talbuks and pterrordax), demons of the types that can be summoned by Warlocks (e.g. imps and felguards, but not demons that require enslaving such as infernals and doomguards or world demons such as pit lords and armored voidwalkers) and Death Knight's pets (ghouls).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="family">
      <Description>Localized name of the subtype of creature (e.g. Bear, Devilsaur, Voidwalker, Succubus), or nil if not applicable (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitCreatureType" Priority="0" ImageType="Method">
    <Signature>type = UnitCreatureType("unit")</Signature>
    <Description>Returns the creature type of a unit. Note that some creatures have no type (e.g. slimes).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="type">
      <Description>Localized name of the type of creature (e.g. Beast, Humanoid, Undead), or nil if not applicable (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitDamage" Priority="0" ImageType="Method">
    <Signature>minDamage, maxDamage, minOffHandDamage, maxOffHandDamage, physicalBonusPos, physicalBonusNeg, percent = UnitDamage("unit")</Signature>
    <Description>Returns information about the player's or pet's melee attack damage</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="minDamage">
      <Description>The unit's minimum melee damage (number) </Description>
    </ReturnList>
    <ReturnList Name="maxDamage">
      <Description>The unit's maximum melee damage (number) </Description>
    </ReturnList>
    <ReturnList Name="minOffHandDamage">
      <Description>The unit's minimum offhand melee damage (number) </Description>
    </ReturnList>
    <ReturnList Name="maxOffHandDamage">
      <Description>The unit's maximum offhand melee damage (number) </Description>
    </ReturnList>
    <ReturnList Name="physicalBonusPos">
      <Description>Positive physical bonus (should be &gt;= 0) (number) </Description>
    </ReturnList>
    <ReturnList Name="physicalBonusNeg">
      <Description>Negative physical bonus (should be &lt;= 0) (number) </Description>
    </ReturnList>
    <ReturnList Name="percent">
      <Description>Factor by which damage output is multiplied due to buffs/debuffs (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitDebuff" Priority="0" ImageType="Method">
    <Signature>name, rank, icon, count, dispelType, duration, expires, caster, isStealable, shouldConsolidate, spellID, canApplyAura, isBossDebuff, value1, value2, value3 = UnitDebuff("unit", index [, "filter"]) or UnitDebuff("unit", "name" [, "rank" [, "filter"]])</Signature>
    <Description>Returns information about a debuff on a unit. This function is an alias for UnitAura() with a built-in HARMFUL filter (which cannot be removed or negated with the HELPFUL filter).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="index">
      <Description>Index of an aura to query (number) </Description>
    </ArgumentList>
    <ArgumentList />
    <ArgumentList />
    <ArgumentList />
  </WowApi>
  <WowApi Name="UnitDefense" Priority="0" ImageType="Method">
    <Signature>base, modifier = UnitDefense("unit")</Signature>
    <Description>Returns the player's or pet's Defense skill</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="base">
      <Description>The unit's base defense skill (number) </Description>
    </ReturnList>
    <ReturnList Name="modifier">
      <Description>Temporary modifiers to defense skill (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitDetailedThreatSituation" Priority="0" ImageType="Method">
    <Signature>isTanking, status, scaledPercent, rawPercent, threatValue = UnitDetailedThreatSituation(unit, mobUnit) or UnitDetailedThreatSituation("name", mobUnit)</Signature>
    <Description>Returns detailed information about the threat status of one unit against another.
The different values returned by this function reflect the complexity of NPC threat management:
Raw threat roughly equates to the amount of damage a unit has caused to the NPC plus the amount of healing the unit has performed in the NPC's presence. (Each quantity that goes into this sum may be modified, however; such as by a paladin's Righteous Fury self-buff, a priest's Silent Resolve talent, or a player whose cloak is enchanted with Subtlety.)
Generally, whichever unit has the highest raw threat against an NPC becomes its primary target, and raw threat percentage simplifies this comparison.
However, most NPCs are designed to maintain some degree of target focus -- so that they don't rapidly switch targets if, for example, a unit other than the primary target suddenly reaches 101% raw threat. The amount by which a unit must surpass the primary target's threat to become the new primary target varies by distance from the NPC.
Thus, a scaled percentage value is given to provide clarity. The rawPercent value returned from this function can be greater than 100 (indicating that unit has greater threat against mobUnit than mobUnit's primary target, and is thus in danger of becoming the primary target), but the scaledPercent value will always be 100 or lower.
Threat information for a pair of units is only returned if the player has threat against the NPC unit in question. (For example, no threat data is provided if the player's pet is attacking an NPC but the player himself has taken no action, even though the pet has threat against the NPC.)</Description>
    <ArgumentList Name="unit">
      <Description>The unit whose threat situation is being requested (unitid) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query. Only valid for the player, pet, and party/raid members. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="mobUnit">
      <Description>An NPC unit the first unit may have threat against (unitid) </Description>
    </ArgumentList>
    <ReturnList Name="isTanking">
      <Description>1 if unit is mobUnit's primary target, nil otherwise (1nil) </Description>
    </ReturnList>
    <ReturnList Name="status">
      <Description>A threat status category (number)
0 - Unit has less than 100% raw threat (default UI shows no indicator)
1 - Unit has 100% or higher raw threat but isn't mobUnit's primary target (default UI shows yellow indicator)
2 - Unit is mobUnit's primary target, and another unit has 100% or higher raw threat (default UI shows orange indicator)
3 - Unit is mobUnit's primary target, and no other unit has 100% or higher raw threat (default UI shows red indicator)</Description>
    </ReturnList>
    <ReturnList Name="scaledPercent">
      <Description>A percentage value representing unit's threat against mobUnit, scaled such that a value of 100% represents unit becoming mobUnit's primary target (number) </Description>
    </ReturnList>
    <ReturnList Name="rawPercent">
      <Description>A percentage value representing unit's threat against mobUnit relative to the the threat of mobUnit's primary target (number) </Description>
    </ReturnList>
    <ReturnList Name="threatValue">
      <Description>The raw value of unit's threat against mobUnit (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitExists" Priority="0" ImageType="Method">
    <Signature>exists = UnitExists("unit") or UnitExists("name")</Signature>
    <Description>Returns whether a unit exists. A unit "exists" if it can be referenced by the player; e.g. party1 exists if the player is in a party with at least one other member (regardless of whether that member is nearby), target exists if the player has a target, npc exists if the player is currently interacting with an NPC, etc.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, npc, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="exists">
      <Description>1 if the unit exists, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitFactionGroup" Priority="0" ImageType="Method">
    <Signature>factionGroup, factionName = UnitFactionGroup("unit") or UnitFactionGroup("name")</Signature>
    <Description>Returns a unit's primary faction allegiance</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="factionGroup">
      <Description>Non-localized (English) faction name of the faction ('Horde', 'Alliance', or 'Neutral') (string) </Description>
    </ReturnList>
    <ReturnList Name="factionName">
      <Description>Localized name of the faction (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitGUID" Priority="0" ImageType="Method">
    <Signature>guid = UnitGUID("unit")</Signature>
    <Description>Returns a unit's globally unique identifier</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="guid">
      <Description>The unit's GUID (string, guid) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitGetAvailableRoles" Priority="0" ImageType="Method">
    <Signature>canBeTank, canBeHealer, canBeDPS = UnitGetAvailableRoles("unit")</Signature>
    <Description>Get what roles a unit can play in the group or raid. See UnitSetRole("unit", "role")</Description>
    <ArgumentList Name="unit">
      <Description>Unit to modify (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="canBeTank">
      <Description>Returns true if the unit can play a TANK , false otherwise. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="canBeHealer">
      <Description>Returns true if the unit can play a HEALER, false otherwise. (boolean) </Description>
    </ReturnList>
    <ReturnList Name="canBeDPS">
      <Description>Returns true if the unit can play a DAMAGER, false otherwise. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitGetGuildLevel" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitGetGuildXP" Priority="0" ImageType="Method">
    <Signature>currentXP, nextLevelXP, dailyXP, maxDailyXP, weeklyXP, totalXP, isUncapped = UnitGetGuildXP("unit")</Signature>
    <Description>Returns information about a unit's guild experience</Description>
    <ArgumentList Name="unit">
      <Description>Unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="currentXP">
      <Description>returns unit's guild's total xp gained for that level (number) </Description>
    </ReturnList>
    <ReturnList Name="nextLevelXP">
      <Description>returns remaining xp needed until unit's guild levels (number) </Description>
    </ReturnList>
    <ReturnList Name="dailyXP">
      <Description>returns unit's guild's current xp gained for the day (number) </Description>
    </ReturnList>
    <ReturnList Name="maxDailyXP">
      <Description>returns maximum xp that the unit's guild can gain for the day (number) </Description>
    </ReturnList>
    <ReturnList Name="weeklyXP">
      <Description>returns the unit's guild experience for this week (number) </Description>
    </ReturnList>
    <ReturnList Name="totalXP">
      <Description>returns the unit's total guild experience (number) </Description>
    </ReturnList>
    <ReturnList Name="isUncapped">
      <Description>returns whether guild experience gain is capped for the unit's guild (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitGetIncomingHeals" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitGroupRolesAssigned" Priority="0" ImageType="Method">
    <Signature>role = UnitGroupRolesAssigned("unit")</Signature>
    <Description>Returns information about a unit's role in a group</Description>
    <ArgumentList Name="unit">
      <Description>Unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="role">
      <Description>Returns the unit's role (string)
DAMAGER
HEALER
NONE
TANK</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitHPPerStamina" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitHasIncomingResurrection" Priority="0" ImageType="Method">
    <Signature>isBeingRessed = UnitHasIncomingResurrection("unit")</Signature>
    <Description>Check if a unit is being resurrected. You can pass either a unitID ("player", "party1", "target") or a unit name ("Cladhaire", "Vanhoeffen").</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isBeingRessed">
      <Description>true if the unit is being resurrected; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitHasLFGDeserter" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitHasLFGRandomCooldown" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitHasRelicSlot" Priority="0" ImageType="Method">
    <Signature>hasRelic = UnitHasRelicSlot("unit")</Signature>
    <Description>Returns whether a unit has a relic slot instead of a ranged weapon slot</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="hasRelic">
      <Description>1 if the unit has a relic slot; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitHasVehiclePlayerFrameUI" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitHasVehicleUI" Priority="0" ImageType="Method">
    <Signature>hasVehicle = UnitHasVehicleUI("unit") or UnitHasVehicleUI("name")</Signature>
    <Description>Returns whether a unit is controlling a vehicle or vehicle weapon. Used in the default UI to show the vehicle's health and power status bars in place of the controlling unit's. Returns false for passengers riding in but not controlling part of a vehicle; to find out whether a unit is riding in a vehicle, use UnitInVehicle. Also note that in some vehicles the player can command a vehicle weapon (e.g. gun turret) without controlling the vehicle itself; to find out whether a unit is controlling a vehicle, use UnitControllingVehicle.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="hasVehicle">
      <Description>True if the unit is controlling a vehicle or vehicle weapon; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitHealth" Priority="0" ImageType="Method">
    <Signature>health = UnitHealth("unit") or UnitHealth("name")</Signature>
    <Description>Returns a unit's current amount of health</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="health">
      <Description>The unit's current amount of health (hit points) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitHealthMax" Priority="0" ImageType="Method">
    <Signature>maxValue = UnitHealthMax("unit") or UnitHealthMax("name")</Signature>
    <Description>Returns a unit's maximum health value</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="maxValue">
      <Description>The unit's maximum health (hit points) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInBattleground" Priority="0" ImageType="Method">
    <Signature>raidNum = UnitInBattleground("unit")</Signature>
    <Description>Returns whether a unit is in same battleground instance as the player</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="raidNum">
      <Description>Numeric portion of the unit's raid unitID (e.g. 13 for raid13) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInOtherParty" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitInParty" Priority="0" ImageType="Method">
    <Signature>inParty = UnitInParty("unit") or UnitInParty("name")</Signature>
    <Description>Returns whether a unit is a player unit in the player's party. Always returns 1 for the player unit. Returns nil for the player's or party members' pets.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="inParty">
      <Description>1 if the unit is a player unit in the player's party; otherwise nil. (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInPhase" Priority="0" ImageType="Method">
    <Signature>inPhase = UnitInPhase(unitID)</Signature>
    <Description>Return information if unit is in this same phase.</Description>
    <ArgumentList Name="unitID">
      <Description>Unit (unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inPhase">
      <Description>Return true if unit is in this same phase (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInRaid" Priority="0" ImageType="Method">
    <Signature>inRaid = UnitInRaid("unit")</Signature>
    <Description>Returns whether a unit is in the player's raid</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inRaid">
      <Description>Index of the unit in the raid (matches the numeric part of the unit's raid unitID minus 1; e.g. returns 0 for raid1, 12 for raid13, etc) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInRange" Priority="0" ImageType="Method">
    <Signature>inRange = UnitInRange("unit") or UnitInRange("name")</Signature>
    <Description>Returns whether a party/raid member is nearby. The range check used by this function isn't directly based on the player's abilities (which may have varying ranges); it's fixed by Blizzard at a distance of around 40 yards (which encompasses many common healing spells and other abilities often used on raid members).
Also returns nil for units outside the player's area of view.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for party/raid members and their pets (string) </Description>
    </ArgumentList>
    <ReturnList Name="inRange">
      <Description>1 if the unit is close enough to the player to (likely) be in range for helpful spells; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInVehicle" Priority="0" ImageType="Method">
    <Signature>inVehicle = UnitInVehicle("unit") or UnitInVehicle("name")</Signature>
    <Description>Returns whether a unit is in a vehicle. A unit can be riding in a vehicle without controlling it: to test whether a unit is controlling a vehicle, use UnitControllingVehicle or UnitHasVehicleUI.
Note: multi-passenger mounts appear as vehicles for passengers but not for the owner.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="inVehicle">
      <Description>1 if the unit is in a vehicle; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInVehicleControlSeat" Priority="0" ImageType="Method">
    <Signature>isInControl = UnitInVehicleControlSeat()</Signature>
    <Description>Returns whether a unit controls a vehicle</Description>
    <ReturnList Name="isInControl">
      <Description>True if the unit controls a vehicle (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitInVehicleHidesPetFrame" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsAFK" Priority="0" ImageType="Method">
    <Signature>isAFK = UnitIsAFK("unit") or UnitIsAFK("name")</Signature>
    <Description>Returns whether a unit is marked AFK (Away From Keyboard)</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="isAFK">
      <Description>1 if the unit is AFK; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsBattlePet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsBattlePetCompanion" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsCharmed" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsConnected" Priority="0" ImageType="Method">
    <Signature>isConnected = UnitIsConnected("unit")</Signature>
    <Description>Returns whether a unit is connected (i.e. not Offline)</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isConnected">
      <Description>1 if the player is connected; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsControlling" Priority="0" ImageType="Method">
    <Signature>isControlling = UnitIsControlling("unit")</Signature>
    <Description>Returns whether a unit is controlling another unit. Applies to Mind Control and similar cases as well as to players piloting vehicles.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isControlling">
      <Description>1 if the unit is controlling another unit; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsCorpse" Priority="0" ImageType="Method">
    <Signature>isCorpse = UnitIsCorpse("unit")</Signature>
    <Description>Returns whether a unit is a corpse</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isCorpse">
      <Description>1 if the unit is a corpse; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsDND" Priority="0" ImageType="Method">
    <Signature>isDND = UnitIsDND("unit") or UnitIsDND("name")</Signature>
    <Description>Returns whether a unit is marked DND (Do Not Disturb)</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="isDND">
      <Description>1 if the unit is marked Do Not Disturb, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsDead" Priority="0" ImageType="Method">
    <Signature>isDead = UnitIsDead("unit")</Signature>
    <Description>Returns whether a unit is dead. Only returns 1 while the unit is dead and has not yet released his or her spirit. See UnitIsGhost() for after the unit has released.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isDead">
      <Description>1 if the unit is dead; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsDeadOrGhost" Priority="0" ImageType="Method">
    <Signature>isDeadOrGhost = UnitIsDeadOrGhost("unit")</Signature>
    <Description>Returns whether a unit is either dead or a ghost</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isDeadOrGhost">
      <Description>1 if the unit is dead or a ghost, otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsEnemy" Priority="0" ImageType="Method">
    <Signature>isEnemy = UnitIsEnemy("unit", "unit")</Signature>
    <Description>Returns whether two units are enemies</Description>
    <ArgumentList Name="unit">
      <Description>A unit (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Another unit (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isEnemy">
      <Description>1 if the units are enemies; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsFeignDeath" Priority="0" ImageType="Method">
    <Signature>isFeign = UnitIsFeignDeath("unit")</Signature>
    <Description>Returns whether a unit is feigning death. Only provides valid data for friendly units.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isFeign">
      <Description>1 if the unit is feigning death; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsFriend" Priority="0" ImageType="Method">
    <Signature>isFriends = UnitIsFriend("unit", "unit")</Signature>
    <Description>Returns whether two units are friendly</Description>
    <ArgumentList Name="unit">
      <Description>A unit (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Another unit (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isFriends">
      <Description>1 if the two units are friendly; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsGhost" Priority="0" ImageType="Method">
    <Signature>isGhost = UnitIsGhost("unit")</Signature>
    <Description>Returns whether a unit is currently a ghost</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isGhost">
      <Description>1 if the unit is a ghost; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsGroupAssistant" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsGroupLeader" Priority="0" ImageType="Method">
    <Signature>UnitIsGroupLeader()</Signature>
    <Description>Is a unit is your group leader.. Please don't just put stuff here, actually look at other functions and see how they're documented. 99% of what you've done is incorrect and isn't being displayed.</Description>
  </WowApi>
  <WowApi Name="UnitIsInMyGuild" Priority="0" ImageType="Method">
    <Signature>inGuild = UnitIsInMyGuild("unit")</Signature>
    <Description>Returns whether a unit is in the player's guild</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="inGuild">
      <Description>1 if the unit is in the player's guild; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsOtherPlayersBattlePet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsOtherPlayersPet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsPVP" Priority="0" ImageType="Method">
    <Signature>isPVP = UnitIsPVP("unit")</Signature>
    <Description>Returns whether a unit is flagged for PvP activity</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isPVP">
      <Description>1 if the unit is flagged for PVP activity; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsPVPFreeForAll" Priority="0" ImageType="Method">
    <Signature>isFreeForAll = UnitIsPVPFreeForAll("unit")</Signature>
    <Description>Returns whether a unit is flagged for free-for-all PvP. Free-for-all PvP allows all players to attack each other regardless of faction; used in certain outdoor areas (such as Gurubashi Arena and "The Maul" outside Dire Maul).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isFreeForAll">
      <Description>1 if the unit is enabled for free-for-all PvP; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsPVPSanctuary" Priority="0" ImageType="Method">
    <Signature>state = UnitIsPVPSanctuary("unit")</Signature>
    <Description>Returns whether a unit is in a Sanctuary area preventing PvP activity</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="state">
      <Description>1 if the unit is in a PVP Sanctuary; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsPlayer" Priority="0" ImageType="Method">
    <Signature>isPlayer = UnitIsPlayer("unit")</Signature>
    <Description>Returns whether a unit is a player unit (not an NPC)</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isPlayer">
      <Description>1 if the unit is a player unit; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsPossessed" Priority="0" ImageType="Method">
    <Signature>isPossessed = UnitIsPossessed("unit")</Signature>
    <Description>Returns whether a unit is possessed by another</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isPossessed">
      <Description>1 if the given unit is possessed; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsQuestBoss" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsRaidOfficer" Priority="0" ImageType="Method">
    <Signature>leader = UnitIsRaidOfficer("unit") or UnitIsRaidOfficer("name")</Signature>
    <Description>Returns whether a unit is a raid assistant in the player's raid</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="leader">
      <Description>1 if the unit is a raid assistant; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsSameServer" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitIsSilenced" Priority="0" ImageType="Method">
    <Signature>silenced = UnitIsSilenced("name", "channel")</Signature>
    <Description>Returns whether a character is silenced on a voice channel</Description>
    <ArgumentList Name="name">
      <Description>Name of a character (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>Name of a chat channel (string) </Description>
    </ArgumentList>
    <ReturnList Name="silenced">
      <Description>1 if the unit is silenced on the given channel; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsTalking" Priority="0" ImageType="Method">
    <Signature>state = UnitIsTalking("unit")</Signature>
    <Description>Returns whether a unit is currently speaking in voice chat. Despite the "unit" name, this function only accepts player names, not unitIDs.</Description>
    <ArgumentList Name="unit">
      <Description>Name of a character in the player's current voice channel (string) </Description>
    </ArgumentList>
    <ReturnList Name="state">
      <Description>1 if the unit is currently speaking in voice chat; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsTapped" Priority="0" ImageType="Method">
    <Signature>UnitIsTapped(unit)</Signature>
    <Description>Returns whether a unit is tapped. Normally, rewards for killing a unit are available only to the character or group who first damaged the unit; once a character has thus established his claim on the unit, it is considered "tapped".</Description>
    <ArgumentList Name="unit">
      <Description>The unitid to query (unitId) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UnitIsTappedByAllThreatList" Priority="0" ImageType="Method">
    <Signature>allTapped = UnitIsTappedByAllThreatList("unit")</Signature>
    <Description>Returns whether a unit allows all players on its threat list to receive kill credit. Used to override the normal "tapping" behavior for certain mobs -- if this function returns 1, the player does not have to be the first to attack the mob (or in the same party/raid as the first player to attack) in order to receive quest or achievement credit for killing it.
In the default UI, this function can prevent the graying of a unit's name background in the TargetFrame and FocusFrame even if the unit is otherwise tapped, indicating that kill credit is still available if the player attacks.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="allTapped">
      <Description>1 if the unit allows all players on its threat list to receive kill credit; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsTappedByPlayer" Priority="0" ImageType="Method">
    <Signature>isTapped = UnitIsTappedByPlayer("unit")</Signature>
    <Description>Returns whether a unit is tapped by the player or the player's group. Normally, rewards for killing a unit are available only to the character or group who first damaged the unit; once a character has thus established his claim on the unit, it is considered "tapped".</Description>
    <ArgumentList Name="unit">
      <Description>The unit to be queried (string) </Description>
    </ArgumentList>
    <ReturnList Name="isTapped">
      <Description>1 if the unit is tapped by the player; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsTrivial" Priority="0" ImageType="Method">
    <Signature>isTrivial = UnitIsTrivial("unit")</Signature>
    <Description>Returns whether a unit is trivial at the player's level. Killing trivial units (whose level is colored gray in the default UI) does not reward honor or experience.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isTrivial">
      <Description>1 if the unit is trivial at the player's level; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsUnit" Priority="0" ImageType="Method">
    <Signature>isSame = UnitIsUnit("unit", "unit")</Signature>
    <Description>Returns whether two unit references are to the same unit. Useful for determining whether a composite unitID (such as raid19target) also refers to a basic unitID; see example. </Description>
    <ArgumentList Name="unit">
      <Description>A unit (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Another unit (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UnitIsVisible" Priority="0" ImageType="Method">
    <Signature>isVisible = UnitIsVisible("unit")</Signature>
    <Description>Returns whether a unit is in the player's area of interest</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isVisible">
      <Description>1 if the unit is is in the player's area of interest; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitIsWildBattlePet" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitLeadsAnyGroup" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitLevel" Priority="0" ImageType="Method">
    <Signature>level = UnitLevel("unit")</Signature>
    <Description>Returns a unit's level. Returns -1 for boss units and hostile units whose level is ten levels or more above the player's.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="level">
      <Description>The unit's level (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitMana" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitManaMax" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitName" Priority="0" ImageType="Method">
    <Signature>name, realm = UnitName("unit")</Signature>
    <Description>Returns the name of a unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the unit (string) </Description>
    </ReturnList>
    <ReturnList Name="realm">
      <Description>Name of the unit's home realm if the unit is not from the player's realm; otherwise nil (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitNumPowerBarTimers" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitOnTaxi" Priority="0" ImageType="Method">
    <Signature>onTaxi = UnitOnTaxi("unit")</Signature>
    <Description>Returns whether a unit is currently riding a flight path (taxi). Valid for any unit in the player's area of interest, but generally useful only for player -- taxi flights move quickly, so a taxi-riding unit visible to the player will not remain visible for very long.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="onTaxi">
      <Description>1 if the unit is on a taxi; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPVPName" Priority="0" ImageType="Method">
    <Signature>name = UnitPVPName("unit")</Signature>
    <Description>Returns the name of a unit including the unit's current title. Titles are no longer specific to PvP; this function returns a unit's name with whichever title he or she is currently displaying (e.g. "Gladiator Spin", "Keydar Jenkins", "Ownsusohard, Champion of the Frozen Wastes", etc).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>Name of the unit including the unit's current title (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPVPRank" Priority="0" ImageType="Method">
    <Signature>rank = UnitPVPRank("unit")</Signature>
    <Description>Returns a unit's PVP rank as a number. Returns 0 for all units; was only applicable in the older PvP rewards system that was abandoned with the WoW 2.0 patch.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="rank">
      <Description>The numeric PvP rank of the unit, or 0 if the unit has no PvP rank (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPlayerControlled" Priority="0" ImageType="Method">
    <Signature>isPlayer = UnitPlayerControlled("unit")</Signature>
    <Description>Returns whether a unit is controlled by a player</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="isPlayer">
      <Description>1 if the unit is controlled by a player; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPlayerOrPetInParty" Priority="0" ImageType="Method">
    <Signature>inParty = UnitPlayerOrPetInParty("unit") or UnitPlayerOrPetInParty("name")</Signature>
    <Description>Returns whether a unit is in the player's party or belongs to a party member. Returns nil for the player and the player's pet.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="inParty">
      <Description>1 if the unit is in the player's party or is a pet belonging to a party member; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPlayerOrPetInRaid" Priority="0" ImageType="Method">
    <Signature>inParty = UnitPlayerOrPetInRaid("unit") or UnitPlayerOrPetInRaid("name")</Signature>
    <Description>Returns whether a unit is in the player's raid or belongs to a raid member</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query (string) </Description>
    </ArgumentList>
    <ReturnList Name="inParty">
      <Description>1 if the unit is in the player's raid or is a pet belonging to a raid member; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPower" Priority="0" ImageType="Method">
    <Signature>power = UnitPower("unitID" [, powerType])</Signature>
    <Description>Returns a unit's current level of mana, rage, energy or other power type. Returns zero for non-existent units.</Description>
    <ArgumentList Name="unitID">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="powerType">
      <Description>A specific power type to query (number, powerType) </Description>
    </ArgumentList>
    <ReturnList Name="power">
      <Description>The unit's current level of mana, rage, energy, runic power, or other power type (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitPowerBarTimerInfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitPowerMax" Priority="0" ImageType="Method">
    <Signature>maxValue = UnitPowerMax("unitID" [, powerType])</Signature>
    <Description>Returns a unit's maximum mana, rage, energy or other power type. Returns the units current maximum power, if the unit does not exist then zero is returned. When querying with a powerType, as long as the unit exists you will get the maximum untalented power even if the class does not use the power type.</Description>
    <ArgumentList Name="unitID">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="UnitPowerType" Priority="0" ImageType="Method">
    <Signature>powerType, powerToken, altR, altG, altB = UnitPowerType("unit") or UnitPowerType("name")</Signature>
    <Description>Returns the power type (energy, mana, rage) of the given unit. Does not return color values for common power types (mana, rage, energy, focus, and runic power); the canonical colors for these can be found in the PowerBarColor table. Color values may be included for special power types such as those used by vehicles.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="powerType">
      <Description>A number identifying the power type (number)
0 - Mana
1 - Rage
2 - Focus
3 - Energy
6 - Runic Power</Description>
    </ReturnList>
    <ReturnList Name="powerToken">
      <Description>The name of a global variable containing the localized name of the power type (string) </Description>
    </ReturnList>
    <ReturnList Name="altR">
      <Description>Red component of the color used for displaying this power type (number) </Description>
    </ReturnList>
    <ReturnList Name="altG">
      <Description>Green component of the color used for displaying this power type (number) </Description>
    </ReturnList>
    <ReturnList Name="altB">
      <Description>Blue component of the color used for displaying this power type (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitRace" Priority="0" ImageType="Method">
    <Signature>race, fileName = UnitRace("unit")</Signature>
    <Description>Returns the name of a unit's race</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="race">
      <Description>Localized name of the unit's race (string) </Description>
    </ReturnList>
    <ReturnList Name="fileName">
      <Description>A non-localized token representing the unit's race (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitRangedAttack" Priority="0" ImageType="Method">
    <Signature>rangedAttackBase, rangedAttackMod = UnitRangedAttack("unit")</Signature>
    <Description>Returns information about the player's or pet's ranged weapon skill</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="rangedAttackBase">
      <Description>The unit's base ranged weapon skill (number) </Description>
    </ReturnList>
    <ReturnList Name="rangedAttackMod">
      <Description>Temporary modifiers to ranged weapon skill (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitRangedAttackPower" Priority="0" ImageType="Method">
    <Signature>base, posBuff, negBuff = UnitRangedAttackPower("unit")</Signature>
    <Description>Returns the player's or pet's ranged attack power</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="base">
      <Description>Base ranged attack power (number) </Description>
    </ReturnList>
    <ReturnList Name="posBuff">
      <Description>Positive buffs to ranged attack power (number) </Description>
    </ReturnList>
    <ReturnList Name="negBuff">
      <Description>Negative buffs to ranged attack power (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitRangedDamage" Priority="0" ImageType="Method">
    <Signature>rangedAttackSpeed, minDamage, maxDamage, physicalBonusPos, physicalBonusNeg, percent = UnitRangedDamage("unit")</Signature>
    <Description>Returns information about the player's or pet's ranged attack damage and speed</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="rangedAttackSpeed">
      <Description>Current speed of the unit's ranged attack (attacks per second), or 0 if no ranged weapon is equipped (number) </Description>
    </ReturnList>
    <ReturnList Name="minDamage">
      <Description>The minimum base damage per attack (number) </Description>
    </ReturnList>
    <ReturnList Name="maxDamage">
      <Description>The maximum base damage per attack (number) </Description>
    </ReturnList>
    <ReturnList Name="physicalBonusPos">
      <Description>Positive modifiers to ranged weapon damage (number) </Description>
    </ReturnList>
    <ReturnList Name="physicalBonusNeg">
      <Description>Negative modifiers to ranged weapon damage (number) </Description>
    </ReturnList>
    <ReturnList Name="percent">
      <Description>Factor by which damage output is multiplied due to buffs/debuffs (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitReaction" Priority="0" ImageType="Method">
    <Signature>reaction = UnitReaction("unit", "unit")</Signature>
    <Description>Returns the reaction of one unit with regards to another as a number. The returned value often (but not always) matches the unit's level of reputation with the second unit's faction, and can be used with the UnitReactionColor global table to return the color used to display a unit's reaction in the default UI.</Description>
    <ArgumentList Name="unit">
      <Description>A unit (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>Another unit (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="reaction">
      <Description>Reaction of the first unit towards the second unit (number)
1 - Hated
2 - Hostile
3 - Unfriendly
4 - Neutral
5 - Friendly
6 - Honored
7 - Revered
8 - Exalted</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitResistance" Priority="0" ImageType="Method">
    <Signature>base, resistance, positive, negative = UnitResistance("unit", resistanceIndex)</Signature>
    <Description>Returns information about the player's or pet's magic resistance</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="UnitSelectionColor" Priority="0" ImageType="Method">
    <Signature>red, green, blue, alpha = UnitSelectionColor("unit") or UnitSelectionColor("name")</Signature>
    <Description>Returns a color indicating hostility and related status of a unit. This color is used in various places in the default UI, such as the background behind a unit's name in the target and focus frames. For NPCs, the color reflects hostility and reputation, ranging from red (hostile) to orange or yellow (unfriendly or neutral) to green (friendly). When the unit is a player, a blue color is used unless the player is active for PvP, in which case the color may be red (he can attack you and you can attack him), yellow (you can attack him but he can't attack you) or green (ally). Color component values are floating point numbers between 0 and 1.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="red">
      <Description>The red component of the color. (number) </Description>
    </ReturnList>
    <ReturnList Name="green">
      <Description>The green component of the color. (number) </Description>
    </ReturnList>
    <ReturnList Name="blue">
      <Description>The blue component of the color. (number) </Description>
    </ReturnList>
    <ReturnList Name="alpha">
      <Description>The alpha (opacity) component of the color. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitSetRole" Priority="0" ImageType="Method">
    <Signature>UnitSetRole("unit", "role")</Signature>
    <Description>Sets a unit's role in the group or raid</Description>
    <ArgumentList Name="unit">
      <Description>Unit to modify (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="role">
      <Description>The unit's role string (string)
DAMAGER
HEALER
NONE
TANK</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UnitSex" Priority="0" ImageType="Method">
    <Signature>gender = UnitSex("unit") or UnitSex("name")</Signature>
    <Description>Returns the gender of the given unit or player</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="gender">
      <Description>The unit's gender (number)
1 - Neuter / Unknown
2 - Male
3 - Female</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitSpellHaste" Priority="0" ImageType="Method">
    <Signature>haste = UnitSpellHaste("unit") or UnitSpellHaste("name")</Signature>
    <Description>Returns the unit's spell haste as a percentage</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="haste">
      <Description>The unit's spell haste, as a percentage (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitStat" Priority="0" ImageType="Method">
    <Signature>stat, effectiveStat, posBuff, negBuff = UnitStat("unit", statIndex)</Signature>
    <Description>Returns information about a basic character statistic for the player or pet</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player or pet (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="statIndex">
      <Description>Index of a basic statistic (number)
1 - Strength
2 - Agility
3 - Stamina
4 - Intellect
5 - Spirit</Description>
    </ArgumentList>
    <ReturnList Name="stat">
      <Description>Current value of the statistic (number) </Description>
    </ReturnList>
    <ReturnList Name="effectiveStat">
      <Description>Effective value of the statistic (number) </Description>
    </ReturnList>
    <ReturnList Name="posBuff">
      <Description>Positive modifiers to the statistic (number) </Description>
    </ReturnList>
    <ReturnList Name="negBuff">
      <Description>Negative modifiers to the statistic (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitSwitchToVehicleSeat" Priority="0" ImageType="Method">
    <Signature>UnitSwitchToVehicleSeat("unit", seat)</Signature>
    <Description>Moves the player to another seat within his current vehicle</Description>
    <ArgumentList Name="unit">
      <Description>Unit to move (only valid for player) (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="seat">
      <Description>Index of a seat to switch to (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UnitTargetsVehicleInRaidUI" Priority="0" ImageType="Method">
    <Signature>targetVehicle = UnitTargetsVehicleInRaidUI("unit")</Signature>
    <Description>Returns whether attempts to target a unit should target its vehicle. The unit can still be targeted: this flag is used to provide a convenience in the default UI for certain cases (such as the Malygos encounter) such that clicking a unit in the raid UI targets its vehicle (e.g. so players can use their drakes to heal other players' drakes).</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="targetVehicle">
      <Description>True if clicking the unit's raid UI representation should target the unit's vehicle instead of the unit itself; otherwise false (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitThreatPercentageOfLead" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnitThreatSituation" Priority="0" ImageType="Method">
    <Signature>status = UnitThreatSituation(unit [, mobUnit]) or UnitThreatSituation("name" [, mobUnit])</Signature>
    <Description>Returns the general threat status of a unit. See UnitDetailedThreatSituation for details about threat values.
Threat information for a pair of units is only returned if the player has threat against the NPC unit in question. (For example, no threat data is provided if the player's pet is attacking an NPC but the player himself has taken no action, even though the pet has threat against the NPC.)</Description>
    <ArgumentList Name="unit">
      <Description>The unit whose threat situation is being requested (unitid) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>The name of a unit to query. Only valid for the player, pet, and party/raid members. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="mobUnit">
      <Description>An NPC unit the first unit may have threat against; if nil, returned values reflect whichever NPC unit the first unit has the highest threat against. (unitid) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>A threat status category (number)
0 - Unit has less than 100% raw threat (default UI shows no indicator)
1 - Unit has 100% or higher raw threat but isn't mobUnit's primary target (default UI shows yellow indicator)
2 - Unit is mobUnit's primary target, and another unit has 100% or higher raw threat (default UI shows orange indicator)
3 - Unit is mobUnit's primary target, and no other unit has 100% or higher raw threat (default UI shows red indicator)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitUsingVehicle" Priority="0" ImageType="Method">
    <Signature>usingVehicle = UnitUsingVehicle("unit")</Signature>
    <Description>Returns whether a unit is using a vehicle. Unlike similar functions, UnitUsingVehicle() also returns true while the unit is transitioning between seats in a vehicle.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="usingVehicle">
      <Description>1 if the unit is using a vehicle; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitVehicleSeatCount" Priority="0" ImageType="Method">
    <Signature>numSeats = UnitVehicleSeatCount("unit")</Signature>
    <Description>Returns the number of seats in a unit's vehicle. Note: returns 0 for multi-passenger mounts even thought multiple seats are available.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="numSeats">
      <Description>Number of seats in the unit's vehicle (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitVehicleSeatInfo" Priority="0" ImageType="Method">
    <Signature>controlType, occupantName, occupantRealm, canEject, canSwitchSeats = UnitVehicleSeatInfo("unit", seat)</Signature>
    <Description>Returns information about seats in a vehicle. Note: multi-passenger mounts appear as vehicles for passengers but not for the owner; seat information applies only to the passenger seats.</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="seat">
      <Description>Index of a seat in the unit's vehicle (number) </Description>
    </ArgumentList>
    <ReturnList Name="controlType">
      <Description>Type of control for the seat (string)
Child - Unit in this seat controls part of the vehicle but not its movement (e.g. a gun turret)
None - Unit in this seat has no control over the vehicle
Root - Unit in this seat controls the movement of the vehicle</Description>
    </ReturnList>
    <ReturnList Name="occupantName">
      <Description>Name of the unit in the seat, or nil if the seat is empty (string) </Description>
    </ReturnList>
    <ReturnList Name="occupantRealm">
      <Description>Home realm of the unit in the seat; nil if the seat is empty or its occupant is from the same realm as the player (string) </Description>
    </ReturnList>
    <ReturnList Name="canEject">
      <Description>True if the vehicle's driver can eject the occupant of the seat (boolean) </Description>
    </ReturnList>
    <ReturnList Name="canSwitchSeats">
      <Description>True if the player can switch to this seat. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitVehicleSkin" Priority="0" ImageType="Method">
    <Signature>skin = UnitVehicleSkin("unit") or UnitVehicleSkin("name")</Signature>
    <Description>Returns the style of vehicle UI to display for a unit</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Name of a unit to query; only valid for player, pet, and party/raid members (string) </Description>
    </ArgumentList>
    <ReturnList Name="skin">
      <Description>Token identifying the style of vehicle UI to display for the unit (string)
Mechanical - Used for mechanical vehicles
Natural - Used for creature mounts</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitXP" Priority="0" ImageType="Method">
    <Signature>currXP = UnitXP("unit")</Signature>
    <Description>Returns the player's current amount of experience points</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="currXP">
      <Description>Current amount of experience points (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnitXPMax" Priority="0" ImageType="Method">
    <Signature>playerMaxXP = UnitXPMax("unit")</Signature>
    <Description>Return the total amount of experience points required for the player to gain a level</Description>
    <ArgumentList Name="unit">
      <Description>A unit to query; only valid for player (string, unitID) </Description>
    </ArgumentList>
    <ReturnList Name="playerMaxXP">
      <Description>Total amount of experience points required for the player to gain a level (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UnlearnSpecialization" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UnlockVoidStorage" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UpdateAddOnCPUUsage" Priority="0" ImageType="Method">
    <Signature>UpdateAddOnCPUUsage()</Signature>
    <Description>Updates addon CPU profiling information. Only has effect if the scriptProfile CVar is set to 1. See GetAddOnCPUUsage() for the updated data.</Description>
  </WowApi>
  <WowApi Name="UpdateAddOnMemoryUsage" Priority="0" ImageType="Method">
    <Signature>UpdateAddOnMemoryUsage()</Signature>
    <Description>Updates addon memory usage information. See GetAddOnMemoryUsage() for the updated data.</Description>
  </WowApi>
  <WowApi Name="UpdateGMTicket" Priority="0" ImageType="Method">
    <Signature>UpdateGMTicket("text")</Signature>
    <Description>Updates the open GM ticket with new text</Description>
    <ArgumentList Name="text">
      <Description>New text for the ticket (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UpdateInventoryAlertStatus" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UpdateMapHighlight" Priority="0" ImageType="Method">
    <Signature>name, fileName, texCoordX, texCoordY, textureX, textureY, scrollChildX, scrollChildY = UpdateMapHighlight(cursorX, cursorY)</Signature>
    <Description>Returns information about the texture used for highlighting zones in a continent map on mouseover</Description>
    <ArgumentList Name="cursorX">
      <Description>Horizontal position of the mouse cursor relative to the current world map (0 = left edge, 1 = right edge) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="cursorY">
      <Description>Vertical position of the unit relative to the current world map (0 = top, 1 = bottom) (number) </Description>
    </ArgumentList>
    <ReturnList Name="name">
      <Description>The name of the zone being highlighted (string) </Description>
    </ReturnList>
    <ReturnList Name="fileName">
      <Description>Unique part of the path to the highlight texture for the zone; full path follows the format "Interface\\WorldMap\\"..fileName.."\\"..fileName.."Highlight" (string) </Description>
    </ReturnList>
    <ReturnList Name="texCoordX">
      <Description>Right texCoord value for the highlight texture (number) </Description>
    </ReturnList>
    <ReturnList Name="texCoordY">
      <Description>Bottom texCoord value for the highlight texture (number) </Description>
    </ReturnList>
    <ReturnList Name="textureX">
      <Description>Width of the texture as a proportion of the world map's width (number) </Description>
    </ReturnList>
    <ReturnList Name="textureY">
      <Description>Height of the texture as a proportion of the world map's height (number) </Description>
    </ReturnList>
    <ReturnList Name="scrollChildX">
      <Description>Horizontal position of the texture's top left corner relative to the current world map (0 = left edge, 1 = right edge) (number) </Description>
    </ReturnList>
    <ReturnList Name="scrollChildY">
      <Description>Vertical position of the texture's top left corner relative to the current world map (0 = top, 1 = bottom) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UpdateWarGamesList" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UpdateWorldMapArrowFrames" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UpgradeItem" Priority="0" ImageType="Method">
    <Signature>UpgradeItem()</Signature>
    <Description>Accepts an item upgrade, spending the required amount of currency. This function can only be called when at the upgrade merchant.</Description>
  </WowApi>
  <WowApi Name="UploadSettings" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UseAction" Priority="0" ImageType="Method">
    <Signature>UseAction(slot [, "target" [, "button"]])</Signature>
    <Description>Uses an action</Description>
    <ArgumentList Name="slot">
      <Description>An action bar slot (number, actionID) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit to be used as target for the action (string, unitID) </Description>
    </ArgumentList>
    <ArgumentList Name="button">
      <Description>Mouse button used to activate the action (string)
Button4 - Fourth mouse button
Button5 - Fifth mouse button
LeftButton - Left mouse button (also used when the action is activated via keyboard)
MiddleButton - Third mouse button (typically middle button / scroll wheel)
RightButton - Right mouse button</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UseContainerItem" Priority="0" ImageType="Method">
    <Signature>UseContainerItem(container, slot [, "target"])</Signature>
    <Description>Activate (as with right-clicking) an item in one of the player's bags. Has the same effect as right-clicking an item in the default UI; therefore, results may vary by context. In cases of conflict, conditions listed first override those below:
If the bank or guild bank UI is open, moves the item into the bank or guild bank (or if the item is in the bank or guild bank, moves it into the player's inventory).
If the trade UI is open, puts the item into the first available trade slot (or if the item is soulbound, into the "will not be traded" slot).
If the merchant UI is open and not in repair mode, attempts to sell the item to the merchant.
If the Send Mail UI is open, puts the item into the first available slot for message attachments.
If an item is readable (e.g. Lament of the Highborne), opens it for reading.
If an item is lootable (e.g. Magically Wrapped Gift), opens it for looting
If an item can be equipped, attempts to equip the item (placing any currently equipped item of the same type into the container slot used).
If an item has a "Use:" effect, activates said effect. Under this condition only, the function is protected and can only be called by the Blizzard UI.
If none of the above conditions are true, nothing happens. </Description>
    <ArgumentList Name="container">
      <Description>Index of one of the player's bags or other containers (number, containerID) </Description>
    </ArgumentList>
    <ArgumentList Name="slot">
      <Description>Index of an item slot within the container (number, containerSlotID) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit to be used as target for the action (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UseEquipmentSet" Priority="0" ImageType="Method">
    <Signature>equipped = UseEquipmentSet("name")</Signature>
    <Description>Equips the items in an equipment set</Description>
    <ArgumentList Name="name">
      <Description>Name of an equipment set (case sensitive) (string) </Description>
    </ArgumentList>
    <ReturnList Name="equipped">
      <Description>true if the set was equipped; otherwise nil (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UseHearthstone" Priority="0" ImageType="Method">
    <Signature>state = UseHearthstone()</Signature>
    <Description>Attempts to use the player's Hearthstone. Used by the support/help interface to resolve issues where a player is stuck.</Description>
    <ReturnList Name="state">
      <Description>1 if the player's Hearthstone is off cooldown and is being cast, nil otherwise. (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="UseInventoryItem" Priority="0" ImageType="Method">
    <Signature>UseInventoryItem(slot)</Signature>
    <Description>Activate (as with right-clicking) an equipped item. If the inventoryID passed refers to an empty slot or a slot containing an item without a "Use:" action, this function is not protected (i.e. usable only by the Blizzard UI), but also has no effect.</Description>
    <ArgumentList Name="slot">
      <Description>An inventory slot number, as can be obtained from GetInventorySlotInfo (number, inventoryID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UseItemByName" Priority="0" ImageType="Method">
    <Signature>UseItemByName(itemID [, "target"]) or UseItemByName("itemName" [, "target"]) or UseItemByName("itemLink" [, "target"])</Signature>
    <Description>Uses an arbitrary item (optionally on a specified unit)</Description>
    <ArgumentList Name="itemID">
      <Description>An item's ID (number) </Description>
    </ArgumentList>
    <ArgumentList Name="itemName">
      <Description>An item's name (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemLink">
      <Description>An item's hyperlink, or any string containing the itemString portion of an item link (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>A unit on which to use the item, if applicable (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UseItemForTransmogrify" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="UseQuestLogSpecialItem" Priority="0" ImageType="Method">
    <Signature>UseQuestLogSpecialItem(questIndex)</Signature>
    <Description>Uses the item associated with a current quest. Available for a number of quests which involve using an item (i.e. "Use the MacGuffin to summon and defeat the boss", "Use this saw to fell 12 trees", etc.)</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of a quest log entry with an associated usable item (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UseSoulstone" Priority="0" ImageType="Method">
    <Signature>UseSoulstone()</Signature>
    <Description>Instantly resurrects the player in place, if possible. Usable if the player is dead (and has not yet released his or her spirit to the graveyard) and has the ability to instantly resurrect (provided by a Warlock's Soulstone or a Shaman's Reincarnation passive ability).</Description>
  </WowApi>
  <WowApi Name="ValidateTransmogrifications" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VehicleAimDecrement" Priority="0" ImageType="Method">
    <Signature>VehicleAimDecrement(amount)</Signature>
    <Description>Adjusts vehicle aim downward by a specified amount</Description>
    <ArgumentList Name="amount">
      <Description>Angle by which to adjust aim (in radians) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VehicleAimDownStart" Priority="0" ImageType="Method">
    <Signature>VehicleAimDownStart()</Signature>
    <Description>Starts adjusting vehicle aim downward</Description>
  </WowApi>
  <WowApi Name="VehicleAimDownStop" Priority="0" ImageType="Method">
    <Signature>VehicleAimDownStop()</Signature>
    <Description>Stops adjusting vehicle aim downward</Description>
  </WowApi>
  <WowApi Name="VehicleAimGetAngle" Priority="0" ImageType="Method">
    <Signature>angle = VehicleAimGetAngle()</Signature>
    <Description>Returns the aim angle of a vehicle weapon. The returned value is in radians, with positive values indicating upward angle, negative values indicating downward angle, and 0 indicating straight ahead.</Description>
    <ReturnList Name="angle">
      <Description>Vertical angle of vehicle weapon aim (in radians) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VehicleAimGetNormAngle" Priority="0" ImageType="Method">
    <Signature>angle = VehicleAimGetNormAngle()</Signature>
    <Description>Returns the aim angle of a vehicle weapon relative to its minimum angle. The returned value is in radians, with 0 indicating the lowest angle allowed for the vehicle weapon and increasing values for upward aim.</Description>
    <ReturnList Name="angle">
      <Description>Vertical angle of vehicle weapon aim (in radians) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VehicleAimGetNormPower" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VehicleAimIncrement" Priority="0" ImageType="Method">
    <Signature>VehicleAimIncrement(amount)</Signature>
    <Description>Adjusts vehicle aim upward by a specified amount</Description>
    <ArgumentList Name="amount">
      <Description>Angle by which to adjust aim (in radians) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VehicleAimRequestAngle" Priority="0" ImageType="Method">
    <Signature>VehicleAimRequestAngle(amount)</Signature>
    <Description>Attempts to set a vehicle weapon's aim angle to a specific value. Causes aim angle to transition smoothly from the current value to the requested value (or to the closest allowed value to the requested value if it is beyond the vehicle's limits).
Aim angle values are in radians, with positive values indicating upward angle, negative values indicating downward angle, and 0 indicating straight ahead.</Description>
    <ArgumentList Name="amount">
      <Description>New aim angle (in radians) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VehicleAimRequestNormAngle" Priority="0" ImageType="Method">
    <Signature>VehicleAimRequestNormAngle(amount)</Signature>
    <Description>Attempts to set a vehicle weapon's aim angle to a specific value relative to its minimum value. Causes aim angle to transition smoothly from the current value to the requested value (or to the closest allowed value to the requested value if it is beyond the vehicle's limits).
The returned value is in radians, with 0 indicating the lowest angle allowed for the vehicle weapon and increasing values for upward aim.</Description>
    <ArgumentList Name="amount">
      <Description>New aim angle (in radians) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VehicleAimSetNormPower" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VehicleAimUpStart" Priority="0" ImageType="Method">
    <Signature>VehicleAimUpStart()</Signature>
    <Description>Starts adjusting vehicle aim upward</Description>
  </WowApi>
  <WowApi Name="VehicleAimUpStop" Priority="0" ImageType="Method">
    <Signature>VehicleAimUpStop()</Signature>
    <Description>Stops adjusting vehicle aim upward</Description>
  </WowApi>
  <WowApi Name="VehicleCameraZoomIn" Priority="0" ImageType="Method">
    <Signature>VehicleCameraZoomIn()</Signature>
    <Description>Zooms the player's view in while in a vehicle</Description>
  </WowApi>
  <WowApi Name="VehicleCameraZoomOut" Priority="0" ImageType="Method">
    <Signature>VehicleCameraZoomOut()</Signature>
    <Description>Zooms the player's view out while in a vehicle</Description>
  </WowApi>
  <WowApi Name="VehicleExit" Priority="0" ImageType="Method">
    <Signature>VehicleExit()</Signature>
    <Description>Removes the player from the current vehicle. Does nothing if the player is not in a vehicle.</Description>
  </WowApi>
  <WowApi Name="VehicleNextSeat" Priority="0" ImageType="Method">
    <Signature>VehicleNextSeat()</Signature>
    <Description>Moves the player from his current seat in a vehicle to the next sequentially numbered seat. If the player is in the highest-numbered seat, cycles around to the lowest-numbered seat.</Description>
  </WowApi>
  <WowApi Name="VehiclePrevSeat" Priority="0" ImageType="Method">
    <Signature>VehiclePrevSeat()</Signature>
    <Description>Moves the player from his current seat in a vehicle to the previous sequentially numbered seat. If the player is in the lowest-numbered seat, cycles around to the highest-numbered seat.</Description>
  </WowApi>
  <WowApi Name="ViewGuildRecipes" Priority="0" ImageType="Method">
    <Signature>ViewGuildRecipes(professionID)</Signature>
    <Description>Opens the guild profession view for a profession. Opens the guild profession view for the specified profession.</Description>
    <ArgumentList Name="professionID">
      <Description>The professionID of the profession. Returned by GetGuildTradeSkillInfo() and GetProfessionInfo(). (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VoiceChat_ActivatePrimaryCaptureCallback" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VoiceChat_GetCurrentMicrophoneSignalLevel" Priority="0" ImageType="Method">
    <Signature>volume = VoiceChat_GetCurrentMicrophoneSignalLevel()</Signature>
    <Description>Returns the current volume level of the microphone signal</Description>
    <ReturnList Name="volume">
      <Description>The current volume level of the microphone signal (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VoiceChat_IsPlayingLoopbackSound" Priority="0" ImageType="Method">
    <Signature>VoiceChat_IsPlayingLoopbackSound(isPlaying)</Signature>
    <Description>Returns whether the Microphone Test recording is playing</Description>
    <ArgumentList Name="isPlaying">
      <Description>1 if the loopback sound is currently being played; otherwise nil (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VoiceChat_IsRecordingLoopbackSound" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VoiceChat_PlayLoopbackSound" Priority="0" ImageType="Method">
    <Signature>VoiceChat_PlayLoopbackSound()</Signature>
    <Description>Plays back the Microphone Test recording</Description>
  </WowApi>
  <WowApi Name="VoiceChat_RecordLoopbackSound" Priority="0" ImageType="Method">
    <Signature>VoiceChat_RecordLoopbackSound(seconds)</Signature>
    <Description>Begins recording a Microphone Test</Description>
    <ArgumentList Name="seconds">
      <Description>The amount of time to record (in seconds) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VoiceChat_StartCapture" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VoiceChat_StopCapture" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="VoiceChat_StopPlayingLoopbackSound" Priority="0" ImageType="Method">
    <Signature>VoiceChat_StopPlayingLoopbackSound()</Signature>
    <Description>Stops playing the Microphone Test recording</Description>
  </WowApi>
  <WowApi Name="VoiceChat_StopRecordingLoopbackSound" Priority="0" ImageType="Method">
    <Signature>VoiceChat_StopRecordingLoopbackSound()</Signature>
    <Description>Stops recording a Microphone Test</Description>
  </WowApi>
  <WowApi Name="VoiceEnumerateCaptureDevices" Priority="0" ImageType="Method">
    <Signature>deviceName = VoiceEnumerateCaptureDevices(deviceIndex)</Signature>
    <Description>Returns the name of an audio input device for voice chat</Description>
    <ArgumentList Name="deviceIndex">
      <Description>Index of the device (between 1 and Sound_ChatSystem_GetNumInputDrivers()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="deviceName">
      <Description>Name of the device (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VoiceEnumerateOutputDevices" Priority="0" ImageType="Method">
    <Signature>device = VoiceEnumerateOutputDevices(deviceIndex)</Signature>
    <Description>Returns the name of an audio output device for voice chat</Description>
    <ArgumentList Name="deviceIndex">
      <Description>Index of the device (between 1 and Sound_ChatSystem_GetNumOutputDrivers()) (number) </Description>
    </ArgumentList>
    <ReturnList Name="device">
      <Description>Name of the device (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VoiceGetCurrentCaptureDevice" Priority="0" ImageType="Method">
    <Signature>index = VoiceGetCurrentCaptureDevice()</Signature>
    <Description>Returns the index of the current voice capture device</Description>
    <ReturnList Name="index">
      <Description>Index of the current voice capture device (between 1 and Sound_ChatSystem_GetNumInputDrivers()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VoiceGetCurrentOutputDevice" Priority="0" ImageType="Method">
    <Signature>index = VoiceGetCurrentOutputDevice()</Signature>
    <Description>Returns the index of the current voice output device</Description>
    <ReturnList Name="index">
      <Description>Index of the current voice output device (between 1 and Sound_ChatSystem_GetNumOutputDrivers()) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VoiceIsDisabledByClient" Priority="0" ImageType="Method">
    <Signature>isDisabled = VoiceIsDisabledByClient()</Signature>
    <Description>Returns whether the voice chat system cannot be enabled. Voice chat may be disabled if the underlying hardware does not support it or if multiple instances of World of Warcraft are running on the same hardware.</Description>
    <ReturnList Name="isDisabled">
      <Description>1 if the voice system is disabled; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="VoicePushToTalkStart" Priority="0" ImageType="Method">
    <Signature>VoicePushToTalkStart()</Signature>
    <Description>Used internally to start talking, when push-to-talk is active in voice chat.</Description>
  </WowApi>
  <WowApi Name="VoicePushToTalkStop" Priority="0" ImageType="Method">
    <Signature>VoicePushToTalkStop()</Signature>
    <Description>Used internally to stop talking, when push-to-talk is active in voice chat</Description>
  </WowApi>
  <WowApi Name="VoiceSelectCaptureDevice" Priority="0" ImageType="Method">
    <Signature>VoiceSelectCaptureDevice("deviceName")</Signature>
    <Description>Selects an audio input device for voice chat</Description>
    <ArgumentList Name="deviceName">
      <Description>Name of an audio input device, as returned from VoiceEnumerateCaptureDevices() (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VoiceSelectOutputDevice" Priority="0" ImageType="Method">
    <Signature>VoiceSelectOutputDevice("deviceName")</Signature>
    <Description>Selects an audio output device for voice chat</Description>
    <ArgumentList Name="deviceName">
      <Description>Name of an audio output device, as returned from VoiceEnumerateOutputDevices() (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="WarGameRespond" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="WithdrawGuildBankMoney" Priority="0" ImageType="Method">
    <Signature>WithdrawGuildBankMoney(amount)</Signature>
    <Description>Attempts to withdraw money from the guild bank. Causes a PLAYER_MONEY event to fire, indicating the amount withdrawn has been added to the player's total (see GetMoney()). Causes an error or system message if amount exceeds the amount of money in the guild bank or the player's allowed daily withdrawal amount.</Description>
    <ArgumentList Name="amount">
      <Description>Amount of money to withdraw (in copper) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ZoomOut" Priority="0" ImageType="Method">
    <Signature>ZoomOut()</Signature>
    <Description>Sets the world map to show the area containing its current area.
Only used by the default UI in certain circumstances: to "zoom out" from a multi-level map (e.g. Dalaran or a dungeon) to the containing zone/continent. May cause problems when not used in such cases.</Description>
  </WowApi>
  <WowApi Name="abs" Priority="0" ImageType="Method">
    <Signature>absoluteValue = abs(x)</Signature>
    <Description>Returns the absolute value of a number. Alias for the standard library function math.abs.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="absoluteValue">
      <Description>Absolute value of x (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="acos" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="asin" Priority="0" ImageType="Method">
    <Signature>asin()</Signature>
    <Description>Alternative to math.asin, using degrees instead of radians</Description>
  </WowApi>
  <WowApi Name="assert" Priority="0" ImageType="Method">
    <Signature>value = assert(condition, "message")</Signature>
    <Description>Causes a Lua error if a condition is failed</Description>
    <ArgumentList Name="condition">
      <Description>Any value (commonly the result of an expression) (value) </Description>
    </ArgumentList>
    <ArgumentList Name="message">
      <Description>Error message to be produced if condition is false or nil (string) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>The condition value provided, if not false or nil (value) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="atan" Priority="0" ImageType="Method">
    <Signature>atan()</Signature>
    <Description>Alternative to math.atan, using degrees instead of radians</Description>
  </WowApi>
  <WowApi Name="atan2" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="ceil" Priority="0" ImageType="Method">
    <Signature>ceiling = ceil(x)</Signature>
    <Description>Returns the smallest integer larger than or equal to a number. Alias for the standard library function math.ceil.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="ceiling">
      <Description>Smallest integer larger than or equal to x (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="collectgarbage" Priority="0" ImageType="Method">
    <Signature>collectgarbage(option [, arg])</Signature>
    <Description>Interface to the Lua garbage collector</Description>
    <ArgumentList Name="option">
      <Description>One of the following options
collect - Performs a full garbage collection cycle
count - Returns the total Lua memory usage (in kilobytes)
restart - Restarts the garbage collector
setpause - Sets the garbage collector's pause percentage to arg; e.g., if 200, the collector waits for memory usage to double before starting a new cycle
setstepmul - Sets the garbage collector's speed (as a percentage relative to memory allocation) to arg; e.g., if 200, the collector runs twice as fast as memory is allocated
step - Performs a garbage collection step, with size arg
stop - Stops the garbage collector</Description>
    </ArgumentList>
    <ArgumentList Name="arg">
      <Description>Argument applicable to some options </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="cos" Priority="0" ImageType="Method">
    <Signature>cos()</Signature>
    <Description>Alternative to math.cos, using degrees instead of radians</Description>
  </WowApi>
  <WowApi Name="date" Priority="0" ImageType="Method">
    <Signature>dateValue = date(["format" [, time]])</Signature>
    <Description>Returns a formatted date/time string for a date (or the current date). Alias to the standard library function os.date.</Description>
    <ArgumentList Name="format">
      <Description>A string describing the formatting of time values (as in the ANSI C strftime()function), or *t to return the time as a table; optionally preceded by ! for Coordinated Universal Time instead of the local time zone; omitted for a date printed in the default format (string) </Description>
    </ArgumentList>
    <ArgumentList Name="time">
      <Description>Time value to be formatted (see time() for description); if omitted, uses the current time (number) </Description>
    </ArgumentList>
    <ReturnList Name="dateValue">
      <Description>A formatted date/time string, (string or table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="debugbreak" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="debugdump" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="debughook" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="debuginfo" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="debugload" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="debuglocals" Priority="0" ImageType="Method">
    <Signature>localsInfo = debuglocals(stackLevel)</Signature>
    <Description>Returns information about the local variables at a given stack depth</Description>
    <ArgumentList Name="stackLevel">
      <Description>The stack level to query (number) </Description>
    </ArgumentList>
    <ReturnList Name="localsInfo">
      <Description>A string detailing the local variables at the given stack depth. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="debugprint" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="debugprofilestart" Priority="0" ImageType="Method">
    <Signature>debugprofilestart()</Signature>
    <Description>Starts/resets the high resolution profiling timer. Subsequent calls to debugprofilestop() will return the current value of the timer.
Note that debugprofilestart() is more of a global reset than a "start". It is not necessary to call it, ever. In fact, it is probably a much better idea to simply do 2 calls to stop() and calculate the difference, since calling start() will interrupt timing measurements done by other addons.</Description>
  </WowApi>
  <WowApi Name="debugprofilestop" Priority="0" ImageType="Method">
    <Signature>time = debugprofilestop()</Signature>
    <Description>Returns the value of the profiling timer</Description>
    <ReturnList Name="time">
      <Description>Current value of the profiling timer (in milliseconds, with sub-millisecond precision) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="debugstack" Priority="0" ImageType="Method">
    <Signature>debugstring = debugstack(start, countTop, countBot)</Signature>
    <Description>Returns information about the current function call stack</Description>
    <ArgumentList Name="start">
      <Description>Stack level at which to begin listing functions; 0 is the debugstack() function itself, 1 is the function that called debugstack(), 2 is the function that called function 1, etc. Defaults to 1 if omitted (number) </Description>
    </ArgumentList>
    <ArgumentList Name="countTop">
      <Description>Maximum number of functions to output at the top of the stack trace (number) </Description>
    </ArgumentList>
    <ArgumentList Name="countBot">
      <Description>Maximum number of functions to output at the bottom of the stack trace, (number) </Description>
    </ArgumentList>
    <ReturnList Name="debugstring">
      <Description>A multi-line string describing the current function call stack (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="debugtimestamp" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="deg" Priority="0" ImageType="Method">
    <Signature>degrees = deg(radians)</Signature>
    <Description>Converts an angle measurement in radians to degrees. Alias for the standard library function math.deg.</Description>
    <ArgumentList Name="radians">
      <Description>An angle specified in radians (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="difftime" Priority="0" ImageType="Method">
    <Signature>seconds = difftime(time2, time1)</Signature>
    <Description>Returns the number of seconds between two time values. Alias for the standard library function os.difftime.</Description>
    <ArgumentList Name="time2">
      <Description>A time value (see time() for description) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="time1">
      <Description>A time value (see time() for description) (number) </Description>
    </ArgumentList>
    <ReturnList Name="seconds">
      <Description>Number of seconds between time2 and time1; equivalent to time2 - time1 on all current WoW clients (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="error" Priority="0" ImageType="Method">
    <Signature>error("message" [, level])</Signature>
    <Description>Causes a Lua error message</Description>
    <ArgumentList Name="message">
      <Description>An error message to be displayed (string) </Description>
    </ArgumentList>
    <ArgumentList Name="level">
      <Description>Level in the function stack at which the error message begins providing function information; e.g. 1 (the default, if omitted) to start at the position where error() was called, 2 to start at the function which called error(), 3 to start at the function which called that function, etc. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="exp" Priority="0" ImageType="Method">
    <Signature>exp = exp(x)</Signature>
    <Description>Returns the value of the exponential function for a number. Alias for the standard library function math.exp.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="exp">
      <Description>Value of the mathematical constant e (Euler's number) raised to the xth power (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="floor" Priority="0" ImageType="Method">
    <Signature>floor = floor(x)</Signature>
    <Description>Returns the largest integer smaller than or equal to a number. Alias for the standard library function math.floor.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="floor">
      <Description>Largest integer smaller than or equal to x (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="forceinsecure" Priority="0" ImageType="Method">
    <Signature>forceinsecure()</Signature>
    <Description>Causes the current execution path to continue outside the secure environment. Meaningless when called from outside of the secure environment.</Description>
  </WowApi>
  <WowApi Name="foreach" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="foreachi" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="format" Priority="0" ImageType="Method">
    <Signature>formatted = format("formatString", ...)</Signature>
    <Description>Returns a formatted string containing specified values. Alias for the standard library function string.format. This version, however, includes the positional argument specifiers from Lua 4.0.
Lua does not support the ANSI C formate specifiers *, l, L, n, p, and h but includes an extra specifier, q, which formats a string in a form suitable to be safely read back by the Lua interpreter: the string is written between double quotes, and all double quotes, newlines, embedded zeros, and backslashes in the string are correctly escaped when written.</Description>
    <ArgumentList Name="formatString">
      <Description>A string containing format specifiers as per the ANSI C printf function (string) </Description>
    </ArgumentList>
    <ArgumentList Name="...">
      <Description>A list of values to be included in the formatted string (list) </Description>
    </ArgumentList>
    <ReturnList Name="formatted">
      <Description>The formatted string (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="frexp" Priority="0" ImageType="Method">
    <Signature>m, e = frexp(x)</Signature>
    <Description>Returns the normalized fraction and base-2 exponent for a number. Alias for the standard library function math.frexp.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="m">
      <Description>A number whose absolute value is in the range [0.5, 1), or 0 if x is 0 (number) </Description>
    </ReturnList>
    <ReturnList Name="e">
      <Description>An integer, such that x = m * 2 ^ e (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="gcinfo" Priority="0" ImageType="Method">
    <Signature>count = gcinfo()</Signature>
    <Description>Returns the total Lua memory usage. Deprecated in Lua 5.1; use collectgarbage("count") instead.</Description>
    <ReturnList Name="count">
      <Description>Total Lua memory usage (in kilobytes) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="geterrorhandler" Priority="0" ImageType="Method">
    <Signature>handler = geterrorhandler()</Signature>
    <Description>Returns the current error handler function</Description>
    <ReturnList Name="handler">
      <Description>The current error handler (function) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="getfenv" Priority="0" ImageType="Method">
    <Signature>env = getfenv([f]) or getfenv([stackLevel])</Signature>
    <Description>Returns the environment for a function (or the global environment). If the environment has a __environment metatable, that value is returned instead.</Description>
    <ArgumentList Name="f">
      <Description>A function (function) </Description>
    </ArgumentList>
    <ArgumentList Name="stackLevel">
      <Description>Level of a function in the calling stack (number) </Description>
    </ArgumentList>
    <ReturnList Name="env">
      <Description>Table containing all variables in the function's environment, or the global environment if f or stackLevel is omitted (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="getglobal" Priority="0" ImageType="Method">
    <Signature>value = getglobal("name")</Signature>
    <Description>Returns the value of a global variable. Often used in the default UI in cases where several similar names are systematically constructed. Examples:
In a script attached to a frame template, getglobal(self:GetName().."Icon") can refer to the Texture whose name is defined in XML as $parentIcon.
Several sets of localized string tokens follow standard formats: e.g. getglobal("ITEM_QUALITY"..quality.."_DESC) returns the name for the numeric quality.
Equivalent to _G.name or _G["name"].</Description>
    <ArgumentList Name="name">
      <Description>Name of a global variable (string) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>Value of the given variable (value) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="getmetatable" Priority="0" ImageType="Method">
    <Signature>metatable = getmetatable(object)</Signature>
    <Description>Returns an object's metatable</Description>
    <ArgumentList Name="object">
      <Description>Any table or userdata object (value) </Description>
    </ArgumentList>
    <ReturnList Name="metatable">
      <Description>Contents of the object's __metatable field, or nil if the object has no metatable (value) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="getn" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="getprinthandler" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="gmatch" Priority="0" ImageType="Method">
    <Signature>iterator = gmatch("s", "pattern")</Signature>
    <Description>Returns an iterator function for finding pattern matches in a string. Alias for the standard library function string.gmatch.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="pattern">
      <Description>A regular expression pattern (string, pattern) </Description>
    </ArgumentList>
    <ReturnList Name="iterator">
      <Description>A function which, each time it is called, returns the next capture of pattern in the string s; always returns the whole string if pattern specifies no captures (function) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="gsub" Priority="0" ImageType="Method">
    <Signature>newString, numMatched = gsub("s", "pattern", "rep" [, maxReplaced]) or gsub("s", "pattern", repTable [, maxReplaced]) or gsub("s", "pattern", repFunc [, maxReplaced])</Signature>
    <Description>Returns a string in which occurrences of a pattern are replaced. Alias for the standard library function string.gsub.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="pattern">
      <Description>A regular expression pattern (string, pattern) </Description>
    </ArgumentList>
    <ArgumentList Name="rep">
      <Description>String with which to replace occurrences of pattern; may contain specifiers for numbered captures in the pattern (string) </Description>
    </ArgumentList>
    <ArgumentList Name="repTable">
      <Description>Table containing replacement strings; replacements are looked up using captured substrings as keys, or the entire match if pattern specifies no captures (table) </Description>
    </ArgumentList>
    <ArgumentList Name="repFunc">
      <Description>Function to supply replacement strings; called with captured substrings (or the entire match if pattern specifies no captures) as arguments (function) </Description>
    </ArgumentList>
    <ArgumentList Name="maxReplaced">
      <Description>Maximum number of replacements to be made (number) </Description>
    </ArgumentList>
    <ReturnList Name="newString">
      <Description>A copy of s in which occurrences of the pattern have been replaced as specified (string) </Description>
    </ReturnList>
    <ReturnList Name="numMatched">
      <Description>Number of matches found (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="hooksecurefunc" Priority="0" ImageType="Method">
    <Signature>hooksecurefunc([table,] "function", hookfunc)</Signature>
    <Description>Add a function to be called after execution of a secure function. Allows one to "post-hook" a secure function without tainting the original.
The original function will still be called, but the function supplied will be called after the original, with the same arguments. Return values from the supplied function are discarded. Note that there is no API to remove a hook from a function: any hooks applied will remain in place until the UI is reloaded.
Only allows hooking of functions named by a global variable; to hook a script handler on a Frame object, see Frame:HookScript().</Description>
    <ArgumentList Name="table">
      <Description>A table object that contains the function to be hooked (table) </Description>
    </ArgumentList>
    <ArgumentList Name="function">
      <Description>The name of the function to be hooked (string) </Description>
    </ArgumentList>
    <ArgumentList Name="hookfunc">
      <Description>The function to be called each time the original function is called (function) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ipairs" Priority="0" ImageType="Method">
    <Signature>iterator, t, index = ipairs(t)</Signature>
    <Description>Returns an iterator function for integer keys in a table. Return values are such that the construction
  for k,v in ipairs(t) do
    -- body
  end
will iterate over the pairs 1,t[1], 2,t[2], etc, up to the first integer key absent from the table.</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ReturnList Name="iterator">
      <Description>An iterator (function) </Description>
    </ReturnList>
    <ReturnList Name="t">
      <Description>The table provided (table) </Description>
    </ReturnList>
    <ReturnList Name="index">
      <Description>Always 0; used internally (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="issecure" Priority="0" ImageType="Method">
    <Signature>secure = issecure()</Signature>
    <Description>Returns whether the current execution path is secure. Meaningless when called from outside of the secure environment: always returns nil in such situations.</Description>
    <ReturnList Name="secure">
      <Description>1 if the current execution path is secure; otherwise nil (1nil) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="issecurevariable" Priority="0" ImageType="Method">
    <Signature>issecure, taint = issecurevariable([table,] "variable")</Signature>
    <Description>Returns whether a variable is secure (and if not, which addon tainted it)</Description>
    <ArgumentList Name="table">
      <Description>A table to be used when checking table elements (table) </Description>
    </ArgumentList>
    <ArgumentList Name="variable">
      <Description>The name of a variable to check. In order to check the status of a table element, you should specify the table, and then the key of the element (string) </Description>
    </ArgumentList>
    <ReturnList Name="issecure">
      <Description>1 if the variable is secure; otherwise nil (1nil) </Description>
    </ReturnList>
    <ReturnList Name="taint">
      <Description>Name of the addon that tainted the variable, or nil if the variable is secure (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ldexp" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="loadstring" Priority="0" ImageType="Method">
    <Signature>chunk, error = loadstring("s" [, "chunkname"])</Signature>
    <Description>Loads and compiles Lua source code</Description>
    <ArgumentList Name="s">
      <Description>A string containing Lua code (string) </Description>
    </ArgumentList>
    <ArgumentList Name="chunkname">
      <Description>Name for the loaded chunk; used in error messages and debug information (string) </Description>
    </ArgumentList>
    <ReturnList Name="chunk">
      <Description>A function which can be run to execute the provided code, or nil if the code could not be compiled (function) </Description>
    </ReturnList>
    <ReturnList Name="error">
      <Description>Error message, if the code could not be compiled (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="log" Priority="0" ImageType="Method">
    <Signature>naturalLog = log(x)</Signature>
    <Description>Returns the natural logarithm of a number. Alias for the standard library function math.log.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="naturalLog">
      <Description>The natural logarithm of x (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="log10" Priority="0" ImageType="Method">
    <Signature>base10log = log10(x)</Signature>
    <Description>Returns the base-10 logarithm of a number. Alias for the standard library function math.log10.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="base10log">
      <Description>The base-10 logarithm of x (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="max" Priority="0" ImageType="Method">
    <Signature>maximum = max(...)</Signature>
    <Description>Returns the greatest of a list of numbers. Alias for the standard library function math.max.</Description>
    <ArgumentList Name="...">
      <Description>A list of numbers (list) </Description>
    </ArgumentList>
    <ReturnList Name="maximum">
      <Description>The highest number among all arguments (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="message" Priority="0" ImageType="Method">
    <Signature>message("text")</Signature>
    <Description>Shows a message box containing the given text</Description>
    <ArgumentList Name="text">
      <Description>Text to show in a message window (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="min" Priority="0" ImageType="Method">
    <Signature>maximum = min(...)</Signature>
    <Description>Returns the least of a list of numbers. Alias for the standard library function math.min.</Description>
    <ArgumentList Name="...">
      <Description>A list of numbers (list) </Description>
    </ArgumentList>
    <ReturnList Name="maximum">
      <Description>The lowest number among all arguments (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="mod" Priority="0" ImageType="Method">
    <Signature>remainder = mod(x, y)</Signature>
    <Description>Returns the remainder from division of two numbers. Alias for the standard library function math.fmod.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ArgumentList Name="y">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="remainder">
      <Description>Remainder of the division of x by y that rounds the quotient towards zero (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="newproxy" Priority="0" ImageType="Method">
    <Signature>userdata = newproxy(boolean) or newproxy(userdata)</Signature>
    <Description>Creates a zero-length userdata with an optional metatable.. newproxy is a experimental, undocumented and unsupported function in the Lua base library. It can be used to create a zero-length userdata, with a optional proxy.
This function allows you to bypass the table type restriction on setmetatable, and thus create just a metatable. One of the main benefits from doing this is that you don't have to take the full overhead of creating a dummy table, and it's the only object that honors the metamethod __len.</Description>
    <ArgumentList Name="boolean">
      <Description>Controls if the returned userdata should have a metatable or not. (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="userdata">
      <Description>Needs to be a proxy. The metatable will be shared between the proxies. (userdata) </Description>
    </ArgumentList>
    <ReturnList Name="userdata">
      <Description>A zero-length user-data object. (userdata) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="next" Priority="0" ImageType="Method">
    <Signature>nextKey, nextValue = next(t [, key])</Signature>
    <Description>Returns the next key/value pair in a table</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key in the table (value) </Description>
    </ArgumentList>
    <ReturnList Name="nextKey">
      <Description>The next key in the table t (value) </Description>
    </ReturnList>
    <ReturnList Name="nextValue">
      <Description>Value associated with the next key in the table t (value) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="pairs" Priority="0" ImageType="Method">
    <Signature>iterator, t, index = pairs(t)</Signature>
    <Description>Returns an iterator function for a table. Return values are such that the construction
  for k,v in pairs(t)
    -- body
  end
will iterate over all key/value pairs in the table.</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ReturnList Name="iterator">
      <Description>The next() function (function) </Description>
    </ReturnList>
    <ReturnList Name="t">
      <Description>The table provided (table) </Description>
    </ReturnList>
    <ReturnList Name="index">
      <Description>Always nil; used internally (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="pcall" Priority="0" ImageType="Method">
    <Signature>status, ... = pcall(f, ...)</Signature>
    <Description>Executes a function in protected mode. When running a function in protected mode, any errors do not propagate beyond the function (i.e. they do not stop all execution and call the default error handler).</Description>
    <ArgumentList Name="f">
      <Description>A function (function) </Description>
    </ArgumentList>
    <ArgumentList Name="...">
      <Description>Arguments to be passed to the function (list) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>True if the function succeeded without errors; false otherwise (boolean) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>If status is false, the error message produced by the function; if status is true, the return values from the function (list or string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="print" Priority="0" ImageType="Method">
    <Signature>print(...)</Signature>
    <Description>Outputs a list of values (in the main chat window by default).
The default print handler prints all values passed to it, separated by spaces, to the default chat frame.
Values are passed through tostring(), so only number and string values are output in a literal form: tables, functions and userdata are output as a memory address preceded by their type. This behavior can be customized by using setprinthandler() to designate an alternate function for output.</Description>
    <ArgumentList Name="...">
      <Description>A list of values to be output (list) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="rad" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="random" Priority="0" ImageType="Method">
    <Signature>randomNum = random([m [, n]])</Signature>
    <Description>Generates a pseudo-random number. Alias for the standard library function math.random.</Description>
    <ArgumentList Name="m">
      <Description>First limit for randomly generated numbers (number) </Description>
    </ArgumentList>
    <ArgumentList Name="n">
      <Description>Second limit for randomly generated numbers (number) </Description>
    </ArgumentList>
    <ReturnList Name="randomNum">
      <Description>If called without arguments, a uniform pseudo-random real number in the range [0,1); if m is specified, a uniform pseudo-random integer in the range [1,m]; if both m and n are specified, a uniform pseudo-random integer in the range [m,n] (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="rawequal" Priority="0" ImageType="Method">
    <Signature>isEqual = rawequal(v1, v2)</Signature>
    <Description>Returns whether two values are equal without invoking any metamethods</Description>
    <ArgumentList Name="v1">
      <Description>Any value (value) </Description>
    </ArgumentList>
    <ArgumentList Name="v2">
      <Description>Any value (function) </Description>
    </ArgumentList>
    <ReturnList Name="isEqual">
      <Description>True if the values are equal; false otherwise (boolean) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="rawget" Priority="0" ImageType="Method">
    <Signature>value = rawget(t, key)</Signature>
    <Description>Returns the real value associated with a key in a table without invoking any metamethods</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key in the table (value) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>Value of t[key] (value) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="rawset" Priority="0" ImageType="Method">
    <Signature>rawset(t, key, value)</Signature>
    <Description>Sets the value associated with a key in a table without invoking any metamethods</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ArgumentList Name="key">
      <Description>A key in the table (cannot be nil) (value) </Description>
    </ArgumentList>
    <ArgumentList Name="value">
      <Description>New value to set for the key (value) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="scrub" Priority="0" ImageType="Method">
    <Signature>... = scrub(...)</Signature>
    <Description>Replaces non-simple values in a list with nil.
All simple values (strings, numbers, and booleans) are passed from the input list to the output list unchanged. Non-simple values (tables, functions, threads, and userdata) are replaced by nil in the output list.</Description>
    <ArgumentList Name="...">
      <Description>A list of values (list) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>The list of input values, with all non-simple values replaced by nil (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="securecall" Priority="0" ImageType="Method">
    <Signature>... = securecall(function, ...)</Signature>
    <Description>Calls a function without tainting the execution path. Meaningless when called from outside of the secure environment.
Used in Blizzard code to call functions which may be tainted or operate on potentially tainted variables. For example, consider the function CloseSpecialWindows, which iterates through the table UISpecialFrames and hides any frames named therein. Addon authors may put the names of their frames in that table to make them automatically close when the user presses the ESC key, but this taints UISpecialFrames. Were the default UI to then call CloseSpecialWindows normally, every frame in UISpecialFrames would become tainted, which could later lead to errors when handlers on those frames call protected functions.
Instead, the default UI uses securecall(CloseSpecialWindows): within CloseSpecialWindows the execution path may become tainted, but afterward the environment remains secure.</Description>
    <ArgumentList Name="function">
      <Description>Function to be called (function) </Description>
    </ArgumentList>
    <ArgumentList Name="...">
      <Description>Arguments to the function (list) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>Values returned after calling the function (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="select" Priority="0" ImageType="Method">
    <Signature>... = select(index, ...) or select("#", ...)</Signature>
    <Description>Returns one or more values from a list (...), or the number of values in a list</Description>
    <ArgumentList Name="index">
      <Description>Index of a value in the list (number) </Description>
    </ArgumentList>
    <ArgumentList Name="#">
      <Description>The string "#" (string) </Description>
    </ArgumentList>
    <ArgumentList Name="...">
      <Description>A list of values (list) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>If called with a first argument of "#", the number of values in the list; otherwise, all values in the list starting with the value at position index (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="seterrorhandler" Priority="0" ImageType="Method">
    <Signature>seterrorhandler(errHandler)</Signature>
    <Description>Changes the error handler to a specified function. The error handler is called by Lua's error() function, which in turn is called whenever a Lua error occurs. WoW's default error handler displays the error message, a stack trace and information about the local variables for the function. This dialog will only be shown if the "Show Lua errors" option is enabled in Interface Options.</Description>
    <ArgumentList Name="errHandler">
      <Description>A function to use as the error handler (function) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="setfenv" Priority="0" ImageType="Method">
    <Signature>f = setfenv([f,] t) or setfenv([stackLevel,] t)</Signature>
    <Description>Sets the environment to be used by a function. If the environment has a __environment metatable, this function will error.</Description>
    <ArgumentList Name="f">
      <Description>A function (function) </Description>
    </ArgumentList>
    <ArgumentList Name="stackLevel">
      <Description>Level of a function in the calling stack, or 0 to set the global environment (number) </Description>
    </ArgumentList>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ReturnList Name="f">
      <Description>The input function f (function) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="setglobal" Priority="0" ImageType="Method">
    <Signature>setglobal("name", value)</Signature>
    <Description>Sets a global variable to a specified value. Allows setting the value of a global variable in contexts where its name might be overridden by that of a local variable; i.e. setglobal(name, value) is equivalent to _G.name = value or _G["name"] = value.</Description>
    <ArgumentList Name="name">
      <Description>Name of a global variable (string) </Description>
    </ArgumentList>
    <ArgumentList Name="value">
      <Description>New value for the variable (value) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="setmetatable" Priority="0" ImageType="Method">
    <Signature>t = setmetatable(t, metatable)</Signature>
    <Description>Sets the metatable for a table</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ArgumentList Name="metatable">
      <Description>A metatable for the table t, or nil to remove an existing metatable (table) </Description>
    </ArgumentList>
    <ReturnList Name="t">
      <Description>The input table t (table) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="setprinthandler" Priority="0" ImageType="Method">
    <Signature>setprinthandler(printHandler)</Signature>
    <Description>Sets a new function to be used for print() output.
The print handler is called by the print(...) function, with all arguments passed along.</Description>
    <ArgumentList Name="printHandler">
      <Description>The function to use as the print handler (function) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="sin" Priority="0" ImageType="Method">
    <Signature>sin()</Signature>
    <Description>Alternative to math.sin, using degrees instead of radians</Description>
  </WowApi>
  <WowApi Name="sort" Priority="0" ImageType="Method">
    <Signature>sort(table [, comparator])</Signature>
    <Description>Sorts a table. Alias for the standard library function table.sort.</Description>
    <ArgumentList Name="table">
      <Description>A table (number) </Description>
    </ArgumentList>
    <ArgumentList Name="comparator">
      <Description>A function to compare table elements during the sort; takes two arguments and returns true if the first argument should be ordered before the second in the sorted table; equivalent to function(a,b) return a &lt; b end if omitted (function) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="sqrt" Priority="0" ImageType="Method">
    <Signature>root = sqrt(x)</Signature>
    <Description>Returns the square root of a number. Alias for the standard library function math.sqrt.</Description>
    <ArgumentList Name="x">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="root">
      <Description>The square root of x (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strbyte" Priority="0" ImageType="Method">
    <Signature>value, ... = strbyte("s" [, firstChar [, lastChar]])</Signature>
    <Description>Returns the numeric code for one or more characters in a string. Alias for the standard library function string.byte.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="firstChar">
      <Description>Position of a character in the string (can be negative to count backwards from the end of the string); defaults to 1 if omitted (number) </Description>
    </ArgumentList>
    <ArgumentList Name="lastChar">
      <Description>Position of a later character in the string (can be negative to count backwards from the end of the string); defaults to firstChar if omitted (number) </Description>
    </ArgumentList>
    <ReturnList Name="value">
      <Description>Numeric code for the character at position firstChar in the string (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>A list of numbers, each the numeric codes of additional characters in the string if lastChar specifies a position later in the string than firstChar (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strchar" Priority="0" ImageType="Method">
    <Signature>s = strchar(n [, ...])</Signature>
    <Description>Returns the character(s) for one or more numeric codes. Alias for the standard library function string.char.</Description>
    <ArgumentList Name="n">
      <Description>An integer (number) </Description>
    </ArgumentList>
    <ArgumentList Name="...">
      <Description>Additional integers (number) </Description>
    </ArgumentList>
    <ReturnList Name="s">
      <Description>A string containing the character(s) for the given numeric code(s) (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strconcat" Priority="0" ImageType="Method">
    <Signature>result = strconcat("...")</Signature>
    <Description>Joins a list of strings (with no separator). Equivalent to strjoin("", ...). If no strings are provided, returns the empty string ("").</Description>
    <ArgumentList Name="...">
      <Description>A list of strings to concatenate (string) </Description>
    </ArgumentList>
    <ReturnList Name="result">
      <Description>The concatenated string (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strfind" Priority="0" ImageType="Method">
    <Signature>start, end, ... = strfind("s", "pattern" [, init [, plain]])</Signature>
    <Description>Returns information about matches for a pattern in a string. Alias for the standard library function string.find.
Returns nil if no matches are found.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="pattern">
      <Description>A regular expression pattern (string, pattern) </Description>
    </ArgumentList>
    <ArgumentList Name="init">
      <Description>Initial position in the string s at which to begin the search; defaults to 1 if omitted (number) </Description>
    </ArgumentList>
    <ArgumentList Name="plain">
      <Description>True to perform a simple substring search (i.e. considering pattern only as a literal string, not a regular expression); false or omitted otherwise (boolean) </Description>
    </ArgumentList>
    <ReturnList Name="start">
      <Description>Character position in s at which the first match begins (number) </Description>
    </ReturnList>
    <ReturnList Name="end">
      <Description>Character position in s at which the first match ends (number) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Captured substrings from s, if pattern specifies captures (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strjoin" Priority="0" ImageType="Method">
    <Signature>text = strjoin("sep", ...)</Signature>
    <Description>Joins a list of strings together with a given separator. If given a list of strings not already in a table, this function can be used instead of table.concat for better performance.
Also available as string.join (though not provided by the Lua standard library).</Description>
    <ArgumentList Name="sep">
      <Description>A separator to insert between joined strings (string) </Description>
    </ArgumentList>
    <ArgumentList Name="...">
      <Description>A list of strings to be joined together (list) </Description>
    </ArgumentList>
    <ReturnList Name="text">
      <Description>The list of strings joined together with the given separator string (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strlen" Priority="0" ImageType="Method">
    <Signature>length = strlen("s")</Signature>
    <Description>Returns the number of characters in a string. Alias for the standard library function string.len.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="strlenutf8" Priority="0" ImageType="Method">
    <Signature>length = strlenutf8("string")</Signature>
    <Description>Returns the length of a string, taking UTF-8 multi-byte characters into account</Description>
    <ArgumentList Name="string">
      <Description>The string to query. (string) </Description>
    </ArgumentList>
    <ReturnList Name="length">
      <Description>The length of the given string, taking UTF-8 multi-byte characters into account. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strlower" Priority="0" ImageType="Method">
    <Signature>lowerCase = strlower("s")</Signature>
    <Description>Returns a copy of a string with all uppercase letters converted to lowercase. Alias for the standard library function string.lower</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ReturnList Name="lowerCase">
      <Description>A copy of the string s with all uppercase letters converted to lowercase (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strmatch" Priority="0" ImageType="Method">
    <Signature>match, ... = strmatch("s", "pattern")</Signature>
    <Description>Returns the matches for a for a pattern in a string. Alias for the standard library function string.match.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="pattern">
      <Description>A regular expression pattern (string, pattern) </Description>
    </ArgumentList>
    <ReturnList Name="match">
      <Description>First substring of s matching pattern, or the first capture if pattern specifies captures; nil if no match is found (string) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>Additional captures found, if pattern specifies multiple captures (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strrep" Priority="0" ImageType="Method">
    <Signature>repeated = strrep("s", n)</Signature>
    <Description>Returns a string produced by a number of repetitions of another string. Alias for the standard library function string.rep.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="n">
      <Description>A number (number) </Description>
    </ArgumentList>
    <ReturnList Name="repeated">
      <Description>The concatenation of n copies of the string s (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strrev" Priority="0" ImageType="Method">
    <Signature>s = strrev("s")</Signature>
    <Description>Returns the reverse of a string. Alias for the standard library function string.reverse.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ReturnList Name="s">
      <Description>A string containing the characters of string s in reverse order (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strsplit" Priority="0" ImageType="Method">
    <Signature>... = strsplit("sep", "text", limit)</Signature>
    <Description>Splits a string based on another seperator string. Also available as string.split (though not provided by the Lua standard library).</Description>
    <ArgumentList Name="sep">
      <Description>The seperator string to use (string) </Description>
    </ArgumentList>
    <ArgumentList Name="text">
      <Description>The text to split (string) </Description>
    </ArgumentList>
    <ArgumentList Name="limit">
      <Description>The maximum number of pieces to split the string into (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of strings, split from the input text based on the seperator string (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strsub" Priority="0" ImageType="Method">
    <Signature>s = strsub("s", firstChar [, lastChar])</Signature>
    <Description>Returns a substring of a string. Alias for the standard library function string.sub.</Description>
    <ArgumentList Name="s">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="firstChar">
      <Description>Position of a character in the string (can be negative to count backwards from the end of the string) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="lastChar">
      <Description>Position of a later character in the string (can be negative to count backwards from the end of the string); defaults to -1 if omitted (number) </Description>
    </ArgumentList>
    <ReturnList Name="s">
      <Description>The substring of s starting at the character firstChar and ending with the character lastChar (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strtrim" Priority="0" ImageType="Method">
    <Signature>text = strtrim("str" [, "trimChars"])</Signature>
    <Description>Trims leading and trailing characters (whitespace by default) from a string. Also available as string.trim (though not provided by the Lua standard library).</Description>
    <ArgumentList Name="str">
      <Description>A string to trim (string) </Description>
    </ArgumentList>
    <ArgumentList Name="trimChars">
      <Description>A string listing the characters to be trimmed (e.g. "[]{}()" to trim leading and trailing brackets, braces, and parentheses); if nil or omitted, whitespace characters (space, tab, newline, etc) are trimmed (string) </Description>
    </ArgumentList>
    <ReturnList Name="text">
      <Description>The trimmed string (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="strupper" Priority="0" ImageType="Method">
    <Signature>lowerCase = strupper("str")</Signature>
    <Description>Returns a copy of a string with all lowercase letters converted to uppercase. Alias for the standard library function string.upper.</Description>
    <ArgumentList Name="str">
      <Description>A string (string) </Description>
    </ArgumentList>
    <ReturnList Name="lowerCase">
      <Description>A copy of the string s with all lowercase letters converted to uppercase (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="tContains" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="tDelete" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="tan" Priority="0" ImageType="Method">
    <Signature>tan()</Signature>
    <Description>Alternative to math.tan, using degrees instead of radians</Description>
  </WowApi>
  <WowApi Name="time" Priority="0" ImageType="Method">
    <Signature>t = time([timeDesc])</Signature>
    <Description>Returns the numeric time value for a described date/time (or the current time). Alias for the standard library function os.time.
According to the Lua manual, the returned value may vary across different systems; however, the Lua libraries included with current WoW clients on both Mac and Windows share the same implementation.
For higher-precision time measurements not convertible to a date, see GetTime().</Description>
    <ArgumentList Name="timeDesc">
      <Description>Table describing a date and time, as returned by date("*t"); if omitted, uses the current time (table) </Description>
    </ArgumentList>
    <ReturnList Name="t">
      <Description>Number of seconds elapsed since midnight, January 1, 1970 UTC (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="tinsert" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="tonumber" Priority="0" ImageType="Method">
    <Signature>numValue = tonumber(x [, base])</Signature>
    <Description>Returns the numeric value of a string</Description>
    <ArgumentList Name="x">
      <Description>A string or number (value) </Description>
    </ArgumentList>
    <ArgumentList Name="base">
      <Description>Base in which to interpret the numeral (integer between 2 and 36); letters 'A-Z' can be used to denote place values 10 or above in bases greater than 10; defaults to 10 if omitted (number) </Description>
    </ArgumentList>
    <ReturnList Name="numValue">
      <Description>Numeric value of x in the given base, or nil if the value cannot be converted to a number (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="tostring" Priority="0" ImageType="Method">
    <Signature>stringValue = tostring(value)</Signature>
    <Description>Returns a string representation of a value</Description>
    <ArgumentList Name="value">
      <Description>Any value (value) </Description>
    </ArgumentList>
    <ReturnList Name="stringValue">
      <Description>String representation of the given value (if value is an object with a __tostring metamethod, that method is used to produce the string representation) (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="tostringall" Priority="0" ImageType="Method">
    <Signature>... = tostringall(...)</Signature>
    <Description>Alternative to tostring() for bulk conversion of values.
Using tostringall() instead of tostring() when converting a large number of values may result in better performance.</Description>
    <ArgumentList Name="...">
      <Description>A list of values (list) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>A list of string representations of the values passed in (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="tremove" Priority="0" ImageType="Method">
    <Signature>tremove(table [, position])</Signature>
    <Description>Removes an element from a table. Alias for the standard library function table.remove.</Description>
    <ArgumentList Name="table">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ArgumentList Name="position">
      <Description>Index in the table from which to remove the value; if omitted, defaults to #table (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="type" Priority="0" ImageType="Method">
    <Signature>typeString = type(v)</Signature>
    <Description>Returns a string describing the data type of a value</Description>
    <ArgumentList Name="v">
      <Description>Any value (value) </Description>
    </ArgumentList>
    <ReturnList Name="typeString">
      <Description>A string describing the type of value v (string)
boolean - A boolean value (true or false)
function - A function
nil - The special value nil
number - A numeric value
string - A string
table - A table
thread - A coroutine thread
userdata - Data external to the Lua environment (e.g. the main element of a Frame object)</Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="unpack" Priority="0" ImageType="Method">
    <Signature>... = unpack(t [, i [, j]])</Signature>
    <Description>Returns the list of elements in a table. Equivalent to
  return t[i], t[i+1], ... t[j]
for an arbitrary number of elements.</Description>
    <ArgumentList Name="t">
      <Description>A table (table) </Description>
    </ArgumentList>
    <ArgumentList Name="i">
      <Description>A numeric index to the table; defaults to 1 if omitted (number) </Description>
    </ArgumentList>
    <ArgumentList Name="j">
      <Description>A numeric index to the table; defaults to #t if omitted (number) </Description>
    </ArgumentList>
    <ReturnList Name="...">
      <Description>The list of values in the table between indices i and j (list) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="wipe" Priority="0" ImageType="Method">
    <Description>This function is not yet documented</Description>
  </WowApi>
  <WowApi Name="xpcall" Priority="0" ImageType="Method">
    <Signature>status, ... = xpcall(f, err)</Signature>
    <Description>Executes a function in protected mode with a custom error handler</Description>
    <ArgumentList Name="f">
      <Description>A function (function) </Description>
    </ArgumentList>
    <ArgumentList Name="err">
      <Description>Error handler function to be used should f cause an error (function) </Description>
    </ArgumentList>
    <ReturnList Name="status">
      <Description>True if the function succeeded without errors; false otherwise (boolean) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>If status is false, the error message produced by the function; if status is true, the return values from the function (list or string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="ACHIEVEMENT_EARNED" Priority="0" ImageType="Event">
    <Signature>(achievementID)</Signature>
    <Description>Fires when the player earns an achievement</Description>
    <ArgumentList Name="achievementID">
      <Description>The ID of the achievement earned (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ACTIONBAR_HIDEGRID" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an item, spell or other entity that can be placed into an action bar slot is removed from the cursor. In the default UI, this event causes the grid of empty action bar slots to be hidden. (This grid only appears when something that can be dragged to an action bar slot is picked up, unless the "Always show action bars" option is enabled.)</Description>
  </WowApi>
  <WowApi Name="ACTIONBAR_PAGE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the main action bar changes pages</Description>
  </WowApi>
  <WowApi Name="ACTIONBAR_SHOWGRID" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an item, spell or other entity that can be placed into an action bar slot is picked up onto the cursor. In the default UI, this event causes the grid of empty action bar slots to be shown. (This grid only appears when something that can be dragged to an action bar slot is picked up, unless the "Always show action bars" option is enabled.)</Description>
  </WowApi>
  <WowApi Name="ACTIONBAR_SLOT_CHANGED" Priority="0" ImageType="Event">
    <Signature>(slot)</Signature>
    <Description>Fires when the contents of an action bar slot change</Description>
    <ArgumentList Name="slot">
      <Description>The action id of the slot that needs to be updated or 0 if all slots need to be updated. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ACTIONBAR_UPDATE_COOLDOWN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the cooldown for an action bar item begins or ends</Description>
  </WowApi>
  <WowApi Name="ACTIONBAR_UPDATE_STATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the state of an action bar item changes. State changes include the action becoming the current or active action.</Description>
  </WowApi>
  <WowApi Name="ACTIONBAR_UPDATE_USABLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an action becomes usable or unusable. For example, an action may become unusable if it contains a spell for which the player does not have enough mana.</Description>
  </WowApi>
  <WowApi Name="ACTIVE_TALENT_GROUP_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ADDON_ACTION_BLOCKED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a non-Blizzard addon attempts to use a protected API</Description>
  </WowApi>
  <WowApi Name="ADDON_ACTION_FORBIDDEN" Priority="0" ImageType="Event">
    <Signature>("culprit")</Signature>
    <Description>Fires when a non-Blizzard addon attempts to use a protected API. In the default UI, this event triggers a dialog box providing the name of the addon and offering to disable it and reload the UI.</Description>
    <ArgumentList Name="culprit">
      <Description>The name of the addon that called the forbidden function (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ADDON_LOADED" Priority="0" ImageType="Event">
    <Signature>("name")</Signature>
    <Description>Fires when an addon and its saved variables are loaded. Fires once for each addon (i.e. an addon loaded early in sequence will see ADDON_LOADED events for all addons loaded later).</Description>
    <ArgumentList Name="name">
      <Description>The name of the addon that has been loaded (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ARCHAEOLOGY_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the archeology panel is closed.</Description>
  </WowApi>
  <WowApi Name="ARCHAEOLOGY_TOGGLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the archeology panel is opened or closed.</Description>
  </WowApi>
  <WowApi Name="AREA_SPIRIT_HEALER_IN_RANGE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player enters into the area of effect of a spirit healer that periodically resurrects nearby player units. Such spirit healers are found in Battlegrounds and certain other PvP areas.</Description>
  </WowApi>
  <WowApi Name="AREA_SPIRIT_HEALER_OUT_OF_RANGE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player enters leaves the area of effect of a spirit healer that periodically resurrects nearby player units. Such spirit healers are found in Battlegrounds and certain other PvP areas.</Description>
  </WowApi>
  <WowApi Name="ARENA_OPPONENT_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the availability of information about an arena opponent changes</Description>
  </WowApi>
  <WowApi Name="ARENA_PREP_OPPONENT_SPECIALIZATIONS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the availability of information about an arena opponent specialization change. Used by pre-arena specialization detection UI.</Description>
  </WowApi>
  <WowApi Name="ARENA_SEASON_WORLD_STATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the arena season changes</Description>
  </WowApi>
  <WowApi Name="ARENA_TEAM_INVITE_REQUEST" Priority="0" ImageType="Event">
    <Signature>("source", "team")</Signature>
    <Description>Fires when the player is invited to join an arena team</Description>
    <ArgumentList Name="source">
      <Description>The name of the player that invited you to join a team. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="team">
      <Description>The name of the team that you have been invited to join. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ARENA_TEAM_ROSTER_UPDATE" Priority="0" ImageType="Event">
    <Signature>(unknown)</Signature>
    <Description>Fires when roster detail information for one of the player's arena teams becomes available</Description>
    <ArgumentList Name="unknown">
      <Description>Appears to be a boolean value to determin if updated information is available or not. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ARENA_TEAM_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player joins or leaves an arena team</Description>
  </WowApi>
  <WowApi Name="ARTIFACT_COMPLETE" Priority="0" ImageType="Event">
    <Signature>("name")</Signature>
    <Description>Fires when an artifact is completed (solved project)</Description>
    <ArgumentList Name="name">
      <Description>Name of the completed artifact (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ARTIFACT_DIG_SITE_UPDATED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a new archaeology digsite appears on the map, or an old one disappears</Description>
  </WowApi>
  <WowApi Name="ARTIFACT_HISTORY_READY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the created artifact listing data of the player becomes available.. This event fires in response to a call to the RequestArtifactCompletionHistory function.</Description>
  </WowApi>
  <WowApi Name="ARTIFACT_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the artifact display should be updated. This fires when a keystone is added or removed to a project or when the project is solved.</Description>
  </WowApi>
  <WowApi Name="AUCTION_BIDDER_LIST_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information becomes available or changes for the list of auctions bid on by the player </Description>
  </WowApi>
  <WowApi Name="AUCTION_HOUSE_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with an auction house</Description>
  </WowApi>
  <WowApi Name="AUCTION_HOUSE_DISABLED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the server refuses to give the player access to the auction house because it is disabled</Description>
  </WowApi>
  <WowApi Name="AUCTION_HOUSE_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with an auction house</Description>
  </WowApi>
  <WowApi Name="AUCTION_ITEM_LIST_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the information becomes available for the list of auction browse/search results</Description>
  </WowApi>
  <WowApi Name="AUCTION_MULTISELL_FAILURE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an auction house multisell could not complete for any reason </Description>
  </WowApi>
  <WowApi Name="AUCTION_MULTISELL_START" Priority="0" ImageType="Event">
    <Signature>(amount)</Signature>
    <Description>Fires when the player starts a multisell in the auction house</Description>
    <ArgumentList Name="amount">
      <Description>Amount of items in total to put on the auction house (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AUCTION_MULTISELL_UPDATE" Priority="0" ImageType="Event">
    <Signature>(createdAmount, amount)</Signature>
    <Description>Fires when one of the auctions in an auction house multisell has successfully been created</Description>
    <ArgumentList Name="createdAmount">
      <Description>Amount of auctions that have successfully been created (number) </Description>
    </ArgumentList>
    <ArgumentList Name="amount">
      <Description>Amount of auctions to create in total (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AUCTION_OWNED_LIST_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information becomes available or changes for the list of auctions placed by the player</Description>
  </WowApi>
  <WowApi Name="AUTOEQUIP_BIND_CONFIRM" Priority="0" ImageType="Event">
    <Signature>(slot)</Signature>
    <Description>Fires when the player attempts to equip an item which will become soulbound in the process</Description>
    <ArgumentList Name="slot">
      <Description>The slot of the item that you are attempting to equip. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AUTOFOLLOW_BEGIN" Priority="0" ImageType="Event">
    <Signature>(following)</Signature>
    <Description>Fires when the player starts following another character</Description>
    <ArgumentList Name="following">
      <Description>The unit that you are following. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="AUTOFOLLOW_END" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player stops following another character</Description>
  </WowApi>
  <WowApi Name="BAG_CLOSED" Priority="0" ImageType="Event">
    <Signature>(bagID)</Signature>
    <Description>Fires when one of the player's containers is closed</Description>
    <ArgumentList Name="bagID">
      <Description>The ID of the bag that closed. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BAG_OPEN" Priority="0" ImageType="Event">
    <Signature>(bagID)</Signature>
    <Description>Fires when one of the player's containers is opened</Description>
    <ArgumentList Name="bagID">
      <Description>The ID of the bag that opened. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BAG_UPDATE" Priority="0" ImageType="Event">
    <Signature>(bagID)</Signature>
    <Description>Fires when the contents of one of the player's containers change. Container contents may change due to obtaining an item, consuming an item, moving an item between or within bags, etc. Note that containers also include the keyring, bank and bank bags.
Fires many times (once for each slot in each container) during the login / UI load process. An addon which does extensive processing for this event should register it only after PLAYER_ENTERING_WORLD has fired if they are not interested in processing each event individually during the load process.</Description>
    <ArgumentList Name="bagID">
      <Description>The id of the bag that is receiving an update. (number, containerID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BAG_UPDATE_COOLDOWN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BAG_UPDATE_DELAYED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BANKFRAME_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a bank</Description>
  </WowApi>
  <WowApi Name="BANKFRAME_OPENED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a bank</Description>
  </WowApi>
  <WowApi Name="BARBER_SHOP_APPEARANCE_APPLIED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires after changes to the player's appearance have been purchased at a barber shop. Both BARBER_SHOP_SUCCESS and this event fire when purchasing an appearance change; the former fires first (causing the default UI to play a sound effect), and this event fires afterward to update the state of the barber shop controls and cost indicator.</Description>
  </WowApi>
  <WowApi Name="BARBER_SHOP_CLOSE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a barber shop</Description>
  </WowApi>
  <WowApi Name="BARBER_SHOP_OPEN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a barber shop</Description>
  </WowApi>
  <WowApi Name="BARBER_SHOP_SUCCESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires immediately when changes to the player's appearance have been purchased at a barber shop. Both this event and BARBER_SHOP_APPEARANCE_APPLIED fire when purchasing an appearance change; this event fires first (causing the default UI to play a sound effect), and the other fires afterward to update the state of the barber shop controls and cost indicator.</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELDS_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the UI is no longer available for queueing for an arena or specific battleground instance</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELDS_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the UI becomes available for queueing for an arena or specific battleground instance</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_EJECTED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player has been removed from a queued world PvP zone (e.g. Wintergrasp)</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_EJECT_PENDING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player will be removed from or cannot yet enter a queued world PvP zone (e.g. Wintergrasp)</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_ENTERED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player has been accepted into a queued world PvP zone (e.g. Wintergrasp)</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_ENTRY_INVITE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is invited to enter a queued world PvP zone (e.g. Wintergrasp)</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_QUEUE_INVITE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is invited to queue for a world PvP zone (e.g. Wintergrasp)</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_MGR_STATE_CHANGE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's state changes in the queue for a world PvP zone (e.g. Wintergrasp)</Description>
  </WowApi>
  <WowApi Name="BATTLEFIELD_QUEUE_TIMEOUT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a battleground queue expires</Description>
  </WowApi>
  <WowApi Name="BATTLETAG_INVITE_SHOW" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BATTLE_PET_CURSOR_CLEAR" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BILLING_NAG_DIALOG" Priority="0" ImageType="Event">
    <Signature>(remaining)</Signature>
    <Description>Fires when a message should be shown about the player's paid game time expiring soon</Description>
    <ArgumentList Name="remaining">
      <Description>The number in minuites until your play time runs out. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BIND_ENCHANT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to an enchant an item which will become soulbound in the process</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_BID_RESULT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_CLOSE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_ITEM_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_OPEN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_OUTBID" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_UNAVAILABLE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BLACK_MARKET_WON" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_BLOCK_FAILED_TOO_MANY" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_BLOCK_LIST_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_CLOSED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_CREATE_FAILED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_CREATE_SUCCEEDED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_INVITE_FAILED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_INVITE_SUCCEEDED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_JOINED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_LEFT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_MEMBER_JOINED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_MEMBER_LEFT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_MEMBER_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_MESSAGE_BLOCKED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_CHANNEL_MESSAGE_UNDELIVERABLE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CHAT_WHISPER_UNDELIVERABLE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_CONNECTED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player connects to Battle.net</Description>
  </WowApi>
  <WowApi Name="BN_CUSTOM_MESSAGE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's Battle.net custom message (broadcast) is changed</Description>
  </WowApi>
  <WowApi Name="BN_CUSTOM_MESSAGE_LOADED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_DISCONNECTED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player disconnects from Battle.net</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_ACCOUNT_OFFLINE" Priority="0" ImageType="Event">
    <Signature>(presenceID)</Signature>
    <Description>Fires when one of your RealID friends logs off</Description>
    <ArgumentList Name="presenceID">
      <Description>You can send this to BNGetFriendInfoByID (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BN_FRIEND_ACCOUNT_ONLINE" Priority="0" ImageType="Event">
    <Signature>(presenceID)</Signature>
    <Description>Fires when one of your RealID friends log on</Description>
    <ArgumentList Name="presenceID">
      <Description>You can send this to BNGetFriendInfoByID (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BN_FRIEND_INFO_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_INVITE_ADDED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_INVITE_LIST_INITIALIZED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_INVITE_REMOVED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_INVITE_SEND_RESULT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_LIST_SIZE_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_TOON_OFFLINE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_FRIEND_TOON_ONLINE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_INFO_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_MATURE_LANGUAGE_FILTER" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires whenever the battle.net mature language filter setting is changed.</Description>
  </WowApi>
  <WowApi Name="BN_NEW_PRESENCE" Priority="0" ImageType="Event">
    <Signature>(index, "name")</Signature>
    <Description>Fires when information about a new Battle.net presence is available</Description>
    <ArgumentList Name="index">
      <Description>Index of the presence (number) </Description>
    </ArgumentList>
    <ArgumentList Name="name">
      <Description>Real name of the presence (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="BN_REQUEST_FOF_FAILED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_REQUEST_FOF_SUCCEEDED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_SELF_OFFLINE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_SELF_ONLINE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_SYSTEM_MESSAGE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BN_TOON_NAME_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BONUS_ROLL_FAILED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BONUS_ROLL_RESULT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="BONUS_ROLL_STARTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CALENDAR_ACTION_PENDING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a change to the calendar is in progress</Description>
  </WowApi>
  <WowApi Name="CALENDAR_CLOSE_EVENT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends viewing or editing details of a calendar event</Description>
  </WowApi>
  <WowApi Name="CALENDAR_EVENT_ALARM" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a calendar event is soon to begin. Causes the default UI to display a message in the chat window 15 minutes prior to the event's scheduled time.</Description>
  </WowApi>
  <WowApi Name="CALENDAR_NEW_EVENT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an event created by the player is added to the calendar</Description>
  </WowApi>
  <WowApi Name="CALENDAR_OPEN_EVENT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins viewing or editing details of a calendar event</Description>
  </WowApi>
  <WowApi Name="CALENDAR_UPDATE_ERROR" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a calendar-related error message should be displayed</Description>
  </WowApi>
  <WowApi Name="CALENDAR_UPDATE_EVENT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when details become available for the event being viewed or edited</Description>
  </WowApi>
  <WowApi Name="CALENDAR_UPDATE_EVENT_LIST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the list of events visible on the calendar changes</Description>
  </WowApi>
  <WowApi Name="CALENDAR_UPDATE_GUILD_EVENTS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CALENDAR_UPDATE_INVITE_LIST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the invite/signup list is updated for the event being viewed or edited</Description>
  </WowApi>
  <WowApi Name="CALENDAR_UPDATE_PENDING_INVITES" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player receives new calendar event invitations</Description>
  </WowApi>
  <WowApi Name="CANCEL_LOOT_ROLL" Priority="0" ImageType="Event">
    <Signature>(rollID)</Signature>
    <Description>Fires when the player cancels a loot roll. Can occur after the player is requested to confirm rolling for an item which Binds on Pickup.</Description>
    <ArgumentList Name="rollID">
      <Description>The id of the roll that was cancled. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CANCEL_SUMMON" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a summons offered to the player is canceled</Description>
  </WowApi>
  <WowApi Name="CHALLENGE_MODE_COMPLETED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHALLENGE_MODE_LEADERS_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHALLENGE_MODE_MAPS_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHALLENGE_MODE_NEW_RECORD" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHANNEL_COUNT_UPDATE" Priority="0" ImageType="Event">
    <Signature>(id, count)</Signature>
    <Description>Fires when the number of members in a world or custom chat channel changes</Description>
    <ArgumentList Name="id">
      <Description>The id of the chat channel thats getting updated. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="count">
      <Description>The number of members in the channel. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHANNEL_FLAGS_UPDATED" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when information about a channel for the channel list display changes</Description>
    <ArgumentList Name="id">
      <Description>The id of the channel that has updated data (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHANNEL_INVITE_REQUEST" Priority="0" ImageType="Event">
    <Signature>("channelName", "inviterName")</Signature>
    <Description>Fires when a player is invited into a chat channel</Description>
    <ArgumentList Name="channelName">
      <Description>The name of the channel you have been invited to. (string) </Description>
    </ArgumentList>
    <ArgumentList />
  </WowApi>
  <WowApi Name="CHANNEL_PASSWORD_REQUEST" Priority="0" ImageType="Event">
    <Signature>("channelName")</Signature>
    <Description>Fires when the player attempts to join a password protected channel</Description>
    <ArgumentList Name="channelName">
      <Description>The name of the channel you are attempting to join. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHANNEL_ROSTER_UPDATE" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when the list of members in a channel changes</Description>
    <ArgumentList Name="id">
      <Description>The id of the channel that has updated information. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHANNEL_UI_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information for the channel list display changes</Description>
  </WowApi>
  <WowApi Name="CHANNEL_VOICE_UPDATE" Priority="0" ImageType="Event">
    <Signature>(id, enabled, active)</Signature>
    <Description>Fires when a member in a voice chat channel starts or stops speaking</Description>
    <ArgumentList Name="id">
      <Description>The id of the speaker who has changed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="enabled">
      <Description>If voice chat is enabled. (boolean) </Description>
    </ArgumentList>
    <ArgumentList Name="active">
      <Description>If the player is speaking at this moment. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHARACTER_POINTS_CHANGED" Priority="0" ImageType="Event">
    <Signature>(count, levels)</Signature>
    <Description>Fires when the player's amount of available talent points changes. Note that since the introduction of Death Knights, who gain 46 of their talent points through questing, this event can fire without the player gaining a character level.</Description>
    <ArgumentList Name="count">
      <Description>The number of talent points gained or lost. Positive numbers are gains negative numbers are expenditures. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="levels">
      <Description>The number of levels gained in association to this change. Is 0 if there is no level change. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_ACHIEVEMENT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a nearby character earns an achievement</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_ADDON" Priority="0" ImageType="Event">
    <Signature>("prefix", "message", "channel", "sender")</Signature>
    <Description>Fires when an addon communication message is received (see SendAddonMessage()). The local client receives any messages it sends; thus, this event fires for messages sent by the local client as well as those receives from others.</Description>
    <ArgumentList Name="prefix">
      <Description>The prefix declared from SendAddonMessage. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="message">
      <Description>The message from SendAddonMessage. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channel">
      <Description>The message channel used for this message. Possible values include PARTY, RAID, GUILD, BATTLEGROUND, or WHISPER. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The username of the sender. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_AFK" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter, "senderGUID")</Signature>
    <Description>Fires when an automatic AFK response is received. When the player attempts to whisper or invite a character whose status is AFK, an automatic response is returned containing either a custom message set by that character or the default message, "Away From Keyboard"</Description>
    <ArgumentList Name="message">
      <Description>The response message (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="senderGUID">
      <Description>The sender's GUID (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BG_SYSTEM_ALLIANCE" Priority="0" ImageType="Event">
    <Signature>("message")</Signature>
    <Description>Fires when an Alliance-related battleground system message is received. Faction-related messages include flags picked up, bases assaulted, etc.</Description>
    <ArgumentList Name="message">
      <Description>The message received. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BG_SYSTEM_HORDE" Priority="0" ImageType="Event">
    <Signature>("message")</Signature>
    <Description>Fires when a Horde-related battleground system message is received. Faction-related messages include flags picked up, bases assaulted, etc.</Description>
    <ArgumentList Name="message">
      <Description>The message received. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BG_SYSTEM_NEUTRAL" Priority="0" ImageType="Event">
    <Signature>("message")</Signature>
    <Description>Fires when a general battleground, zone or world message is received. General battleground messages include those indicating that the match has ended or will begin soon. Also includes scripted events in certain zones (e.g. a warning to players entering Zul'Gurub) and occasional messages broadcast to all players in the realm, such as during major server events (e.g. "The wrath of Neptulon has subsided...").</Description>
    <ArgumentList Name="message">
      <Description>The message received. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_CONVERSATION" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "unknown", "channelString", "unknown", "unknown", unknown, channelNumber, "unknown", unknown, counter, "unknown", presenceID, unknown)</Signature>
    <Description>Fires when you type a message in chat or when you recive a message from another player using Battle.Net</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's RealID name. (i.e 'John Doe') (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (The UI adds +10 to the number) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be sequential number that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="presenceID">
      <Description>this is the presenceID of the sender. (number, presenceID) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>this seems to always be false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_CONVERSATION_LIST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_CONVERSATION_NOTICE" Priority="0" ImageType="Event">
    <Signature>("message/status", "sender", "unknown", "channelString", "unknown", "unknown", unknown, channelNumber, "unknown", unknown, counter, "unknown", presenceID, unknown)</Signature>
    <Description>Fires when you join a conversation channel (private channel for you and your friends) on Battle.Net</Description>
    <ArgumentList Name="message/status">
      <Description>The message thats received or a statuscode like YOU_ JOINED_ CONVERSATION, YOU_ LEFT_ CONVERSATION, MEMBER_ LEFT. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's RealID name. (i.e 'John Doe') or sometimes your own wow characters name. (looks like it will use the wow-character name when you are chatting, but will contain realid when other clients send messages) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (The UI adds +10 to the number) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be sequential number that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="presenceID">
      <Description>presenceID of the channel owner (number, presenceID) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>this seems to always be false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_INLINE_TOAST_ALERT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_INLINE_TOAST_BROADCAST" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "unknown", "unknown", "unknown", "unknown", unknown, unknown, "unknown", unknown, counter, "unknown", presenceID, unknown)</Signature>
    <Description>Fires whenever a user changes their broadcast message on Battle.Net</Description>
    <ArgumentList Name="message">
      <Description>The broadcast message. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's RealID name. (i.e 'John Doe') (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be sequential number that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="presenceID">
      <Description>presenceID of the player sending the boadcast message (number, presenceID) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>this seems to always be false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_INLINE_TOAST_BROADCAST_INFORM" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter, "guid")</Signature>
    <Description>Fires when the player sends a new broadcast (online message)</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="guid">
      <Description>GUID of the person who sent this message. Always empty for RealID events. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_INLINE_TOAST_CONVERSATION" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_WHISPER" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "unknown", "unknown", "unknown", "unknown", unknown, unknown, "unknown", unknown, counter, "unknown", presenceID, unknown)</Signature>
    <Description>Fires when you receive a whisper though Battle.net</Description>
    <ArgumentList Name="message">
      <Description>The message received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's Real ID name. (i.e 'John Doe') or sometimes your own WoW character's name. (Looks like it will use the WoW character name when you are chatting, but will contain Real ID when other clients send messages) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>Seems to be always 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>A sequential integer assigned to each whisper (local to the client). (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>unknown (string) </Description>
    </ArgumentList>
    <ArgumentList Name="presenceID">
      <Description>presenceID of the sender (number, presenceID) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>Seems to be always false (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_WHISPER_INFORM" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when you send a whisper though Battle.net (arguments are similar to CHAT_MSG_BN_WHISPER)</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_BN_WHISPER_PLAYER_OFFLINE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_CHANNEL" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter, "guid")</Signature>
    <Description>Fires when a message is received in a world or custom chat channel. Used for numbered chat channels (e.g. Trade, General, and player-created channels).</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="guid">
      <Description>GUID of the person who sent this message. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_CHANNEL_JOIN" Priority="0" ImageType="Event">
    <Signature>("unkown", "sender", "unknown", "channelString", "unknown", "unknown", unknown, channelNumber, "channelName", unknown, unknown)</Signature>
    <Description>Fires when another character joins a world or custom chat channel monitored by the player. Used for numbered chat channels (e.g. Trade, General, and player-created channels). Only used for other characters joining a channel -- when the player joins a channel, CHAT_MSG_CHANNEL_NOTICE fires.</Description>
    <ArgumentList Name="unkown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>0 (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>0 (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>800 (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_CHANNEL_LEAVE" Priority="0" ImageType="Event">
    <Signature>("unkown", "sender", "unknown", "channelString", "unknown", "unknown", unknown, channelNumber, "channelName", unknown, unknown)</Signature>
    <Description>Fires when another character leaves a world or custom chat channel monitored by the player. Used for numbered chat channels (e.g. Trade, General, and player-created channels). Only used for other characters leaving the channel -- when the player leaves the channel, CHAT_MSG_CHANNEL_NOTICE fires.</Description>
    <ArgumentList Name="unkown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>empty string (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>0 (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>0 (number) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>852 (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_CHANNEL_LIST" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires in response to a channel list query (e.g. /chatlist). If the channel contains many characters, the event fires multiple times to list them all.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_CHANNEL_NOTICE" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when certain actions happen on a world or custom chat channel. Examples of actions causing notice messages include when the player joins or leaves a channel, when the player attempts to send a chat message in a channel in which the player is silenced, or when a zone-specific channel (e.g. General, LocalDefense) changes as the player moves between zones.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (as a globalstring name) (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_CHANNEL_NOTICE_USER" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when certain actions pertaining to specific members happen on a world or custom chat channel. Examples of member-specific actions include a member enabling the channel for voice chat, a member becoming the channel owner, or one member kicking or banning another from the channel.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_COMBAT_FACTION_CHANGE" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player gains or loses reputation with a faction</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_COMBAT_GUILD_XP_GAIN" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a guild experience gain message appears in chat</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_COMBAT_HONOR_GAIN" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player gains honor points</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_COMBAT_MISC_INFO" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires for miscellaneous messages to be displayed in the combat log, such as loss of equipment durability upon death</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_COMBAT_XP_GAIN" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player gains experience points</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_CURRENCY" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_DND" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when an automatic DND response is received. When the player attempts to whisper or invite a character whose status is DND, an automatic response is returned containing either a custom message set by that character or the default message, "Do Not Disturb"</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_EMOTE" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a custom emote message is received.. Custom emote messages are those sent by typing /emote followed by some text; see CHAT_MSG_TEXT_EMOTE for standard emotes such as /dance and /flirt.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_FILTERED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to send a chat message which is blocked by the spam filter</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_GUILD" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a message is received in the guild chat channel</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_GUILD_ACHIEVEMENT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_IGNORED" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when an automatic response is received after whispering or inviting a character who is ignoring the player</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_INSTANCE_CHAT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_INSTANCE_CHAT_LEADER" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_LOOT" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when receiving notice that the player or a member of the player's group has looted an item</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_MONEY" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player receives money as loot</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_MONSTER_EMOTE" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a nearby NPC performs emote text. e.g. Cro Threadstrong crushes an apple under his boot.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_MONSTER_PARTY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an NPC speaks to the player's party chat channel</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_MONSTER_SAY" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a nearby NPC speaks (visible only to players in the immediate area). e.g. Granny smith says: What is that poor orc yelling about? Someone should see what is going on.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_MONSTER_WHISPER" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when an NPC whispers to the player</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_MONSTER_YELL" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when an NPC yells (visible to players in a wide area or the entire zone). e.g. Doom Lord Kazzak yells, All mortals will perish!</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_OFFICER" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a message is received in officer chat.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_OPENING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires for messages about the player "opening" a world object. Used for some, but not all "openable" world objects (e.g. treasure chests, quest objects). Messages sent via this event are displayed in the default UI's combat log by default.</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_PARTY" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a message is received in the party chat channel</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_PARTY_LEADER" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a Party Leader types in chat. Message in the channel you're in that's fired when the Party Leader sends a chat in Party Channel</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_PET_BATTLE_COMBAT_LOG" Priority="0" ImageType="Event">
    <Signature>message = ()</Signature>
    <Description>Fires during combat in pet battles.. This event fires for all combat events visible to the player for pet battles.
While the name would imply that this event is similar to COMBAT_LOG_EVENT_UNFILTERED, however it is not. COMBAT_LOG_EVENT_UNFILTERED has multiple many return values, where as CHAT_MSG_PET_BATTLE_COMBAT_LOG only has one return value, which is the message displayed in the pet battle combat display in game.
In order to get the information from this event, you will need to know what the possible strings are. Some of them are below, with the important information values replaced by patterns to return them.</Description>
    <ReturnList Name="message">
      <Description>The information about a single pet battle move during a fight. (string) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CHAT_MSG_PET_BATTLE_INFO" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_PET_INFO" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires for pet-related messages normally displayed in the combat log (e.g. summoning or dismissing a pet)</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_RAID" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a message is received in the raid chat channel</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_RAID_BOSS_EMOTE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_RAID_BOSS_WHISPER" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a raid boss whispers to the player. In the default UI, whispers from a raid boss are displayed in large text in the center of the screen.</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_RAID_LEADER" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a message is received in the raid chat channel from the raid leader</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_RAID_WARNING" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a raid warning message is received. These messages can be sent by the raid leader or a raid assistant; in the default UI, they appear in large text in the center of the screen.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_RESTRICTED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to send a chat message which is disallowed because the player is on a trial account</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_SAY" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player or a nearby character speaks (visible to other nearby characters)</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_SKILL" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when skill related messages are received.. e.g. "Your skill in Unarmed has increased to 357."</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_SYSTEM" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when a system message is received. System messages are a catch-all category for messages received in via the chat system. Examples:
The server message which appears upon login (e.g. "Welcome to Patch 3.4! If you encounter interface problems, please disable your addons and delete your WTF folder.")
The feedback message which appears when the player enters AFK or DND status
Results from a /who query, if the query has three or fewer results
Notification that a friend or guild member has logged in or gone offline
Many standard system message patterns can be found as localized format strings in FrameXML\GlobalStrings.lua (after using the AddOn Kit to extract the default interface files). When this event is received, the message has already been localized and formatted, but using the format string may be useful for parsing variables from the message.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_TARGETICONS" Priority="0" ImageType="Event">
    <Signature>message, sender, language, channelString, target, flags, unknown, channelNumber, channelName, unknown, counter = ()</Signature>
    <Description>Fires when a target icon message is sent in chat.</Description>
    <ReturnList Name="message">
      <Description>The message that was received (string) </Description>
    </ReturnList>
    <ReturnList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ReturnList>
    <ReturnList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ReturnList>
    <ReturnList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ReturnList>
    <ReturnList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ReturnList>
    <ReturnList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ReturnList>
    <ReturnList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ReturnList>
    <ReturnList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ReturnList>
    <ReturnList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ReturnList>
    <ReturnList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="CHAT_MSG_TEXT_EMOTE" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player receives a standard emote (e.g. /dance, /flirt) message. For custom emote messages (those sent by typing /emote followed by some text), see CHAT_MSG_EMOTE.</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_TRADESKILLS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player or a nearby character performs a trade skill recipe</Description>
  </WowApi>
  <WowApi Name="CHAT_MSG_WHISPER" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter, guid)</Signature>
    <Description>Fires when the player receives a whisper from a player character</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="guid">
      <Description>This variable appears to contain the globally unique ID for the player character who whispered you (guid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_WHISPER_INFORM" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player sends a whisper to a player character</Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_MSG_YELL" Priority="0" ImageType="Event">
    <Signature>("message", "sender", "language", "channelString", "target", "flags", unknown, channelNumber, "channelName", unknown, counter)</Signature>
    <Description>Fires when the player or another player character yells (visible to other characters in a wide area) </Description>
    <ArgumentList Name="message">
      <Description>The message thats received (string) </Description>
    </ArgumentList>
    <ArgumentList Name="sender">
      <Description>The sender's username. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="language">
      <Description>The language the message is in. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="channelString">
      <Description>The full name of the channel, including number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The username of the target of the action. Not used by all events. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="flags">
      <Description>The various chat flags. Like, DND or AFK. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose, although it may be some sort of internal channel id. That however is not confirmed. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelNumber">
      <Description>The numeric ID of the channel. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="channelName">
      <Description>The full name of the channel, does not include the number. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unknown">
      <Description>This variable has an unkown purpose although it always seems to be 0. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="counter">
      <Description>This variable appears to be a counter of chat events that the client recieves. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CHAT_SERVER_DISCONNECTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CHAT_SERVER_RECONNECTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CINEMATIC_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an in-game-engine cinematic begins to play. Used primarily for the introductory cinematic which plays upon logging into a newly created character, but can also appear at other times.</Description>
  </WowApi>
  <WowApi Name="CINEMATIC_STOP" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an in-game-engine cinematic stops playing. Used primarily for the introductory cinematic which plays upon logging into a newly created character, but can also appear at other times.</Description>
  </WowApi>
  <WowApi Name="CLEAR_BOSS_EMOTES" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CLOSE_INBOX_ITEM" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when the mail message being viewed is no longer available. Occurs when the player takes all items attached to the currently viewed message, causing it to be deleted.</Description>
    <ArgumentList Name="id">
      <Description>The id of the mail slot you took the item from (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CLOSE_TABARD_FRAME" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a tabard designer</Description>
  </WowApi>
  <WowApi Name="CLOSE_WORLD_MAP" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the world map should be hidden in response to external conditions. Such conditions include being teleported by a GM while the world map is open. Does not fire when the player closes the world map manually.</Description>
  </WowApi>
  <WowApi Name="COMBAT_LOG_EVENT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMBAT_LOG_EVENT_UNFILTERED" Priority="0" ImageType="Event">
    <Signature>timeStamp, event, hideCaster, sourceGUID, sourceName, sourceFlags, sourceRaidFlags, destGUID, destName, destFlags, destRaidFlags, ... = ()</Signature>
    <Description>Fires when a combat log event is received. This event fires for all combat events visible to the player; COMBAT_LOG_EVENT fires only for combat log events which match the currently defined filters.
See the chapter "Responding to the Combat Log and Threat Information" for details.</Description>
    <ReturnList Name="timeStamp">
      <Description>The time on the server that the event occurred (number) </Description>
    </ReturnList>
    <ReturnList Name="event">
      <Description>The name of the combat sub-event that occurred (string) </Description>
    </ReturnList>
    <ReturnList Name="hideCaster">
      <Description>The purpose of this boolean flag is currently unknown (boolean) </Description>
    </ReturnList>
    <ReturnList Name="sourceGUID">
      <Description>A string containing the hexadecimal representation of the source of the event's GUID (string, GUID) </Description>
    </ReturnList>
    <ReturnList Name="sourceName">
      <Description>The name of the source of the event (string) </Description>
    </ReturnList>
    <ReturnList Name="sourceFlags">
      <Description>A bitfield containing information about the source of the event (number, bitfield) </Description>
    </ReturnList>
    <ReturnList Name="sourceRaidFlags">
      <Description>Added in Patch 4.2 (number, bitfield) </Description>
    </ReturnList>
    <ReturnList Name="destGUID">
      <Description>A string containing the hexadecimal representation of the destination of the event's GUID (string, GUID) </Description>
    </ReturnList>
    <ReturnList Name="destName">
      <Description>The name of the destination of the event (string) </Description>
    </ReturnList>
    <ReturnList Name="destFlags">
      <Description>A bitfield containing information about the destination of the event (number, bitfield) </Description>
    </ReturnList>
    <ReturnList Name="destRaidFlags">
      <Description>Added in Patch 4.2 (number, bitfield) </Description>
    </ReturnList>
    <ReturnList Name="...">
      <Description>A list of additional arguments, dependent on the particular combat sub-event. See Chapter 21 for more detailed information (varies) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="COMBAT_RATING_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's combat rating statistics change</Description>
  </WowApi>
  <WowApi Name="COMBAT_TEXT_UPDATE" Priority="0" ImageType="Event">
    <Signature>("type", desc1, desc2)</Signature>
    <Description>Fires when a message is received which can be displayed by the default UI's floating combat text feature</Description>
    <ArgumentList Name="type">
      <Description>Token identifying the type of message (string) </Description>
    </ArgumentList>
    <ArgumentList Name="desc1">
      <Description>This field varies depending on the type of message. See the chart for details (varies) </Description>
    </ArgumentList>
    <ArgumentList Name="desc2">
      <Description>This field varies depending on the type of message. See the chart for details (varies) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="COMMENTATOR_ENTER_WORLD" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMMENTATOR_MAP_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMMENTATOR_PARTY_INFO_REQUEST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMMENTATOR_PLAYER_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMMENTATOR_SKIRMISH_MODE_REQUEST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMMENTATOR_SKIRMISH_QUEUE_REQUEST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMPACT_UNIT_FRAME_PROFILES_LOADED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMPANION_LEARNED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player learns to summon a new mount or non-combat pet</Description>
  </WowApi>
  <WowApi Name="COMPANION_UNLEARNED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="COMPANION_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when new information about the player's mounts and non-combat pets is available</Description>
  </WowApi>
  <WowApi Name="CONFIRM_BEFORE_USE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CONFIRM_BINDER" Priority="0" ImageType="Event">
    <Signature>("newHome")</Signature>
    <Description>Fires when the player attempts to set a new Hearthstone location</Description>
    <ArgumentList Name="newHome">
      <Description>Name of the new Hearthstone location (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CONFIRM_DISENCHANT_ROLL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to roll disenchant for an item which Binds on Pickup</Description>
  </WowApi>
  <WowApi Name="CONFIRM_LOOT_ROLL" Priority="0" ImageType="Event">
    <Signature>(id, rolltype)</Signature>
    <Description>Fires when the player attempts to roll for a loot item which Binds on Pickup</Description>
    <ArgumentList Name="id">
      <Description>The slot id that you're rolling for (number) </Description>
    </ArgumentList>
    <ArgumentList Name="rolltype">
      <Description>The numeric representing the type of roll you are doing. Pass: 0, Need: 1, Greed: 2. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CONFIRM_SUMMON" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a summons is offered to the player</Description>
  </WowApi>
  <WowApi Name="CONFIRM_TALENT_WIPE" Priority="0" ImageType="Event">
    <Signature>(cost)</Signature>
    <Description>Fires when the player attempts to unlearn talents</Description>
    <ArgumentList Name="cost">
      <Description>The amount in copper that it will cost you to untrain your talents. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="CONFIRM_XP_LOSS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to resurrect at a graveyard spirit healer. Early in WoW's development, resurrecting at a spirit healer caused a loss of experience points. The change to a loss of item durability was made before the initial public release of World of Warcraft, but the name of this event was never changed.</Description>
  </WowApi>
  <WowApi Name="CORPSE_IN_INSTANCE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player (dead, in spirit form) approaches the entrance to the instance in which his corpse is located</Description>
  </WowApi>
  <WowApi Name="CORPSE_IN_RANGE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player (dead, in spirit form) approaches near enough to his corpse to return to life</Description>
  </WowApi>
  <WowApi Name="CORPSE_OUT_OF_RANGE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player (dead, in spirit form) moves too far away from his corpse to resurrect</Description>
  </WowApi>
  <WowApi Name="CRITERIA_COMPLETE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CRITERIA_EARNED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="CRITERIA_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about achievement criteria or player statistics becomes available</Description>
  </WowApi>
  <WowApi Name="CURRENCY_DISPLAY_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when new information for the currency list is available</Description>
  </WowApi>
  <WowApi Name="CURRENT_SPELL_CAST_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player starts or stops (cancels or finishes) casting a spell</Description>
  </WowApi>
  <WowApi Name="CURSOR_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the mouse cursor image or contents is changed</Description>
  </WowApi>
  <WowApi Name="CVAR_UPDATE" Priority="0" ImageType="Event">
    <Signature>("glStr", "value")</Signature>
    <Description>Fires when the value of a configuration variable is updated. Fires regardless of whether the variable's value has changed.
Except that it doesn't fire for all CVars that can be set in preferences, and it doesn't fire when someone changes a CVar outside of preferences unless they specifically give it an argument to fire with. You likely want to hook SetCVar instead.</Description>
    <ArgumentList Name="glStr">
      <Description>Global string related to the given CVAR (like "ENABLEBGSOUND" for "SoundEnableSoundWhenGameIsInBG" CVAR). (string) </Description>
    </ArgumentList>
    <ArgumentList Name="value">
      <Description>The updated value assigned to the CVAR. Note: For boolean values this is a string of 0 or 1. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DELETE_ITEM_CONFIRM" Priority="0" ImageType="Event">
    <Signature>("itemName", itemQuality)</Signature>
    <Description>Fires when the player attempts to delete an item</Description>
    <ArgumentList Name="itemName">
      <Description>The name of the item you are attempting to delete (string) </Description>
    </ArgumentList>
    <ArgumentList Name="itemQuality">
      <Description>The numeric index representing the items quality. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="DISABLE_DECLINE_GUILD_INVITE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="DISABLE_LOW_LEVEL_RAID" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="DISABLE_TAXI_BENCHMARK" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a flight path benchmarking session ends or is canceled</Description>
  </WowApi>
  <WowApi Name="DISABLE_XP_GAIN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="DISPLAY_SIZE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the screen resolution changes</Description>
  </WowApi>
  <WowApi Name="DUEL_FINISHED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a duel in which the player is participating ends. Can fire due to the duel being won or forfeit.</Description>
  </WowApi>
  <WowApi Name="DUEL_INBOUNDS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player reenters the duel area after leaving its boundaries</Description>
  </WowApi>
  <WowApi Name="DUEL_OUTOFBOUNDS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins to move outside the boundaries of a duel area. If the player remains outside the duel area for more than 10 seconds, he or she will forfeit the duel.</Description>
  </WowApi>
  <WowApi Name="DUEL_REQUESTED" Priority="0" ImageType="Event">
    <Signature>("challenger")</Signature>
    <Description>Fires when the player is challenged to a duel. No event (other than the associated system message) fires when the player challenges another to a duel.</Description>
    <ArgumentList Name="challenger">
      <Description>The challenger's username (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ECLIPSE_DIRECTION_CHANGE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_DIFFICULTY_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="EJ_LOOT_DATA_RECIEVED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ENABLE_DECLINE_GUILD_INVITE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ENABLE_LOW_LEVEL_RAID" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ENABLE_TAXI_BENCHMARK" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when taxi benchmarking mode is enabled</Description>
  </WowApi>
  <WowApi Name="ENABLE_XP_GAIN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="END_BOUND_TRADEABLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts an action which will make a looted Bind on Pickup item no longer tradeable. A Bind on Pickup item looted by the player can still be traded to other players (though only those who were eligible to loot it originally) for several minutes after looting, but certain actions can cancel this period early.</Description>
  </WowApi>
  <WowApi Name="ENTERED_DIFFERENT_INSTANCE_FROM_PARTY" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="EQUIPMENT_SETS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's list of equipment sets changes</Description>
  </WowApi>
  <WowApi Name="EQUIPMENT_SWAP_FINISHED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the process of switching equipment sets is complete. Many other events fire as the equipment swap takes place (each piece of equipment being equipped or placed into the character's bags, the character's combat attributes changing due to the new equipment, etc). An addon may not need to monitor each event that happens as part of this process, so it can unregister those events when EQUIPMENT_SWAP_PENDING fires and re-register for them when EQUIPMENT_SWAP_FINISHED fires.</Description>
  </WowApi>
  <WowApi Name="EQUIPMENT_SWAP_PENDING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins to switch equipment sets. Many other events fire as the equipment swap takes place (each piece of equipment being equipped or placed into the character's bags, the character's combat attributes changing due to the new equipment, etc). An addon may not need to monitor each event that happens as part of this process, so it can unregister those events when EQUIPMENT_SWAP_PENDING fires and re-register for them when EQUIPMENT_SWAP_FINISHED fires.</Description>
  </WowApi>
  <WowApi Name="EQUIP_BIND_CONFIRM" Priority="0" ImageType="Event">
    <Signature>(slot)</Signature>
    <Description>Fires when the player attempts to equip an item which will become soulbound in the process</Description>
    <ArgumentList Name="slot">
      <Description>The slot you are equiping into. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="EXECUTE_CHAT_LINE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a chat message is encountered in a running macro</Description>
  </WowApi>
  <WowApi Name="FORGE_MASTER_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the reforging panel has been changed</Description>
  </WowApi>
  <WowApi Name="FORGE_MASTER_ITEM_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the active item in the reforging panel changes</Description>
  </WowApi>
  <WowApi Name="FORGE_MASTER_OPENED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the reforging panel has been opened</Description>
  </WowApi>
  <WowApi Name="FORGE_MASTER_SET_ITEM" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player adds an item to the reforging panel</Description>
  </WowApi>
  <WowApi Name="FRIENDLIST_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GET_ITEM_INFO_RECEIVED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when item info requested by GetItemInfo() becomes available, if it wasn't already, through a disk seek or a net request</Description>
  </WowApi>
  <WowApi Name="GLYPH_ADDED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a glyph is inscribed into the player's spellbook</Description>
  </WowApi>
  <WowApi Name="GLYPH_DISABLED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a glyph slot is no longer available. Currently, glyph slots are enabled as the player gains levels (at levels 15, 30, 50, 70, and 80) and are never disabled, but this event may be used should disabling of slots become possible.</Description>
  </WowApi>
  <WowApi Name="GLYPH_ENABLED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a glyph slot becomes available. New glyph slots become available as the player gains levels.</Description>
  </WowApi>
  <WowApi Name="GLYPH_REMOVED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player removes an inscribed glyph</Description>
  </WowApi>
  <WowApi Name="GLYPH_UPDATED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's inscribed glyphs becomes available</Description>
  </WowApi>
  <WowApi Name="GMRESPONSE_RECEIVED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player receives a response to a GM ticket. Used for non-interactive responses, not GM conversations.</Description>
  </WowApi>
  <WowApi Name="GMSURVEY_DISPLAY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is invited to participate in a GM feedback survey</Description>
  </WowApi>
  <WowApi Name="GM_PLAYER_INFO" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GOSSIP_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an NPC gossip interaction ends. Many NPCs provide a single gossip option leading into another type of interaction (e.g. a flight master offering a greeting) -- in this case, the gossip interaction still happens but is automatically skipped by the default UI, so this event still fires.</Description>
  </WowApi>
  <WowApi Name="GOSSIP_CONFIRM" Priority="0" ImageType="Event">
    <Signature>(index, "message", cost)</Signature>
    <Description>Fires when the player is requested to confirm a gossip choice. Used when a gossip interaction involves a warning, such as for spending a large amount of money (e.g. purchasing Dual Talent Specialization).</Description>
    <ArgumentList Name="index">
      <Description>The numeric index of the gossip option you're confirming (number) </Description>
    </ArgumentList>
    <ArgumentList Name="message">
      <Description>The message to display for the confirmation (string) </Description>
    </ArgumentList>
    <ArgumentList Name="cost">
      <Description>The cost of the action you're confirming. Will be 0 if there is no cost. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GOSSIP_CONFIRM_CANCEL" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GOSSIP_ENTER_CODE" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when the player attempts a gossip choice which requires entering a code. Used for NPCs offering the ability to claim items such as Blizzcon special pets or loot cards from the WoW trading card game.</Description>
    <ArgumentList Name="id">
      <Description>The id of the gossip action you are attempting. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GOSSIP_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an NPC gossip interaction begins</Description>
  </WowApi>
  <WowApi Name="GROUP_JOINED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GROUP_ROSTER_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when composition of party change.</Description>
  </WowApi>
  <WowApi Name="GUILDBANKBAGSLOTS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the contents of guild bank item slots changes or becomes available</Description>
  </WowApi>
  <WowApi Name="GUILDBANKFRAME_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with the guild bank</Description>
  </WowApi>
  <WowApi Name="GUILDBANKFRAME_OPENED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with the guild bank</Description>
  </WowApi>
  <WowApi Name="GUILDBANKLOG_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information for the guild bank transaction or money log becomes available</Description>
  </WowApi>
  <WowApi Name="GUILDBANK_ITEM_LOCK_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an item in the guild bank is locked for moving or unlocked afterward</Description>
  </WowApi>
  <WowApi Name="GUILDBANK_TEXT_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the text associated with a guild bank tab is changed</Description>
  </WowApi>
  <WowApi Name="GUILDBANK_UPDATE_MONEY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the amount of money in the guild bank changes</Description>
  </WowApi>
  <WowApi Name="GUILDBANK_UPDATE_TABS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILDBANK_UPDATE_TEXT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when text associated with a guild bank tab becomes available</Description>
  </WowApi>
  <WowApi Name="GUILDBANK_UPDATE_WITHDRAWMONEY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the amount of money the player can withdraw from the guild bank changes. Also fires when the player deposits money.</Description>
  </WowApi>
  <WowApi Name="GUILDTABARD_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's guild tabard design changes.</Description>
  </WowApi>
  <WowApi Name="GUILD_CHALLENGE_COMPLETED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_CHALLENGE_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_EVENT_LOG_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information for the guild event log becomes available</Description>
  </WowApi>
  <WowApi Name="GUILD_INVITE_CANCEL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an invitation to join a guild is no longer available. Can occur when the player declines an invitation or when the invitation expires after a period of time.</Description>
  </WowApi>
  <WowApi Name="GUILD_INVITE_REQUEST" Priority="0" ImageType="Event">
    <Signature>("from", "guildname")</Signature>
    <Description>Fires when the player is invited to join a guild</Description>
    <ArgumentList Name="from">
      <Description>The username of the player who invited you to their guild (string) </Description>
    </ArgumentList>
    <ArgumentList Name="guildname">
      <Description>The name of the guild you are being invited to (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GUILD_MOTD" Priority="0" ImageType="Event">
    <Signature>("message")</Signature>
    <Description>Fires when the guild message of the day is updated. Also fires during the login process so that the player can see the existing message.</Description>
    <ArgumentList Name="message">
      <Description>The new guild message. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GUILD_NEWS_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the Guild News are updated. This event may fire several times the first time the guild panel is opened.</Description>
  </WowApi>
  <WowApi Name="GUILD_PARTY_STATE_UPDATED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the guild state of the current dungeon changes. The guild state is whether or not the current dungeon is a guild run.</Description>
  </WowApi>
  <WowApi Name="GUILD_PERK_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the guild gains or loses a perk</Description>
  </WowApi>
  <WowApi Name="GUILD_RANKS_UPDATE" Priority="0" ImageType="Event">
    <Signature>("unit")</Signature>
    <Description>Fires when unit is promoted or demoted within the guild. This event fires when unit is promoted or demoted within the guild. GUILD_ROSTER_UPDATE is fired at the same time.</Description>
    <ArgumentList Name="unit">
      <Description>The unit that was promoted or demoted (string, unitId) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GUILD_RECIPE_KNOWN_BY_MEMBERS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_REGISTRAR_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a guild registrar</Description>
  </WowApi>
  <WowApi Name="GUILD_REGISTRAR_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a guild registrar</Description>
  </WowApi>
  <WowApi Name="GUILD_RENAME_REQUIRED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_REP_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_REWARDS_LIST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_ROSTER_UPDATE" Priority="0" ImageType="Event">
    <Signature>(update)</Signature>
    <Description>Fires when new information about the contents of the guild roster is available</Description>
    <ArgumentList Name="update">
      <Description>Wether or not the guild roster actually changes. Typically indicates if a player has joined or left your guild. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="GUILD_TRADESKILL_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="GUILD_XP_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the Guild XP is updated</Description>
  </WowApi>
  <WowApi Name="IGNORELIST_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="IGR_BILLING_NAG_DIALOG" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a message should be shown about the player's paid-per-hour game time expiring soon. Only used in locales where World of Warcraft is played via paid-per-hour Internet Game Rooms (e.g. Korea).</Description>
  </WowApi>
  <WowApi Name="INCOMING_RESURRECT_CHANGED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a resurrection spell is cast. Guaranteed to always have a return, whether "target", "raid20", or "party1", etc.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="INELIGIBLE_FOR_LOOT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="INSPECT_ACHIEVEMENT_READY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires after the player attempts to compare achievements with another character, indicating that achievement information for the other unit has become available</Description>
  </WowApi>
  <WowApi Name="INSPECT_HONOR_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the inspected unit's PvP activities becomes available</Description>
  </WowApi>
  <WowApi Name="INSPECT_READY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when inspect information not readily available is now ready. Used for information such as PvP or Guild info.</Description>
  </WowApi>
  <WowApi Name="INSTANCE_BOOT_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player will soon be ejected from an instance. Occurs when the player leaves the group to which the instance belongs and has not yet exited the instance -- some time after this event provides a warning, the player will be teleported to the nearest graveyard.</Description>
  </WowApi>
  <WowApi Name="INSTANCE_BOOT_STOP" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the warning countdown for ejecting the player from an instance is canceled. The player can avoid being ejected from an instance by re-joining the group to which the instance belongs or leaving the instance via other means.</Description>
  </WowApi>
  <WowApi Name="INSTANCE_ENCOUNTER_ENGAGE_UNIT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a boss has been engaged in an instance. Does not fire for every boss fights, as it is used to add the boss unit to the UI.</Description>
  </WowApi>
  <WowApi Name="INSTANCE_LOCK_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player will soon be saved to an instance. If the player enters an instance to which other group members are saved, this event provides a warning allowing the player an opportunity to leave before also becoming saved to the instance.</Description>
  </WowApi>
  <WowApi Name="INSTANCE_LOCK_STOP" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the warning countdown for saving the player to an instance is canceled. The countdown is stopped when the player either leaves the instance or accepts being saved to it.</Description>
  </WowApi>
  <WowApi Name="INSTANCE_LOCK_WARNING" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="INVENTORY_SEARCH_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ITEM_LOCKED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an item in the player's bags or equipped inventory is locked for moving</Description>
  </WowApi>
  <WowApi Name="ITEM_LOCK_CHANGED" Priority="0" ImageType="Event">
    <Signature>(bagID, slotID)</Signature>
    <Description>Fires when an item in the player's bags or equipped inventory is locked for moving or unlocked afterward</Description>
    <ArgumentList Name="bagID">
      <Description>The bag id that the slot is in. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="slotID">
      <Description>The slot id that's lock is changing. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ITEM_PUSH" Priority="0" ImageType="Event">
    <Signature>(bagID, "icon")</Signature>
    <Description>Fires when the player receives an item. This event fires in addition to others which may indicate the item's origin (e.g. QUEST_ACCEPTED or CHAT_MSG_LOOT); in the default UI, this event triggers an "item falling into bag" animation displayed above the bag icons.</Description>
    <ArgumentList Name="bagID">
      <Description>The id of the bag that the item is going into. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="icon">
      <Description>The icon file for the item being received. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ITEM_RESTORATION_BUTTON_STATUS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ITEM_TEXT_BEGIN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a readable item or world object. Readable items include books, scrolls, and saved copies of mail messages; readable world objects include plaques, gravestones and books on tables.</Description>
  </WowApi>
  <WowApi Name="ITEM_TEXT_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a readable item or world object. Readable items include books, scrolls, and saved copies of mail messages; readable world objects include plaques, gravestones and books on tables.</Description>
  </WowApi>
  <WowApi Name="ITEM_TEXT_READY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when text changes or becomes available for the readable item or world object with which the player is interacting. Also fires when turning pages in a multi-page text item.
Readable items include books, scrolls, and saved copies of mail messages; readable world objects include plaques, gravestones and books on tables.</Description>
  </WowApi>
  <WowApi Name="ITEM_TEXT_TRANSLATION" Priority="0" ImageType="Event">
    <Signature>(maxvalue)</Signature>
    <Description>Fires when a "translation" progress bar should be displayed while the player interacts with a readable item or world object. Such a UI element indicates the player character's progress in translating the text to a readable in-game language; this feature is generally not used in the current version of WoW.
Readable items include books, scrolls, and saved copies of mail messages; readable world objects include plaques, gravestones and books on tables.</Description>
    <ArgumentList Name="maxvalue">
      <Description>The max value (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ITEM_UNLOCKED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an item in the player's bags or equipped inventory is unlocked after moving</Description>
  </WowApi>
  <WowApi Name="ITEM_UPGRADE_MASTER_CLOSED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ITEM_UPGRADE_MASTER_OPENED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ITEM_UPGRADE_MASTER_SET_ITEM" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="ITEM_UPGRADE_MASTER_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_ARTICLE_LOAD_FAILURE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a knowledge base article fails to load</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_ARTICLE_LOAD_SUCCESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the contents of a successfully loaded knowledge base article become available</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_QUERY_LOAD_FAILURE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a knowledge base query fails</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_QUERY_LOAD_SUCCESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when results of a successful knowledge base query become available</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_SERVER_MESSAGE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the knowledge base server message changes or becomes available</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_SETUP_LOAD_FAILURE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the knowledge base's default listing fails to load</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_SETUP_LOAD_SUCCESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the knowledge base's default listing becomes available</Description>
  </WowApi>
  <WowApi Name="KNOWLEDGE_BASE_SYSTEM_MOTD_UPDATED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the knowledge base system's message of the day changes or becomes available</Description>
  </WowApi>
  <WowApi Name="KNOWN_TITLES_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the number of titles available to the player changes</Description>
  </WowApi>
  <WowApi Name="LANGUAGE_LIST_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the list of known languages changes.</Description>
  </WowApi>
  <WowApi Name="LEARNED_SPELL_IN_TAB" Priority="0" ImageType="Event">
    <Signature>(spellID, tabID)</Signature>
    <Description>Fires when a spell is learned inside of a given spell book tab, including when spells are learned upon changing the active talent spec.</Description>
    <ArgumentList Name="spellID">
      <Description>The spell id of the spell that was learned. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="tabID">
      <Description>The id of the tab that has the updated item. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LEVEL_GRANT_PROPOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is offered to instantly gain a level thanks to a Recruit-A-Friend partner</Description>
  </WowApi>
  <WowApi Name="LFG_BOOT_PROPOSAL_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_COMPLETION_REWARD" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player receives the completion reward for a randoms LFG dungeon</Description>
  </WowApi>
  <WowApi Name="LFG_INVALID_ERROR_MESSAGE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_LOCK_INFO_RECEIVED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when LFR information is available. Fires when LFR boss kill information is available to be queried using GetLFGDungeonNumEncounters() and GetLFGDungeonEncounterInfo()</Description>
  </WowApi>
  <WowApi Name="LFG_OFFER_CONTINUE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_OPEN_FROM_GOSSIP" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_PROPOSAL_FAILED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_PROPOSAL_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the LFD system has found a possible group. Fires when the LFD system has found a possible group, and is seeking confirmation to enter the instance (via a call to AcceptProposal).</Description>
  </WowApi>
  <WowApi Name="LFG_PROPOSAL_SUCCEEDED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an LFD group was successfully formed. Fires when an LFD group was successfully formed and the party is being created</Description>
  </WowApi>
  <WowApi Name="LFG_PROPOSAL_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a potential group member accepts or declines the LFD offer. Fires when a potential group member accepts or declines the LFD offer.</Description>
  </WowApi>
  <WowApi Name="LFG_QUEUE_STATUS_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_ROLE_CHECK_HIDE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_ROLE_CHECK_ROLE_CHOSEN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_ROLE_CHECK_SHOW" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_ROLE_CHECK_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_ROLE_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LFG_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's LFG system settings changes or becomes available</Description>
  </WowApi>
  <WowApi Name="LFG_UPDATE_RANDOM_INFO" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when instance information is available for populating the LFD frame</Description>
  </WowApi>
  <WowApi Name="LF_GUILD_BROWSE_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LF_GUILD_MEMBERSHIP_LIST_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LF_GUILD_MEMBERSHIP_LIST_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LF_GUILD_POST_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LF_GUILD_RECRUITS_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LF_GUILD_RECRUIT_LIST_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOCALPLAYER_PET_RENAMED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's pet is renamed. Primarily applies to hunter pets.</Description>
  </WowApi>
  <WowApi Name="LOGOUT_CANCEL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the logout countdown is aborted. The player is required to wait several seconds before logging out or quitting if not in an inn, major city or other "resting" area -- this method fires if the player attempts to log out or quit, starting the countdown, and then performs an action which aborts it.</Description>
  </WowApi>
  <WowApi Name="LOOT_BIND_CONFIRM" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a lootable corpse or object. Fires regardless of whether looting ended by closing the default UI's loot window, looting all of its contents, or moving too far away from the corpse or object.</Description>
  </WowApi>
  <WowApi Name="LOOT_HISTORY_AUTO_SHOW" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_HISTORY_FULL_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_HISTORY_ROLL_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_HISTORY_ROLL_COMPLETE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_ITEM_AVAILABLE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_ITEM_ROLL_WON" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_OPENED" Priority="0" ImageType="Event">
    <Signature>(autoLoot)</Signature>
    <Description>Fires when the player begins interaction with a lootable corpse or object</Description>
    <ArgumentList Name="autoLoot">
      <Description>Specifies if the target should be autolooted or not. (boolean) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LOOT_ROLLS_COMPLETE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_SLOT_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOOT_SLOT_CLEARED" Priority="0" ImageType="Event">
    <Signature>(slotID)</Signature>
    <Description>Fires when the contents of a loot slot are removed. Can fire due to the player looting the slot's contents or due to them being taken by another group member.</Description>
    <ArgumentList Name="slotID">
      <Description>The numeric id of the slot that was looted. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="LOSS_OF_CONTROL_ADDED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="LOSS_OF_CONTROL_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MACRO_ACTION_BLOCKED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a macro script attempts to use a protected API </Description>
  </WowApi>
  <WowApi Name="MACRO_ACTION_FORBIDDEN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a macro script attempts to use a protected API </Description>
  </WowApi>
  <WowApi Name="MAIL_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a mailbox</Description>
  </WowApi>
  <WowApi Name="MAIL_FAILED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an outgoing mail message fails to send. Can occur when the player attempts to send mail to an unknown recipient, or trying to send Bind on Account items to a character not on the player's account.</Description>
  </WowApi>
  <WowApi Name="MAIL_INBOX_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the contents of the player's inbox changes or becomes available</Description>
  </WowApi>
  <WowApi Name="MAIL_LOCK_SEND_ITEMS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MAIL_SEND_INFO_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the outgoing mail message's attachments changes</Description>
  </WowApi>
  <WowApi Name="MAIL_SEND_SUCCESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an outgoing message is successfully sent</Description>
  </WowApi>
  <WowApi Name="MAIL_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a mailbox</Description>
  </WowApi>
  <WowApi Name="MAIL_SUCCESS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MAIL_UNLOCK_SEND_ITEMS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MASTERY_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's mastery rating is updated</Description>
  </WowApi>
  <WowApi Name="MAX_SPELL_START_RECOVERY_OFFSET_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MERCHANT_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a vendor</Description>
  </WowApi>
  <WowApi Name="MERCHANT_FILTER_ITEM_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MERCHANT_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a vendor</Description>
  </WowApi>
  <WowApi Name="MERCHANT_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about a vendor's available items changes or becomes available. This event is most meaningful when it fires in response to the player purchasing an item for which the vendor has a limited supply, but it also fires in response to any other vendor transaction.</Description>
  </WowApi>
  <WowApi Name="MINIGAME_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Unused. Minigames are not implemented in the current version of the WoW client.</Description>
  </WowApi>
  <WowApi Name="MINIMAP_PING" Priority="0" ImageType="Event">
    <Signature>("unit", x, y)</Signature>
    <Description>Fires when the player or a group member "pings" a point on the minimap to share its location with the group</Description>
    <ArgumentList Name="unit">
      <Description>The unit of the player that was the source of said event (string) </Description>
    </ArgumentList>
    <ArgumentList Name="x">
      <Description>The x coordinate. 0 is the center point going out to .5 to the right and -.5 to the left. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="y">
      <Description>The y coordinate. 0 is the center point going out to .5 to the top and -.5 to the bottom. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MINIMAP_UPDATE_TRACKING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's currently active tracking ability changes. Applies to both tracking spells (such as a hunter's Track Beasts or a miner's Find Minerals) and UI tracking abilities provided to all players (such as finding Repair vendors or Low Level Quests).</Description>
  </WowApi>
  <WowApi Name="MINIMAP_UPDATE_ZOOM" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the minimap zoom type changes. The client stores separate zoom level settings for both indoor and outdoor areas; this event fires so that the minimap's zoom level can be changed when the player moves between such areas. It does not fire when directly setting the minimap's zoom level.</Description>
  </WowApi>
  <WowApi Name="MIRROR_TIMER_PAUSE" Priority="0" ImageType="Event">
    <Signature>(duration)</Signature>
    <Description>Fires when a special countdown timer is paused. Mirror timers are used for breath and fatigue when swimming and for the hunter Feign Death ability.</Description>
    <ArgumentList Name="duration">
      <Description>How long the timers should be paused. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MIRROR_TIMER_START" Priority="0" ImageType="Event">
    <Signature>("name", value, maxvalue, step, pause, "label")</Signature>
    <Description>Fires when a special countdown timer starts. Mirror timers are used for breath and fatigue when swimming and for the hunter Feign Death ability.</Description>
    <ArgumentList Name="name">
      <Description>The name of the timer that is starting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="value">
      <Description>The current value of the timer. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="maxvalue">
      <Description>The max value of the timer. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="step">
      <Description>The step that the value moves. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="pause">
      <Description>Signifies whether the timer is paused. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="label">
      <Description>The label for the timer. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MIRROR_TIMER_STOP" Priority="0" ImageType="Event">
    <Signature>("name")</Signature>
    <Description>Fires when a special countdown timer stops. Mirror timers are used for breath and fatigue when swimming and for the hunter Feign Death ability.</Description>
    <ArgumentList Name="name">
      <Description>The name associated with the timer that stopped. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MISSING_OUT_ON_LOOT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="MODIFIER_STATE_CHANGED" Priority="0" ImageType="Event">
    <Signature>("key", state)</Signature>
    <Description>Fires when a modifier key is pressed or released.</Description>
    <ArgumentList Name="key">
      <Description>The name of the key that you pressed. Possible values are LSHIFT, RSHIFT, LCTRL, RCTRL, LALT, and RALT. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="state">
      <Description>The state the key has entered. 1 means that the the key has been pressed. 0 means that the key has been released. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MOVIE_COMPRESSING_PROGRESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when compression of a movie recording starts</Description>
  </WowApi>
  <WowApi Name="MOVIE_RECORDING_PROGRESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when movie recording starts</Description>
  </WowApi>
  <WowApi Name="MOVIE_UNCOMPRESSED_MOVIE" Priority="0" ImageType="Event">
    <Signature>("filename")</Signature>
    <Description>Fires when the client prompts the player to allow compression of a movie recording</Description>
    <ArgumentList Name="filename">
      <Description>The filename of the movie to compress (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="MUTELIST_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the content of the player's muted list becomes available or changes</Description>
  </WowApi>
  <WowApi Name="NEUTRAL_FACTION_SELECT_RESULT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when Pandarian player will choose his side (Alliance/Horde).</Description>
  </WowApi>
  <WowApi Name="NEW_AUCTION_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="NEW_TITLE_EARNED" Priority="0" ImageType="Event">
    <Signature>("title")</Signature>
    <Description>Fires when the player earns a new title</Description>
    <ArgumentList Name="title">
      <Description>The name of the title (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="NEW_WMO_CHUNK" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when stepping off of a world map object. Appears to fire whenever the player has moved off of a structure such as a bridge or building and onto terrain or another object.
It's used alongside the ZONE_CHANGED events to set the map to the current area in Blizzard_BattlefieldMinimap.lua and WatchFrame.lua.</Description>
  </WowApi>
  <WowApi Name="NPC_PVPQUEUE_ANYWHERE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with an NPC which can queue the player for any battleground</Description>
  </WowApi>
  <WowApi Name="OLD_TITLE_LOST" Priority="0" ImageType="Event">
    <Signature>("title")</Signature>
    <Description>Fires when one of the player's titles is no longer available</Description>
    <ArgumentList Name="title">
      <Description>The name of the title you've lost (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="OPEN_MASTER_LOOT_LIST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the list of master loot candidates becomes available</Description>
  </WowApi>
  <WowApi Name="OPEN_TABARD_FRAME" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a tabard designer</Description>
  </WowApi>
  <WowApi Name="PARTY_CONVERTED_TO_RAID" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's party becomes a raid group</Description>
  </WowApi>
  <WowApi Name="PARTY_INVITE_CANCEL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a pending invitation to join a group is no longer available</Description>
  </WowApi>
  <WowApi Name="PARTY_INVITE_REQUEST" Priority="0" ImageType="Event">
    <Signature>("sender")</Signature>
    <Description>Fires when the player is invited to join a group</Description>
    <ArgumentList Name="sender">
      <Description>The name of the person who sent the invite. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PARTY_LEADER_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the leadership of the player's party changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PARTY_LFG_RESTRICTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PARTY_LOOT_METHOD_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the loot rules for the player's party changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PARTY_MEMBERS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the membership of the player's party changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PARTY_MEMBER_DISABLE" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when a party member goes offline</Description>
    <ArgumentList Name="id">
      <Description>The party id of the player disabled. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PARTY_MEMBER_ENABLE" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when an offline party member comes back online</Description>
    <ArgumentList Name="id">
      <Description>The id of the effected party member (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PETITION_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a guild or arena team charter</Description>
  </WowApi>
  <WowApi Name="PETITION_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a guild or arena team charter is presented to the player</Description>
  </WowApi>
  <WowApi Name="PETITION_VENDOR_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with an arena registrar</Description>
  </WowApi>
  <WowApi Name="PETITION_VENDOR_SHOW" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PETITION_VENDOR_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about available options at an arena registrar becomes available</Description>
  </WowApi>
  <WowApi Name="PET_ATTACK_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's pet starts auto-attacking</Description>
  </WowApi>
  <WowApi Name="PET_ATTACK_STOP" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's pet stops auto-attacking</Description>
  </WowApi>
  <WowApi Name="PET_BAR_HIDE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the pet action bar should be hidden. Does not fire in all cases where the default UI automatically hides the pet bar if inapplicable.</Description>
  </WowApi>
  <WowApi Name="PET_BAR_HIDEGRID" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a pet ability is removed from the cursor. In the default UI, this event causes the grid of empty pet action bar slots to be hidden. (This grid only appears when something that can be dragged to the pet action bar slot is picked up.)</Description>
  </WowApi>
  <WowApi Name="PET_BAR_SHOWGRID" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a pet ability is picked up onto the cursor. In the default UI, this event causes the grid of empty pet action bar slots to be shown. (This grid only appears when something that can be dragged to the pet action bar slot is picked up.)</Description>
  </WowApi>
  <WowApi Name="PET_BAR_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the content of the pet action bar changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PET_BAR_UPDATE_COOLDOWN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the cooldown begins or ends for an ability on the pet action bar</Description>
  </WowApi>
  <WowApi Name="PET_BAR_UPDATE_USABLE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_ABILITY_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_ACTION_SELECTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_AURA_APPLIED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an aura is applied to a pet in a pet battle</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_AURA_CANCELED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_AURA_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_CAPTURED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_CLOSE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fired when the pet battle interface closes at the end of a battle</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_FINAL_ROUND" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_HEALTH_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_LEVEL_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_LOOT_RECEIVED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_MAX_HEALTH_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_OPENING_DONE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the opening sequence of a pet battle ends</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_OPENING_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the opening sequence of a pet battle begins</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_OVER" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_PET_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_PET_ROUND_PLAYBACK_COMPLETE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_PET_ROUND_RESULTS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_PVP_DUEL_REQUESTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_PVP_DUEL_REQUEST_CANCEL" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_QUEUE_PROPOSAL_ACCEPTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_QUEUE_PROPOSAL_DECLINED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_QUEUE_PROPOSE_MATCH" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_QUEUE_STATUS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_TURN_STARTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_BATTLE_XP_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_DISMISS_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's pet is dismissed. Applies to warlock minions, mind controlled units, quest-related pets, etc., but not to hunter pets.</Description>
  </WowApi>
  <WowApi Name="PET_FORCE_NAME_DECLENSION" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is prompted to provide Russian declensions for a pet's name. Only applies in the Russian client.</Description>
  </WowApi>
  <WowApi Name="PET_JOURNAL_AUTO_SLOTTED_PET" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_JOURNAL_LIST_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_JOURNAL_NEW_BATTLE_SLOT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_JOURNAL_PETS_HEALED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_JOURNAL_PET_DELETED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_JOURNAL_TRAP_LEVEL_SET" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_RENAMEABLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is prompted to rename a pet which has been renamed before. A hunter's pet can normally only be named once, but a Certificate of Ownership can be used to rename a pet which has been renamed before.</Description>
  </WowApi>
  <WowApi Name="PET_SPECIALIZATION_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_SPELL_POWER_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PET_STABLE_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with the pet stables</Description>
  </WowApi>
  <WowApi Name="PET_STABLE_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with the pet stables</Description>
  </WowApi>
  <WowApi Name="PET_STABLE_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the pet stables' content changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PET_STABLE_UPDATE_PAPERDOLL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about 3D models used in the pet stables becomes available. Generally, this information is available on PET_STABLE_UPDATE, but this event may fire if model information needed to be retrieved from the server.</Description>
  </WowApi>
  <WowApi Name="PET_UI_CLOSE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's pet is no longer available. Used in the default UI to determine whether the Pet section of the Character window should be shown; most often, this is determined in response to other events (e.g. UNIT_PET), but this event may fire in some cases where the player switches pets.</Description>
  </WowApi>
  <WowApi Name="PET_UI_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's pet changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PLAYERBANKBAGSLOTS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the number of bank bag slots purchased by the player changes</Description>
  </WowApi>
  <WowApi Name="PLAYERBANKSLOTS_CHANGED" Priority="0" ImageType="Event">
    <Signature>(slotID)</Signature>
    <Description>Fires when the contents of a bank slot or bank bag slot are changed</Description>
    <ArgumentList Name="slotID">
      <Description>The slot id that changes. 1-28 is the bank slots. 29-35 are the bank bags. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_ALIVE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's spirit is released after death or when the player accepts a resurrection without releasing</Description>
  </WowApi>
  <WowApi Name="PLAYER_AURAS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player gains or loses a buff or debuff. Removed in patch 3.02. Use UNIT_AURA instead.</Description>
  </WowApi>
  <WowApi Name="PLAYER_AVG_ITEM_LEVEL_READY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the average item level of the player has been received from the server.</Description>
  </WowApi>
  <WowApi Name="PLAYER_CAMPING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to log out while not in a major city, inn, or other "resting" area</Description>
  </WowApi>
  <WowApi Name="PLAYER_CONTROL_GAINED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player regains control of his or her character. Occurs when a fear, mind control, or similar effect wears off or when the player arrives at the end of an automated flight path.</Description>
  </WowApi>
  <WowApi Name="PLAYER_CONTROL_LOST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player loses control of his or her character. Occurs when the player is afflicted by a fear, mind control, or similar effect or when the player takes an automated flight path.</Description>
  </WowApi>
  <WowApi Name="PLAYER_DAMAGE_DONE_MODS" Priority="0" ImageType="Event">
    <Signature>("unit")</Signature>
    <Description>Fires when an effect changes the player's spell bonus damage</Description>
    <ArgumentList Name="unit">
      <Description>Is always 'player' (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_DEAD" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player dies</Description>
  </WowApi>
  <WowApi Name="PLAYER_DIFFICULTY_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PLAYER_ENTERING_BATTLEGROUND" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player enters a battleground instance. Otherwise equivalent to PLAYER_ENTERING_WORLD.</Description>
  </WowApi>
  <WowApi Name="PLAYER_ENTERING_WORLD" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fired when the player enters the world, reloads the UI, enters/leaves an instance or battleground, or respawns at a graveyard. Also fires any other time the player sees a loading screen</Description>
  </WowApi>
  <WowApi Name="PLAYER_ENTER_COMBAT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins melee auto-attack mode. This event cannot be used to detect when the player is entering a combat situation (i.e. when targeted by a hostile creature); for such cases, see PLAYER_REGEN_DISABLED.</Description>
  </WowApi>
  <WowApi Name="PLAYER_EQUIPMENT_CHANGED" Priority="0" ImageType="Event">
    <Signature>(slot, hasItem)</Signature>
    <Description>Fires when the player equips or unequips an item</Description>
    <ArgumentList Name="slot">
      <Description>The inventory slot affected by the equipment change. (number, inventoryID) </Description>
    </ArgumentList>
    <ArgumentList Name="hasItem">
      <Description>1 if the slot contains an item, otherwise nil. (1nil) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_FARSIGHT_FOCUS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's viewpoint changes. Examples include spells such as Far Sight, Mind Vision, Eye of Kilrogg and various quest-related effects.</Description>
  </WowApi>
  <WowApi Name="PLAYER_FLAGS_CHANGED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's AFK or DND status changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit of the affected player. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_FOCUS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's focus unit changes</Description>
  </WowApi>
  <WowApi Name="PLAYER_GAINS_VEHICLE_DATA" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player gains vehicle-related attributes without necessarily entering a vehicle. This can occur when the player uses a multi-passenger mount -- like all other mounts it is considered an extension of the player rather than a separate vehicle unit, but it has vehicle-related attributes such as a seat diagram and passenger controls for exiting.</Description>
  </WowApi>
  <WowApi Name="PLAYER_GUILD_UPDATE" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when information about the player's guild membership changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit of the player effect. Most of the time this will be player, however sometimes it will be nil. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_LEAVE_COMBAT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player stops melee auto-attack mode. This event cannot be used to detect when the player is exiting a combat situation (i.e. after defeating for fleeing from a hostile creature); for such cases, see PLAYER_REGEN_ENABLED.</Description>
  </WowApi>
  <WowApi Name="PLAYER_LEAVING_WORLD" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player logs out or exits a world area. Can occur when leaving an instance or leaving one continent (or other separated world area) for another.</Description>
  </WowApi>
  <WowApi Name="PLAYER_LEVEL_UP" Priority="0" ImageType="Event">
    <Signature>("level", hp, mp, talentPoints, strength, agility, stamina, intellect, spirit)</Signature>
    <Description>Fires when the player gains a character level. Ding!</Description>
    <ArgumentList Name="level">
      <Description>The new player level. More accurate than UnitLevel at that time. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="hp">
      <Description>Hit points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="mp">
      <Description>Mana points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="talentPoints">
      <Description>Talent points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="strength">
      <Description>Strength points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="agility">
      <Description>Agility points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="stamina">
      <Description>Stamina points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="intellect">
      <Description>Intellect points gained. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spirit">
      <Description>Spirit points gained. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_LOGIN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires immediately before PLAYER_ENTERING_WORLD on login and UI reload. But unlike PLAYER_ENTERING_WORLD, this event ONLY fires for login/reload.</Description>
  </WowApi>
  <WowApi Name="PLAYER_LOGOUT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires immediately before the player is logged out of the game. Unlike PLAYER_LEAVING_WORLD, this event only fires upon logout and not when moving to different areas.</Description>
  </WowApi>
  <WowApi Name="PLAYER_LOSES_VEHICLE_DATA" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player loses vehicle-related attributes without necessarily having been in a vehicle. This can occur when the player uses a multi-passenger mount -- like all other mounts it is considered an extension of the player rather than a separate vehicle unit, but it has vehicle-related attributes such as a seat diagram and passenger controls for exiting.</Description>
  </WowApi>
  <WowApi Name="PLAYER_MONEY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player gains or spends money</Description>
  </WowApi>
  <WowApi Name="PLAYER_PVP_KILLS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires whenever a player's number of Honorable Kills changes</Description>
  </WowApi>
  <WowApi Name="PLAYER_PVP_RANK_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's PvP rank changes. Related to the old PvP rewards system from before WoW Patch 2.0; no longer used.</Description>
  </WowApi>
  <WowApi Name="PLAYER_QUITING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to exit WoW while not in a major city, inn, or other "resting" area</Description>
  </WowApi>
  <WowApi Name="PLAYER_REGEN_DISABLED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player enters combat status. When in combat, normal health and mana regeneration is disabled.</Description>
  </WowApi>
  <WowApi Name="PLAYER_REGEN_ENABLED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player leaves combat status. When in combat, normal health and mana regeneration is disabled.</Description>
  </WowApi>
  <WowApi Name="PLAYER_REPORT_SUBMITTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PLAYER_ROLES_ASSIGNED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PLAYER_SKINNED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when another character takes the insignia from the player's corpse in a battleground or world PvP zone. The player can no longer resurrect by returning to his or her corpse once it has been looted.</Description>
  </WowApi>
  <WowApi Name="PLAYER_SPECIALIZATION_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player, group member or raid member switches specialization.</Description>
  </WowApi>
  <WowApi Name="PLAYER_TALENT_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player gains or spends talent points</Description>
  </WowApi>
  <WowApi Name="PLAYER_TARGET_CHANGED" Priority="0" ImageType="Event">
    <Signature>("cause")</Signature>
    <Description>Fires when the player changes targets</Description>
    <ArgumentList Name="cause">
      <Description>a token indicating the cause of the target change (string)
LeftButton - selected the target using static frames in the UI
NIL - target moved out of range and was lost
down - pressed Escape to clear the target selection
up - clicked a unit directly</Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="PLAYER_TOTEM_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's placed totems changes or becomes available. Also used for ghouls summoned by a Death Knight's Raise Dead ability (if the ghoul is not made a controllable pet by the Master of Ghouls talent).</Description>
  </WowApi>
  <WowApi Name="PLAYER_TRADE_CURRENCY" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PLAYER_TRADE_MONEY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the amount of money offered for trade by the player changes</Description>
  </WowApi>
  <WowApi Name="PLAYER_UNGHOST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PLAYER_UPDATE_RESTING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player enters or leaves a major city, inn or other "resting" area</Description>
  </WowApi>
  <WowApi Name="PLAYER_XP_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's amount of accrued experience points changes</Description>
  </WowApi>
  <WowApi Name="PLAYTIME_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when changes to the player's limited play time status take effect. Only used in locales where the length of play sessions is restricted (e.g. mainland China).</Description>
  </WowApi>
  <WowApi Name="PLAY_MOVIE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an in-game movie should be played. Currently used only for the video in the Wrathgate quest event.</Description>
  </WowApi>
  <WowApi Name="PREVIEW_TALENT_POINTS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player spends or unspends talent points in preview mode</Description>
  </WowApi>
  <WowApi Name="PREVIEW_TALENT_PRIMARY_TREE_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PVPQUEUE_ANYWHERE_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interacting with the UI feature allowing battleground queueing from any location</Description>
  </WowApi>
  <WowApi Name="PVPQUEUE_ANYWHERE_UPDATE_AVAILABLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information for the any-battleground queueing UI changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PVP_POWER_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="PVP_RATED_STATS_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when GetPersonalRatedBGInfo() return variables changes or becomes available.</Description>
  </WowApi>
  <WowApi Name="PVP_REWARDS_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about Conquest Points cap changes or becomes available</Description>
  </WowApi>
  <WowApi Name="PVP_TYPES_ENABLED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="QUEST_ACCEPTED" Priority="0" ImageType="Event">
    <Signature>(questIndex)</Signature>
    <Description>Fires when a new quest is added to the player's quest log (which is what happens after a player accepts a quest).</Description>
    <ArgumentList />
  </WowApi>
  <WowApi Name="QUEST_ACCEPT_CONFIRM" Priority="0" ImageType="Event">
    <Signature>("name", "quest")</Signature>
    <Description>Fires when certain kinds of quests (e.g. NPC escort quests) are started by another member of the player's group</Description>
    <ArgumentList Name="name">
      <Description>The name of the user who started the quest. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="quest">
      <Description>The name of the quest that was started. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QUEST_AUTOCOMPLETE" Priority="0" ImageType="Event">
    <Signature>(questId)</Signature>
    <Description>Fires when a quest is automatically completed (remote handin available)</Description>
    <ArgumentList Name="questId">
      <Description>The ID of the quest completed (blizzid) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QUEST_BOSS_EMOTE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="QUEST_COMPLETE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is looking at the "Complete" page for a quest, at a questgiver.. This is the portion of a questgiver dialog in which the player is offered to choose a reward (or accept the only reward) and sees the "Complete" button available. This event does NOT fire when they actually complete the quest, it fires when they SEE the "Complete" button and are offered the ability to complete the quest, and has nothing to do with whether they actually turned in the quest or not.
To avoid confusion: This event should not be used if you want to know when the player actually turns in a quest, that's not what this event does (see above).
This event happens after the portion in which the questgiver verifies the player's progress on the quest.</Description>
  </WowApi>
  <WowApi Name="QUEST_DETAIL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when details of an available quest are presented by a questgiver. Fires for the portion of a questgiver dialog in which the the quest is described and the player is offered to accept the quest, sometimes after choosing the available quest from a greeting dialog.</Description>
  </WowApi>
  <WowApi Name="QUEST_FINISHED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a questgiver or ends a stage of the questgiver dialog. A typical dialogue with a questgiver is presented in four stages (though some stages may be skipped for some quests):
A greeting, in which the questgiver presents the player a choice of one or more available or active quests (presented via the QUEST_GREETING or GOSSIP_SHOW events).
After choosing an available quest, the questgiver describes its details and rewards, offering the player a chance to accept or decline the quest (presented via the QUEST_DETAIL event).
Upon returning (and selecting the active quest from the greeting) after accepting the quest, the questgiver verifies the player's progress on the quest and allows the player to turn it in if complete (presented via the QUEST_PROGRESS event).
With the completed quest turned in, the questgiver presents additional text and offers rewards for the player to choose -- or merely accept, in the case of a single reward or no reward save for XP or money (presented via the QUEST_COMPLETE event).
This event fires when the player completes any of the above stages of dialog, before the event presenting the next stage fires, or when the player declines or aborts interaction with the questgiver.</Description>
  </WowApi>
  <WowApi Name="QUEST_GREETING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a questgiver presents a greeting along with a list of active or available quests. Used only for a few questgivers; most questgivers offering multiple quests or other dialog options use the Gossip APIs instead (with GOSSIP_SHOW being the equivalent to this event).</Description>
  </WowApi>
  <WowApi Name="QUEST_ITEM_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about items in a questgiver dialog is updated. Only fires if information about quest items is retrieved from the server after the quest dialog is presented (via QUEST_DETAIL, QUEST_PROGRESS, QUEST_COMPLETE).</Description>
  </WowApi>
  <WowApi Name="QUEST_LOG_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the game client receives updates relating to the player's quest log (this event is not just related to the quests inside it). There are a LOT of various things that cause the server to send quest log information to the player's client, such as: Logging into the game world, zoning between servers (anytime you see a loading screen), accepting quests, deleting/abandoning quests, completing quests, quest progress updates (achieving whole or partial objective updates for a quest), when dailies reset (the "You can only complete 25 more daily quests today" event), and whenever something regarding the DISPLAY of the quest log VISUALLY changes (such as when you collapse or expand headers in the quest log; with headers being the lines such as "Terokkar Forest", that separate the quests into groups).
This event (QUEST_LOG_UPDATE) should therefore only be used if you care about the QUEST LOG itself more than the quests; ie if you implement a custom quest log, then you'd use this event to update the display when things like dailies reset or headers change.
However, if you are ONLY interested in tracking QUEST-related information (accepting quests, abandoning quests, achieving quest progress, and completing quests), there's a better event: UNIT_QUEST_LOG_CHANGED. See its page for details.</Description>
  </WowApi>
  <WowApi Name="QUEST_POI_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="QUEST_PROGRESS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when interacting with a questgiver about an active quest. This is the portion of a questgiver dialog in which the questgiver verifies the player's progress on the quest (e.g. "Have you brought me all 20 gnoll ears yet?"), generally after choosing the active quest from a greeting dialog and before turning in the completed quest.</Description>
  </WowApi>
  <WowApi Name="QUEST_WATCH_UPDATE" Priority="0" ImageType="Event">
    <Signature>(questIndex)</Signature>
    <Description>Fires when the player's status regarding a quest's objectives changes, for instance picking up a required object or killing a mob for that quest. All forms of (quest objective) progress changes will trigger this event.</Description>
    <ArgumentList Name="questIndex">
      <Description>Index of the affected quest in the quest log (between 1 and GetNumQuestLogEntries()) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="QUICK_TICKET_SYSTEM_STATUS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="QUICK_TICKET_THROTTLE_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RAID_BOSS_EMOTE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RAID_BOSS_WHISPER" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RAID_INSTANCE_WELCOME" Priority="0" ImageType="Event">
    <Signature>("name", ttl)</Signature>
    <Description>Fires when the player enters an instance that has a reset timer</Description>
    <ArgumentList Name="name">
      <Description>The name of the instance you're entering (string) </Description>
    </ArgumentList>
    <ArgumentList Name="ttl">
      <Description>The time till the instance resets, in seconds. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RAID_ROSTER_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the raid roster changes. This occurs when a raid is formed or disbanded, if members join or leave or are moved between raid subgroups, if the loot policy or loot master is changed, or if raid leader, assistant, main tank or main assist attributes are changed.
Quite a bit of RAID_ROSTER_UPDATE's pre-MoP functionality was moved to the new event GROUP_ROSTER_UPDATE. Further testing is required to determine the extend of the transition.</Description>
  </WowApi>
  <WowApi Name="RAID_TARGET_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when raid target icons are assigned or cleared</Description>
  </WowApi>
  <WowApi Name="RAISED_AS_GHOUL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player is raised as a ghoul by a friendly death knight</Description>
  </WowApi>
  <WowApi Name="READY_CHECK" Priority="0" ImageType="Event">
    <Signature>("name")</Signature>
    <Description>Fires when a ready check is triggered</Description>
    <ArgumentList Name="name">
      <Description>The username of the person who triggered the ready check (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="READY_CHECK_CONFIRM" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="READY_CHECK_FINISHED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a ready check ends</Description>
  </WowApi>
  <WowApi Name="RECEIVED_ACHIEVEMENT_LIST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RECEIVED_ACHIEVEMENT_MEMBER_LIST" Priority="0" ImageType="Event">
    <Signature>achievementId = ()</Signature>
    <Description>Fires when the list of players that earned an achievement is received. This is used with guild achievements that are earned with a specific amount of members, such as dungeon runs.</Description>
    <ReturnList Name="achievementId">
      <Description>The ID of the Achievement earned (blizzid) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="REPLACE_ENCHANT" Priority="0" ImageType="Event">
    <Signature>("current", "new")</Signature>
    <Description>Fires when the player attempts to enchant an item which is already enchanted</Description>
    <ArgumentList Name="current">
      <Description>The name of the current enchant. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="new">
      <Description>The name of the proposed enchant. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="REQUEST_CEMETERY_LIST_RESPONSE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="REQUIRED_GUILD_RENAME_RESULT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RESTRICTED_ACCOUNT_WARNING" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RESURRECT_REQUEST" Priority="0" ImageType="Event">
    <Signature>("name")</Signature>
    <Description>Fires when another character offers to resurrect the player</Description>
    <ArgumentList Name="name">
      <Description>The name of the user who is attempting to ressurect you/ (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ROLE_CHANGED_INFORM" Priority="0" ImageType="Event">
    <Signature>("changedPlayer", "changedBy", "oldRole", "newRole")</Signature>
    <Description>Fires when a party/raid member's role is changed manually. Roles are the strings "TANK", "HEALER", "DAMAGER", and "NONE". Use the additional arguments if you want to immediately use the new status; a call to UnitGroupRolesAssigned may not report the new data when called at this time.</Description>
    <ArgumentList Name="changedPlayer">
      <Description>The name of the player whose role was changed (string) </Description>
    </ArgumentList>
    <ArgumentList Name="changedBy">
      <Description>The name of player who made the change (string) </Description>
    </ArgumentList>
    <ArgumentList Name="oldRole">
      <Description>Their role before the change (string) </Description>
    </ArgumentList>
    <ArgumentList Name="newRole">
      <Description>Their new role (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="ROLE_POLL_BEGIN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="RUNE_POWER_UPDATE" Priority="0" ImageType="Event">
    <Signature>("runeIndex", "isEnergize")</Signature>
    <Description>Fires when the availability of one of the player's rune resources changes</Description>
    <ArgumentList Name="runeIndex">
      <Description>the runeIndex that was affected. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="isEnergize">
      <Description>if the rune was energized. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="RUNE_TYPE_UPDATE" Priority="0" ImageType="Event">
    <Signature>(runeIndex)</Signature>
    <Description>Fires when the type of one of the player's rune resources changes</Description>
    <ArgumentList Name="runeIndex">
      <Description>the runeIndex that was affected. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SCENARIO_CRITERIA_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SCENARIO_POI_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SCENARIO_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SCREENSHOT_FAILED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires if an attempt to take a screenshot fails</Description>
  </WowApi>
  <WowApi Name="SCREENSHOT_SUCCEEDED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a screenshot is successfully taken</Description>
  </WowApi>
  <WowApi Name="SCRIPT_ACHIEVEMENT_PLAYER_NAME" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SELF_RES_SPELL_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SEND_MAIL_COD_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the Cash On Delivery cost assigned for the outgoing mail message changes</Description>
  </WowApi>
  <WowApi Name="SEND_MAIL_MONEY_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the amount of money attached to the outgoing mail message changes</Description>
  </WowApi>
  <WowApi Name="SESSION_TIME_ALERT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SHOW_FACTION_SELECT_UI" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SHOW_LOOT_TOAST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SKILL_LINES_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the content of the player's skill list changes. Applies only to major changes to the list -- e.g. learning a new skill or raising one's level (such as from Journeyman to Master) in a trade skill -- not to skill rank increases.</Description>
  </WowApi>
  <WowApi Name="SOCKET_INFO_ACCEPT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SOCKET_INFO_CLOSE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with the item socketing UI</Description>
  </WowApi>
  <WowApi Name="SOCKET_INFO_SUCCESS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SOCKET_INFO_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the contents of the item socketing UI changes or becomes available</Description>
  </WowApi>
  <WowApi Name="SOR_BY_TEXT_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SOR_COUNTS_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SOR_START_EXPERIENCE_INCOMPLETE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SOUND_DEVICE_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about sound input/output devices changes or becomes available</Description>
  </WowApi>
  <WowApi Name="SPELLS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the contents of the player's spellbook changes or becomes available. Applies to both new content (e.g. learning a new spell or tradeskill) and changes which should cause the spellbook display to change (e.g. equipping a different main hand weapon, thus changing the icon for the Attack spell).</Description>
  </WowApi>
  <WowApi Name="SPELL_ACTIVATION_OVERLAY_GLOW_HIDE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_ACTIVATION_OVERLAY_GLOW_SHOW" Priority="0" ImageType="Event">
    <Signature>(spellId)</Signature>
    <Description>Fires when a reactive spell becomes active. Used for proc-like spells, such as Deep Freeze.</Description>
    <ArgumentList Name="spellId">
      <Description>The ID of the spell activated (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SPELL_ACTIVATION_OVERLAY_HIDE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_ACTIVATION_OVERLAY_SHOW" Priority="0" ImageType="Event">
    <Signature>(spellID, "texture", "positions", scale, r, g, b)</Signature>
    <Description>Fires when the player receives a reactive buff that should appear on the screen overlay. Positions can be simple:
CENTER
LEFT
RIGHT
TOP
TOPRIGHT
TOPLEFT
BOTTOMRIGHT
BOTTOMLEFT
... or complex:
RIGHT (FLIPPED)
BOTTOM (FLIPPED)
LEFT + RIGHT (FLIPPED)
TOP + BOTTOM (FLIPPED) </Description>
    <ArgumentList Name="spellID">
      <Description>The ID of the Achievement earned (number) </Description>
    </ArgumentList>
    <ArgumentList Name="texture">
      <Description>Full path to the texture file that should appear on screen (string) </Description>
    </ArgumentList>
    <ArgumentList Name="positions">
      <Description>Positions of the texture in the overlay (string) </Description>
    </ArgumentList>
    <ArgumentList Name="scale">
      <Description>Scale of the texture (number) </Description>
    </ArgumentList>
    <ArgumentList Name="r">
      <Description>Red value (number) </Description>
    </ArgumentList>
    <ArgumentList Name="g">
      <Description>Green value (number) </Description>
    </ArgumentList>
    <ArgumentList Name="b">
      <Description>Blue value (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="SPELL_CONFIRMATION_PROMPT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_CONFIRMATION_TIMEOUT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_FLYOUT_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_POWER_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_PUSHED_TO_ACTIONBAR" Priority="0" ImageType="Event">
    <Signature>spellID, slotIndex, slotPos = ()</Signature>
    <Description>When you learn a spell and it's placed on the actionbar, this event fires and tells the IconIntroAnimation frame to animate the icon and place it on the actionbar slot.</Description>
    <ReturnList Name="spellID">
      <Description>The spellID of the spell that was placed on the actionbar. (number) </Description>
    </ReturnList>
    <ReturnList Name="slotIndex">
      <Description>The actionbar index. (number) </Description>
    </ReturnList>
    <ReturnList Name="slotPos">
      <Description>The actionbar ID to where the spell was placed. (number) </Description>
    </ReturnList>
  </WowApi>
  <WowApi Name="SPELL_UPDATE_CHARGES" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="SPELL_UPDATE_COOLDOWN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the cooldown on one of the player's spells begins or ends. Only fires while something is being cast (i.e. beginning of cast, end of cast.)
While the event does react to every cooldown of a spell finishing, it doesn't fire until the next spellcast. If you're waiting for this event to see if a cooldown has finished, try SPELL_UPDATE_USABLE</Description>
  </WowApi>
  <WowApi Name="SPELL_UPDATE_USABLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a spell becomes usable or unusable. Includes when spells become unusable due to the global cooldown.</Description>
  </WowApi>
  <WowApi Name="START_AUTOREPEAT_SPELL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player casts a spell which automatically repeats. Used by (for example) Shoot for wand users.</Description>
  </WowApi>
  <WowApi Name="START_LOOT_ROLL" Priority="0" ImageType="Event">
    <Signature>(id, time)</Signature>
    <Description>Fires when an item becomes available for group loot rolling</Description>
    <ArgumentList Name="id">
      <Description>The id for this roll (number) </Description>
    </ArgumentList>
    <ArgumentList Name="time">
      <Description>How long the roll will last (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="START_MINIGAME" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Unused. Minigames are not implemented in the current version of the WoW client.</Description>
  </WowApi>
  <WowApi Name="START_TIMER" Priority="0" ImageType="Event">
    <Signature>timerType, timeSeconds, totalTime = ()</Signature>
    <Description>Tells TimerFrame what timebar to create, informs about the current time left and the original value it started to countdown from.</Description>
    <ReturnList Name="timerType">
      <Description>Unknown value as of now. (number) </Description>
    </ReturnList>
    <ReturnList />
    <ReturnList />
  </WowApi>
  <WowApi Name="STOP_AUTOREPEAT_SPELL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player stops repetition of an automatically repeating spell. Used by (for example) Shoot for wand users.</Description>
  </WowApi>
  <WowApi Name="STREAMING_ICON" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the game starts or stops downloading or patching content that is not yet ready</Description>
  </WowApi>
  <WowApi Name="SYNCHRONIZE_SETTINGS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when game options are manually synchronized with those saved on the server</Description>
  </WowApi>
  <WowApi Name="TABARD_CANSAVE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's ability to save a guild tabard design changes or becomes available</Description>
  </WowApi>
  <WowApi Name="TABARD_SAVE_PENDING" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to save a guild tabard design</Description>
  </WowApi>
  <WowApi Name="TALENTS_INVOLUNTARILY_RESET" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's talents have undergone a forced reset. This usually happens after a major patch or on test realms.</Description>
  </WowApi>
  <WowApi Name="TAXIMAP_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a flight master</Description>
  </WowApi>
  <WowApi Name="TAXIMAP_OPENED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a flight master</Description>
  </WowApi>
  <WowApi Name="TIME_PLAYED_MSG" Priority="0" ImageType="Event">
    <Signature>(total, level)</Signature>
    <Description>Fires when information about the player's total time played becomes available. Such information is normally requested via the /played command.</Description>
    <ArgumentList Name="total">
      <Description>The ammount of time played total, in seconds. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="level">
      <Description>The ammount of time played this level, in seconds. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TRACKED_ACHIEVEMENT_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRADE_ACCEPT_UPDATE" Priority="0" ImageType="Event">
    <Signature>(player, target)</Signature>
    <Description>Fires when the player or trade target signals acceptance (or cancels acceptance) of the trade</Description>
    <ArgumentList Name="player">
      <Description>Your accepted status. 1 for yes, 0 for no. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>Your target's accepted status. 1 for yes, 0 for no. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TRADE_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a trade with another player ends or is canceled</Description>
  </WowApi>
  <WowApi Name="TRADE_CURRENCY_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRADE_MONEY_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the amount of money offered by the trade target changes</Description>
  </WowApi>
  <WowApi Name="TRADE_PLAYER_ITEM_CHANGED" Priority="0" ImageType="Event">
    <Signature>(slotID)</Signature>
    <Description>Fires when the set of items offered for trade by the player changes</Description>
    <ArgumentList Name="slotID">
      <Description>The slot id of the item you are trading (1-7). (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TRADE_POTENTIAL_BIND_ENCHANT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRADE_REPLACE_ENCHANT" Priority="0" ImageType="Event">
    <Signature>("current", "new")</Signature>
    <Description>Fires if the player attempts to enchant an item offered by the trade target which is already enchanted</Description>
    <ArgumentList Name="current">
      <Description>The current item enchant (string) </Description>
    </ArgumentList>
    <ArgumentList Name="new">
      <Description>The name of the new proposed item enchant (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TRADE_REQUEST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Unused. Was once used for presenting the player with a confirmation dialog before initiating a trade offered by another character.</Description>
  </WowApi>
  <WowApi Name="TRADE_REQUEST_CANCEL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Unused. Was once used for canceling a confirmation dialog which would appear before initiating a trade offered by another character.</Description>
  </WowApi>
  <WowApi Name="TRADE_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a trade interaction with another character begins</Description>
  </WowApi>
  <WowApi Name="TRADE_SKILL_CLOSE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a trade skill recipe list</Description>
  </WowApi>
  <WowApi Name="TRADE_SKILL_FILTER_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the search filter for a trade skill recipe list changes</Description>
  </WowApi>
  <WowApi Name="TRADE_SKILL_NAME_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRADE_SKILL_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins interaction with a trade skill recipe list</Description>
  </WowApi>
  <WowApi Name="TRADE_SKILL_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the contents of a trade skill recipe list changes or becomes available</Description>
  </WowApi>
  <WowApi Name="TRADE_TARGET_ITEM_CHANGED" Priority="0" ImageType="Event">
    <Signature>(slotID)</Signature>
    <Description>Fires when the set of items offered for trade by the target changes</Description>
    <ArgumentList Name="slotID">
      <Description>The slot's ID that changed (1-7). (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="TRADE_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when new information becomes available about a trade process underway with another character. Not used for most changes to the trade process (see other TRADE events for changes to items and money offered for trade by either party).</Description>
  </WowApi>
  <WowApi Name="TRAINER_CLOSED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player ends interaction with a class or skill trainer</Description>
  </WowApi>
  <WowApi Name="TRAINER_DESCRIPTION_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when description information for the selected trainer service changes or becomes available</Description>
  </WowApi>
  <WowApi Name="TRAINER_SHOW" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRAINER_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the contents of the trainer service list changes or becomes available</Description>
  </WowApi>
  <WowApi Name="TRANSMOGRIFY_BIND_CONFIRM" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRANSMOGRIFY_CLOSE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRANSMOGRIFY_OPEN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRANSMOGRIFY_SUCCESS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRANSMOGRIFY_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRIAL_CAP_REACHED_LEVEL" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TRIAL_CAP_REACHED_MONEY" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="TUTORIAL_TRIGGER" Priority="0" ImageType="Event">
    <Signature>(id)</Signature>
    <Description>Fires when a contextual tutorial should be shown</Description>
    <ArgumentList Name="id">
      <Description>The id for the tutorial that needs to show. Valid values are between 1 and 51. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UI_ERROR_MESSAGE" Priority="0" ImageType="Event">
    <Signature>("message")</Signature>
    <Description>Fires when a game error message should be displayed. e.g. "You cannot attack that target", "Your pet is dead", "Your inventory is full"</Description>
    <ArgumentList Name="message">
      <Description>The message thats to be displayed. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UI_INFO_MESSAGE" Priority="0" ImageType="Event">
    <Signature>("message")</Signature>
    <Description>Fires when an informative message should be displayed. e.g. "No fish are hooked", "You must be at least level 80 and in a raid group to enter this instance"</Description>
    <ArgumentList Name="message">
      <Description>The message that needs to be displayed (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UI_SCALE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the UI scale changes</Description>
  </WowApi>
  <WowApi Name="UNIT_ATTACK" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's weapon (or standard melee attack damage) changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_ATTACK_POWER" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's attack power changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_ATTACK_SPEED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's attack speed changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_AURA" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit loses or gains a buff or debuff.. This event fires before the effect of the buff can be seen on the character. For example if the unit gains the Mark of the Wild buff, at the time this even fires their stats may not have updated to reflect the gain from the buff. If you wish to be notified when the buff effect is gained or lost, register for the event that tracks the attribute being affected (e.g. UNIT_STATS, UNIT_ATTACK_POWER).</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_CLASSIFICATION_CHANGED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit changes classification (e.g. if an elite unit becomes non-elite)</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_COMBAT" Priority="0" ImageType="Event">
    <Signature>("unitID", "action", "descriptor", damage, damageType)</Signature>
    <Description>Fires when a unit takes or recovers from damage due to a combat effect</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="action">
      <Description>The action type that happened, i.e. WOUND, DODGE, HEAL (string) </Description>
    </ArgumentList>
    <ArgumentList Name="descriptor">
      <Description>A descriptor that describes the action, i.e. CRITICAL, CRUSHING (string) </Description>
    </ArgumentList>
    <ArgumentList Name="damage">
      <Description>The ammount of damage or healing received (number) </Description>
    </ArgumentList>
    <ArgumentList Name="damageType">
      <Description>The type of damage dealt. Is 0(physical) for healing. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_COMBO_POINTS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit scores combo points on its target</Description>
  </WowApi>
  <WowApi Name="UNIT_CONNECTION" Priority="0" ImageType="Event">
    <Signature>("unitID", hasConnected)</Signature>
    <Description>Fires when the connection status for a unit has changed.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="hasConnected">
      <Description>Whether or not the unit has connected. (bool) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_DAMAGE" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's weapon damage changes.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_DEFENSE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_DISPLAYPOWER" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's primary power type (e.g. rage, energy, mana) changes. Occurs when a druid shapeshifts as well as in certain other cases.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_DYNAMIC_FLAGS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when certain unit attributes change. Attribute changes covered by this event include UnitIsCorpse() and UnitIsTapped().</Description>
  </WowApi>
  <WowApi Name="UNIT_ENTERED_VEHICLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit has entered a vehicle</Description>
  </WowApi>
  <WowApi Name="UNIT_ENTERING_VEHICLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit begins entering a vehicle. See UNIT_ENTERED_VEHICLE for when the vehicle boarding animation finishes.</Description>
  </WowApi>
  <WowApi Name="UNIT_EXITED_VEHICLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit has exited a vehicle</Description>
  </WowApi>
  <WowApi Name="UNIT_EXITING_VEHICLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit begins exiting a vehicle. See UNIT_EXITED_VEHICLE for when the vehicle exiting animation finishes.</Description>
  </WowApi>
  <WowApi Name="UNIT_FACTION" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's PvP status changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_FLAGS" Priority="0" ImageType="Event">
    <Signature>("unit")</Signature>
    <Description>Fires when certain combat statuses for a unit change (e.g. stunned, feared)</Description>
    <ArgumentList Name="unit">
      <Description>The id of the affected unit. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_GUILD_LEVEL" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_HEALTH" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's health level changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_HEALTH_FREQUENT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_HEAL_PREDICTION" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_INVENTORY_CHANGED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when the player (or inspected unit) equips or unequips items</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_LEVEL" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's character level changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_MANA" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's mana level changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_MAXHEALTH" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's maximum health changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_MAXPOWER" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the max power of a unit changes</Description>
  </WowApi>
  <WowApi Name="UNIT_MODEL_CHANGED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's 3D model changes (e.g. due to shapeshifting, being polymorphed, or equipping gear)</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_NAME_UPDATE" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's name is changed. Also fires when the client is first notified of a unit's name.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_OTHER_PARTY_CHANGED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_PET" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit gains or loses a pet</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_PET_EXPERIENCE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_PHASE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit's phasing status changes. Used to know whether party members are not in the same phase as the player.</Description>
  </WowApi>
  <WowApi Name="UNIT_PORTRAIT_UPDATE" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's portrait changes (e.g. due to shapeshifting, being polymorphed, or equipping gear). Also fires when a unit's portrait changes from a generic race/gender image to one based on the unit's 3D model.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_POWER" Priority="0" ImageType="Event">
    <Signature>("unitID", "powerType")</Signature>
    <Description>Fires when a unit's power level changes.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="powerType">
      <Description>'MANA', 'RAGE', 'ENERGY', 'FOCUS', 'HAPPINESS', 'RUNIC_POWER', 'HOLY_POWER'. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_POWER_BAR_HIDE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_POWER_BAR_SHOW" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_POWER_BAR_TIMER_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_POWER_FREQUENT" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_QUEST_LOG_CHANGED" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's quests change (accepted/objective progress/abandoned/completed). This event will trigger both for your status changes, and that of others (when in a party/raid), and signifies that something has changed regarding the unit's current quests. This event triggering means that one of the following has occured: Accepted a new quest, abandoned an existing quest, achieved progress on the objectives of a quest, or completed (turned in) a quest.
unitID will be "player" when the event relates to you. This event is VERY reliable for players, and is the preferred event when you ONLY care about changes relating to the player's quests and don't care about all the other triggerings that come with using the player-only QUEST_LOG_UPDATE (that event should really only be used if you are writing a Quest Log replacement addon, as it triggers on many, many non-quest related things).
unitID will be partyX/raidX when the event relates to a party or raid member. However, this event is EXTREMELY unreliable for party and raid members, as it will ONLY trigger if you are at a very close range to them; and it will only trigger when they GAIN a quest (accepting) or LOSE a quest (abandon/turn in), meaning that you can't expect to use this event to monitor the quest status of other units, as you may be out of range when they accept or finish a quest (and then your client won't trigger this event and you won't know that they have a new quest/no longer has a certain quest). Also, even if they ARE in range it won't trigger for PROGRESS updates (such as finishing or achieving progress on certain objectives). It's best to just completely ignore that this event claims to be for other units, as its range limitation makes it useless for keeping an accurate look at other unit's quest state.
Note: If you are in a party or raid and YOUR status changes, this event will be triggered twice; once with a unitID of "player", and once with your current "partyX/raidX" unitID (be aware that your ID changes whenever the party/raid layout changes; one call you may be raid37, and another call you may be raid21, so never store the value and assume it to stay the same).
Warning Regarding Use: If your addon's operation relies on building an internal table of the user's quests, and you want that table available immediately at logon/UI reload, you MUST complement this event with QUEST_LOG_UPDATE (which fires 2 times on logon and 1 time on UI reload), and build/update your quest table on BOTH QUEST_LOG_UPDATE and UNIT_QUEST_LOG_CHANGED. That's because the latter event only fires on actual CHANGES to your quests, and NOT on logon/UI reload. However, as soon as QUEST_LOG_UPDATE has fired you don't need it anymore, and you should use UnregisterEvent to remove it. This ensures that your addon starts out watching for QLU, uses it once to grab the "initial state", unregisters from it since we don't need it anymore, and then uses UQLC from then on to monitor CHANGES to the quests. (Also note that, no, you can't use PLAYER_LOGIN since the quest log data is received later than that.)</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_RANGEDDAMAGE" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's ranged attack damage changes. Also fires when a unit's ranged attack speed changes.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_RANGED_ATTACK_POWER" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's ranged attack power changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_RESISTANCES" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's magic resistances change. Also seems to fire when a unit's armor value changes.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that was affected. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_CHANNEL_START" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit starts channeling a spell</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. This number is always 0 for channels. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_CHANNEL_STOP" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit stops or cancels a channeled spell</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. This number is always 0 for channels. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_CHANNEL_UPDATE" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit's channeled spell is interrupted or delayed</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. This number is always 0 for channels. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_DELAYED" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit's spell cast is delayed</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_FAILED" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit's spell cast fails</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_FAILED_QUIET" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit's spell cast fails and no error message should be displayed. The default UI displays an error message when UNIT_SPELLCAST_FAILED fires; in some situations (e.g. if the player attempts to cast while mind controlled), this event is used instead, preventing an error message from being displayed while still notifying interested scripts of the failure.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_INTERRUPTED" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit's spell cast is interrupted</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_INTERRUPTIBLE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_NOT_INTERRUPTIBLE" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's spell cast becomes uninterruptible</Description>
    <ArgumentList Name="unitID">
      <Description>The unit who's currently casting spell has cannot be interrupted. (string, unitID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_SENT" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", "target", lineID)</Signature>
    <Description>Fires when a request to cast a spell (on behalf of the player or a unit controlled by the player) is sent to the server</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="target">
      <Description>The name of the target of your spell. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_START" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit begins casting a spell</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_STOP" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit stops or cancels casting a spell</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELLCAST_SUCCEEDED" Priority="0" ImageType="Event">
    <Signature>("unitID", "spell", "rank", lineID, spellID)</Signature>
    <Description>Fires when a unit's spell cast succeeds</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's casting. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="spell">
      <Description>The name of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="rank">
      <Description>The rank of the spell that's being casted. (string) </Description>
    </ArgumentList>
    <ArgumentList Name="lineID">
      <Description>Spell lineID counter. The Nth spell that UNIT_SPELLCAST events have fired for. Unique to each spell cast - UNIT_SPELLCAST_START and UNIT_SPELLCAST_SUCCESS events referring to the same cast will have the same lineID. Resets to 0 when the count reaches 255, but this number may just always be 0 for some spells. (number) </Description>
    </ArgumentList>
    <ArgumentList Name="spellID">
      <Description>The id of the spell that's being casted. (number, spellID) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_SPELL_HASTE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UNIT_STATS" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's primary attributes change. Primary attributes are Strength, Stamina, Agility, Intellect, and Spirit.</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's being affected by the event. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_TARGET" Priority="0" ImageType="Event">
    <Signature>("unitID")</Signature>
    <Description>Fires when a unit's target changes</Description>
    <ArgumentList Name="unitID">
      <Description>The unit that's being affected by the event. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UNIT_TARGETABLE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the targetable status of a unit changes</Description>
  </WowApi>
  <WowApi Name="UNIT_THREAT_LIST_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a non-player unit's threat list is updated</Description>
  </WowApi>
  <WowApi Name="UNIT_THREAT_SITUATION_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a unit's threat state changes. Only fires when changes in the unit's general threat state (see UnitThreatSituation()) occur, not due to changes in the underlying threat values.</Description>
  </WowApi>
  <WowApi Name="UPDATE_BATTLEFIELD_SCORE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information for the battleground scoreboard changes or becomes available</Description>
  </WowApi>
  <WowApi Name="UPDATE_BATTLEFIELD_STATUS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's status in a battleground or queue changes</Description>
  </WowApi>
  <WowApi Name="UPDATE_BINDINGS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's key binding settings changes or becomes available</Description>
  </WowApi>
  <WowApi Name="UPDATE_BONUS_ACTIONBAR" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the bonus action bar changes or becomes available. The bonus action bar is used for state-dependent sets of actions, such as those used for warrior stances, druid shapeshift forms, rogue stealth, and possession of other units; this event fires when entering such states.</Description>
  </WowApi>
  <WowApi Name="UPDATE_CHAT_COLOR" Priority="0" ImageType="Event">
    <Signature>("type", red, green, blue)</Signature>
    <Description>Fires when the color settings for chat message types are updated</Description>
    <ArgumentList Name="type">
      <Description>Chat message type for which the color setting has changed (string) </Description>
    </ArgumentList>
    <ArgumentList Name="red">
      <Description>Red component of the color (0.0 - 1.0) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="green">
      <Description>Green component of the color (0.0 - 1.0) (number) </Description>
    </ArgumentList>
    <ArgumentList Name="blue">
      <Description>Blue component of the color (0.0 - 1.0) (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UPDATE_CHAT_COLOR_NAME_BY_CLASS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when settings for per-class color-coding of character names in chat are updated</Description>
  </WowApi>
  <WowApi Name="UPDATE_CHAT_WINDOWS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when saved chat window settings are loaded</Description>
  </WowApi>
  <WowApi Name="UPDATE_EXHAUSTION" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's rest state or amount of rested XP changes</Description>
  </WowApi>
  <WowApi Name="UPDATE_EXPANSION_LEVEL" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_EXTRA_ACTIONBAR" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_FACTION" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the contents of the reputation listing change or become available. Fires both for changes to the listing as displayed in the reputation UI (i.e. expanding or collapsing headers, moving factions to the Inactive group, or changing at-war status) and for changes to the player's reputation with any faction.</Description>
  </WowApi>
  <WowApi Name="UPDATE_FLOATING_CHAT_WINDOWS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when chat window layout should be updated</Description>
  </WowApi>
  <WowApi Name="UPDATE_GM_STATUS" Priority="0" ImageType="Event">
    <Signature>(avilable)</Signature>
    <Description>Fires when the player's GM ticket status (or ability to submit tickets) changes</Description>
    <ArgumentList Name="avilable">
      <Description>Is 1 if the gms are available, 0 if they are not. (number) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="UPDATE_INSTANCE_INFO" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about instances to which the player is saved changes or becomes available</Description>
  </WowApi>
  <WowApi Name="UPDATE_INVENTORY_ALERTS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an equipped item's durability alert status changes. Only fires for changes affecting durability alert status (conditions displayed as red or yellow on the default UI's durability warning frame); for other changes to item durability levels, see UPDATE_INVENTORY_DURABILITY.</Description>
  </WowApi>
  <WowApi Name="UPDATE_INVENTORY_DURABILITY" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an equipped item's durability changes</Description>
  </WowApi>
  <WowApi Name="UPDATE_LFG_LIST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when results of a Looking for More query become available</Description>
  </WowApi>
  <WowApi Name="UPDATE_LFG_LIST_INCREMENTAL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when results of a Looking for More query are updated</Description>
  </WowApi>
  <WowApi Name="UPDATE_LFG_TYPES" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about possible Looking for Group settings changes or becomes available</Description>
  </WowApi>
  <WowApi Name="UPDATE_MACROS" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_MASTER_LOOT_LIST" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the contents of the master loot candidate list change or become available</Description>
  </WowApi>
  <WowApi Name="UPDATE_MOUSEOVER_UNIT" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the mouse cursor moves over a visible unit. Fires both when mousing over units in the 3D world or when mousing over secure frames whose unit attribute refers to a unit in the player's area of interest.</Description>
  </WowApi>
  <WowApi Name="UPDATE_MULTI_CAST_ACTIONBAR" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the contents of the multi-cast action bar change or become available. This action bar is currently used only for allowing shaman characters to place multiple totems at once.</Description>
  </WowApi>
  <WowApi Name="UPDATE_OVERRIDE_ACTIONBAR" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_PENDING_MAIL" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about newly received mail messages (not yet seen at a mailbox) becomes available</Description>
  </WowApi>
  <WowApi Name="UPDATE_POSSESS_BAR" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_SHAPESHIFT_COOLDOWN" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the cooldown begins or ends for an action on the stance/shapeshift bar</Description>
  </WowApi>
  <WowApi Name="UPDATE_SHAPESHIFT_FORM" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's shapeshift form changes. Unlike other shapeshift-related events, this function refers specifically to shapeshifting -- therefore including some abilities which are not presented via the stance/shapeshift bar and excluding some which are. For example, applies to shaman Ghost Wolf form, druid shapeshifts, and some quest-related shapeshifting, but not warrior stances, paladin auras, or rogue stealth. This does fire for Death Knight presences, however.</Description>
  </WowApi>
  <WowApi Name="UPDATE_SHAPESHIFT_FORMS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the contents of the stance/shapeshift bar change or become available</Description>
  </WowApi>
  <WowApi Name="UPDATE_SHAPESHIFT_USABLE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when an ability on the stance/shapeshift bar becomes usable or unusable. For example, the availability of druid aquatic, travel, and flight forms can change as the player moves around, as those forms are only usable when the player is swimming, outside, or in an area that allows flight.</Description>
  </WowApi>
  <WowApi Name="UPDATE_STEALTH" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player uses or cancels a stealth ability</Description>
  </WowApi>
  <WowApi Name="UPDATE_SUMMONPETS_ACTION" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_TICKET" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about an active GM ticket changes or becomes available</Description>
  </WowApi>
  <WowApi Name="UPDATE_TRADESKILL_RECAST" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_VEHICLE_ACTIONBAR" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="UPDATE_WORLD_STATES" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information for world state UI elements changes or becomes available. World State UI elements include PvP, instance, and quest objective information (displayed at the top center of the screen in the default UI) as well as more specific information for "control point" style PvP objectives. Examples: the Horde/Alliance score in Arathi Basin, the tower status and capture progress bars in Hellfire Peninsula, the progress text in the Black Morass and Violet Hold instances, and the event status text for quests The Light of Dawn and The Battle For The Undercity.</Description>
  </WowApi>
  <WowApi Name="USE_BIND_CONFIRM" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to use an item which will become soulbound in the process</Description>
  </WowApi>
  <WowApi Name="USE_GLYPH" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player begins to use a glyph. In the default UI, this event causes the glyph interface to open when the player right-clicks a glyph item, allowing quick targeting of a socket for the glyph.</Description>
  </WowApi>
  <WowApi Name="VARIABLES_LOADED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when non-addon-specific saved variables are loaded. Addons should generally use ADDON_LOADED to determine whether their saved variables have loaded.</Description>
  </WowApi>
  <WowApi Name="VEHICLE_ANGLE_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when controls for vehicle weapon pitch should be displayed</Description>
  </WowApi>
  <WowApi Name="VEHICLE_ANGLE_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's vehicle weapon pitch changes</Description>
  </WowApi>
  <WowApi Name="VEHICLE_PASSENGERS_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the list of passengers in the player's vehicle changes</Description>
  </WowApi>
  <WowApi Name="VEHICLE_POWER_SHOW" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when controls for vehicle weapon power should be displayed </Description>
  </WowApi>
  <WowApi Name="VEHICLE_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about the player's vehicle changes or becomes available</Description>
  </WowApi>
  <WowApi Name="VOICE_CHANNEL_STATUS_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when voice-related status of a chat channel changes</Description>
  </WowApi>
  <WowApi Name="VOICE_CHAT_ENABLED_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the client's voice chat feature is enabled or disabled</Description>
  </WowApi>
  <WowApi Name="VOICE_LEFT_SESSION" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a voice-enabled member leaves a chat channel</Description>
  </WowApi>
  <WowApi Name="VOICE_PLATE_START" Priority="0" ImageType="Event">
    <Signature>("name", "unit")</Signature>
    <Description>Fires when a channel member begins speaking in voice chat</Description>
    <ArgumentList Name="name">
      <Description>The username of the player thats talking (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>The unit of the player thats talking, i.e. party1. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VOICE_PLATE_STOP" Priority="0" ImageType="Event">
    <Signature>("name", "unit")</Signature>
    <Description>Fires when a channel member finishes speaking in voice chat</Description>
    <ArgumentList Name="name">
      <Description>The username of the player thats talking (string) </Description>
    </ArgumentList>
    <ArgumentList Name="unit">
      <Description>The unit of the player thats talking, i.e. party1. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VOICE_PUSH_TO_TALK_START" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the "Push to Talk" key binding is activated</Description>
  </WowApi>
  <WowApi Name="VOICE_PUSH_TO_TALK_STOP" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the "Push to Talk" key binding is deactivated</Description>
  </WowApi>
  <WowApi Name="VOICE_SELF_MUTE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's self mute setting changes</Description>
  </WowApi>
  <WowApi Name="VOICE_SESSIONS_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when information about a voice chat session changes or becomes available</Description>
  </WowApi>
  <WowApi Name="VOICE_START" Priority="0" ImageType="Event">
    <Signature>("unit")</Signature>
    <Description>Fires when a channel member begins speaking in voice chat</Description>
    <ArgumentList Name="unit">
      <Description>The unit of the player thats talking, i.e. party1. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VOICE_STATUS_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when a member of the player's group changes voice chat status</Description>
  </WowApi>
  <WowApi Name="VOICE_STOP" Priority="0" ImageType="Event">
    <Signature>("unit")</Signature>
    <Description>Fires when a channel member finishes speaking in voice chat</Description>
    <ArgumentList Name="unit">
      <Description>The unit of the player thats talking, i.e. party1. (string) </Description>
    </ArgumentList>
  </WowApi>
  <WowApi Name="VOID_DEPOSIT_WARNING" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOID_STORAGE_CLOSE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOID_STORAGE_CONTENTS_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOID_STORAGE_DEPOSIT_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOID_STORAGE_OPEN" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOID_STORAGE_UPDATE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOID_TRANSFER_DONE" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="VOTE_KICK_REASON_NEEDED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player attempts to vote-kick another player and the game requests a reason</Description>
  </WowApi>
  <WowApi Name="WARGAME_REQUESTED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="WEAR_EQUIPMENT_SET" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player's current equipment set changes. The firing of this event indicates the moment when the player's "current equipment set" state (as returned by GetEquipmentSetInfo()) changes -- at that time, the process of equipping/unequipping the set's items may not yet be complete.
See EQUIPMENT_SWAP_PENDING and EQUIPMENT_SWAP_FINISHED for monitoring the beginning and end of the equipment swap process.</Description>
  </WowApi>
  <WowApi Name="WEIGHTED_SPELL_UPDATED" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="WHO_LIST_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when results of a Who query become available. Only fires if there are more than three results or if SetWhoToUI(1) was called before performing the query.</Description>
  </WowApi>
  <WowApi Name="WORLD_MAP_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the contents of the world map change or become available</Description>
  </WowApi>
  <WowApi Name="WORLD_STATE_TIMER_START" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="WORLD_STATE_TIMER_STOP" Priority="0" ImageType="Event">
    <Description>This event is not yet documented</Description>
  </WowApi>
  <WowApi Name="WORLD_STATE_UI_TIMER_UPDATE" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the state of a timer world state UI element changes or becomes available. World State UI elements include PvP, instance, and quest objective information (displayed at the top center of the screen in the default UI) as well as more specific information for "control point" style PvP objectives. Timer world state elements include the countdown between battles in Wintergrasp, the countdown between periods in which the PvP objectives in Terokkar Forest are available, and timers shown for the quests The Light of Dawn and The Battle For The Undercity.</Description>
  </WowApi>
  <WowApi Name="WOW_MOUSE_NOT_FOUND" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>This event fires when a man buttoned WoW mouse is not found, in response to a DetectWowMouse() function call</Description>
  </WowApi>
  <WowApi Name="ZONE_CHANGED" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player moves between subzones or other named areas. Only fired if ZONE_CHANGED_INDOORS or ZONE_CHANGED_NEW_AREA does not fire.</Description>
  </WowApi>
  <WowApi Name="ZONE_CHANGED_INDOORS" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player moves between areas and the "indoors/outdoors" status may have changed</Description>
  </WowApi>
  <WowApi Name="ZONE_CHANGED_NEW_AREA" Priority="0" ImageType="Event">
    <Signature>()</Signature>
    <Description>Fires when the player moves between major zones or enters/exits an instance</Description>
  </WowApi>
</ArrayOfWowApi>